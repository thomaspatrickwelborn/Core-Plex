{"version":3,"file":"core-plex.min.js","sources":["../development/coutil/pandEvents/index.js","../development/coutil/pathDirectory/index.js","../development/coutil/recursiveAssign/index.js","../development/coutil/recursiveAssignConcat/index.js","../development/coutil/typeOf/index.js","../node_modules/outmatch/build/index.es.mjs","../development/core/event/index.js","../development/core/settings/index.js","../development/core/options/index.js","../development/core/index.js"],"sourcesContent":["function impandEvents($propEvents) {\n  if(!Array.isArray($propEvents)) { return $propEvents }\n  const propEvents = {}\n  iteratePropEvents: \n  for(const $propEvent of $propEvents) {\n    const { path, type, listener, options } = $propEvent\n    const propEventSettings = `${$path} ${$type}`\n    if(options !== undefined) {\n      propEvents[propEventSettings] = [listener, options]\n    }\n    else {\n      propEvents[propEventSettings] = listener\n    }\n  }\n  return propEvents\n}\n\nfunction expandEvents($propEvents) {\n  const propEvents = []\n  if(Array.isArray($propEvents)) { return $propEvents }\n  else if($propEvents === undefined) { return propEvents }\n  iteratePropEvents:\n  for(const [\n    $propEventSettings, $propEventListener\n  ] of Object.entries($propEvents)) {\n    const propEventSettings = $propEventSettings.split(' ')\n    let path, type, listener, options\n    if(propEventSettings.length === 1) {\n      path = ':scope'\n      type = propEventSettings[0]\n    }\n    else if(propEventSettings.length > 1) {\n      path = propEventSettings[0]\n      type = propEventSettings[1]\n    }\n    if(Array.isArray($propEventListener)) {\n      listener = $propEventListener[0]\n      options = $propEventListener[1]\n    }\n    else {\n      listener = $propEventListener\n    }\n    const propEvent = {\n      type,\n      path,\n      listener,\n      enable: false,\n    }\n    propEvents.push(propEvent)\n  }\n  return propEvents\n}\n\nexport { impandEvents, expandEvents }","const Options = {\n  depth: 0,\n  maxDepth: 10,\n}\nexport default function pathDirectory($object, $options) {\n  const target = []\n  const options = Object.assign({}, Options, $options)\n  options.depth++\n  if(options.depth > options.maxDepth) { return target }\n  iterateObjectProperties: \n  for(const [$key, $value] of Object.entries($object)) {\n    target.push($key)\n    if(\n      typeof $value === 'object' &&\n      $value !== null &&\n      $value !== $object\n    ) {\n      const subtarget = pathDirectory($value, options)\n      for(const $subtarget of subtarget) {\n        let path\n        if(typeof $subtarget === 'object') {\n          path = [$key, ...$subtarget].join('.')\n        }\n        else {\n          path = [$key, $subtarget].join('.')\n        }\n        target.push(path)\n      }\n    }\n  }\n  return target\n}","function recursiveAssign() {\n  const $arguments = [...arguments]\n  const $target = $arguments.shift()\n  const $sources = $arguments\n  iterateSources: \n  for(const $source of $sources) {\n    if(\n      $source === null ||\n      $source === undefined\n    ) { continue iterateSources }\n    iterateSourceEntries: \n    for(let [\n      $sourcePropKey, $sourcePropValue\n    ] of Object.entries($source)) {\n      // Type: Non-Null Object\n      if(\n        $target[$sourcePropKey] !== null &&\n        typeof $sourcePropValue === 'object'\n      ) {\n        let targetPropValue\n        if($target[$sourcePropKey] === undefined) {\n          $target[$sourcePropKey] = $sourcePropValue\n        }\n        else {\n          $target[$sourcePropKey] = recursiveAssign(\n            $target[$sourcePropKey], $sourcePropValue\n          )\n        }\n      }\n      // Type: Primitive\n      else {\n        $target[$sourcePropKey] = $sourcePropValue\n      }\n    }\n  }\n  return $target\n}\nexport default recursiveAssign","function recursiveAssignConcat() {\n  const $arguments = [...arguments]\n  const $target = $arguments.shift()\n  const $sources = $arguments\n  iterateSources: \n  for(const $source of $sources) {\n    if(\n      $source === null ||\n      $source === undefined\n    ) { continue iterateSources }\n    iterateSourceEntries: \n    for(let [\n      $sourcePropKey, $sourcePropValue\n    ] of Object.entries($source)) {\n      // Type: Non-Null Object\n      if(\n        $target[$sourcePropKey] !== null &&\n        typeof $sourcePropValue === 'object'\n      ) {\n        let targetPropValue\n        if($target[$sourcePropKey] === undefined) {\n          $target[$sourcePropKey] = $sourcePropValue\n        }\n        else {\n          if(Array.isArray($sourcePropValue)) {\n            $target[$sourcePropKey] = $target[$sourcePropKey]\n              .concat(recursiveAssignConcat($sourcePropValue))\n          }\n          else {\n            $target[$sourcePropKey] = recursiveAssignConcat(\n              $target[$sourcePropKey], $sourcePropValue\n            )\n          }\n        }\n      }\n      // Type: Primitive\n      else {\n        $target[$sourcePropKey] = $sourcePropValue\n      }\n    }\n  }\n  return $target\n}\nexport default recursiveAssignConcat","const typeOf = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase()\n\nexport default typeOf","function handleNoCommaBraces(span) {\n    if (span.length < 3) {\n        return \"{\" + span + \"}\";\n    }\n    var separatorI = -1;\n    for (var i = 2; i < span.length; i++) {\n        if (span[i] === '.' && span[i - 1] === '.' && (i < 2 || span[i - 2] !== '\\\\')) {\n            if (separatorI > -1) {\n                return \"{\" + span + \"}\";\n            }\n            separatorI = i - 1;\n        }\n    }\n    if (separatorI > -1) {\n        var rangeStart = span.substr(0, separatorI);\n        var rangeEnd = span.substr(separatorI + 2);\n        if (rangeStart.length > 0 && rangeEnd.length > 0) {\n            return \"[\" + span.substr(0, separatorI) + \"-\" + span.substr(separatorI + 2) + \"]\";\n        }\n    }\n    return \"{\" + span + \"}\";\n}\nfunction expand(pattern) {\n    if (typeof pattern !== 'string') {\n        throw new TypeError(\"A pattern must be a string, but \" + typeof pattern + \" given\");\n    }\n    var scanning = false;\n    var openingBraces = 0;\n    var closingBraces = 0;\n    var handledUntil = -1;\n    var results = [''];\n    var alternatives = [];\n    var span;\n    for (var i = 0; i < pattern.length; i++) {\n        var char = pattern[i];\n        if (char === '\\\\') {\n            i++;\n            continue;\n        }\n        if (char === '{') {\n            if (scanning) {\n                openingBraces++;\n            }\n            else if (i > handledUntil && !openingBraces) {\n                span = pattern.substring(handledUntil + 1, i);\n                for (var j = 0; j < results.length; j++) {\n                    results[j] += span;\n                }\n                alternatives = [];\n                handledUntil = i;\n                scanning = true;\n                openingBraces++;\n            }\n            else {\n                openingBraces--;\n            }\n        }\n        else if (char === '}') {\n            if (scanning) {\n                closingBraces++;\n            }\n            else if (closingBraces === 1) {\n                span = pattern.substring(handledUntil + 1, i);\n                if (alternatives.length > 0) {\n                    var newResults = [];\n                    alternatives.push(expand(span));\n                    for (var j = 0; j < results.length; j++) {\n                        for (var k = 0; k < alternatives.length; k++) {\n                            for (var l = 0; l < alternatives[k].length; l++) {\n                                newResults.push(results[j] + alternatives[k][l]);\n                            }\n                        }\n                    }\n                    results = newResults;\n                }\n                else {\n                    span = handleNoCommaBraces(span);\n                    for (var j = 0; j < results.length; j++) {\n                        results[j] += span;\n                    }\n                }\n                handledUntil = i;\n                closingBraces--;\n            }\n            else {\n                closingBraces--;\n            }\n        }\n        else if (!scanning && char === ',' && closingBraces - openingBraces === 1) {\n            span = pattern.substring(handledUntil + 1, i);\n            alternatives.push(expand(span));\n            handledUntil = i;\n        }\n        if (scanning && (closingBraces === openingBraces || i === pattern.length - 1)) {\n            scanning = false;\n            i = handledUntil - 1;\n        }\n    }\n    if (handledUntil === -1) {\n        return [pattern];\n    }\n    var unhandledFrom = pattern[handledUntil] === '{' ? handledUntil : handledUntil + 1;\n    if (unhandledFrom < pattern.length) {\n        span = pattern.substr(unhandledFrom);\n        for (var j = 0; j < results.length; j++) {\n            results[j] += span;\n        }\n    }\n    return results;\n}\n\nfunction negate(pattern, options) {\n    var supportNegation = options['!'] !== false;\n    var supportParens = options['()'] !== false;\n    var isNegated = false;\n    var i;\n    if (supportNegation) {\n        for (i = 0; i < pattern.length && pattern[i] === '!'; i++) {\n            if (supportParens && pattern[i + 1] === '(') {\n                i--;\n                break;\n            }\n            isNegated = !isNegated;\n        }\n        if (i > 0) {\n            pattern = pattern.substr(i);\n        }\n    }\n    return { pattern: pattern, isNegated: isNegated };\n}\n\nfunction escapeRegExpChar(char) { if (char === '-' ||\n    char === '^' ||\n    char === '$' ||\n    char === '+' ||\n    char === '.' ||\n    char === '(' ||\n    char === ')' ||\n    char === '|' ||\n    char === '[' ||\n    char === ']' ||\n    char === '{' ||\n    char === '}' ||\n    char === '*' ||\n    char === '?' ||\n    char === '\\\\') {\n    return \"\\\\\" + char;\n}\nelse {\n    return char;\n} }\nfunction escapeRegExpString(str) {\n    var result = '';\n    for (var i = 0; i < str.length; i++) {\n        result += escapeRegExpChar(str[i]);\n    }\n    return result;\n}\n\nfunction Pattern(source, options, excludeDot) {\n    var separator = typeof options.separator === 'undefined' ? true : options.separator;\n    var separatorSplitter = '';\n    var separatorMatcher = '';\n    var wildcard = '.';\n    if (separator === true) {\n        separatorSplitter = '/';\n        separatorMatcher = '[/\\\\\\\\]';\n        wildcard = '[^/\\\\\\\\]';\n    }\n    else if (separator) {\n        separatorSplitter = separator;\n        separatorMatcher = escapeRegExpString(separatorSplitter);\n        if (separatorMatcher.length > 1) {\n            separatorMatcher = \"(?:\" + separatorMatcher + \")\";\n            wildcard = \"((?!\" + separatorMatcher + \").)\";\n        }\n        else {\n            wildcard = \"[^\" + separatorMatcher + \"]\";\n        }\n    }\n    else {\n        wildcard = '.';\n    }\n    var requiredSeparator = separator ? separatorMatcher + \"+?\" : '';\n    var optionalSeparator = separator ? separatorMatcher + \"*?\" : '';\n    var segments = separator ? source.split(separatorSplitter) : [source];\n    var support = {\n        qMark: options['?'] !== false,\n        star: options['*'] !== false,\n        globstar: separator && options['**'] !== false,\n        brackets: options['[]'] !== false,\n        extglobs: options['()'] !== false,\n        excludeDot: excludeDot && options.excludeDot !== false,\n    };\n    return {\n        source: source,\n        segments: segments,\n        options: options,\n        separator: separator,\n        separatorSplitter: separatorSplitter,\n        separatorMatcher: separatorMatcher,\n        optionalSeparator: optionalSeparator,\n        requiredSeparator: requiredSeparator,\n        wildcard: wildcard,\n        support: support,\n    };\n}\nfunction Segment(source, pattern, isFirst, isLast) { return {\n    source: source,\n    isFirst: isFirst,\n    isLast: isLast,\n    end: source.length - 1,\n}; }\nfunction Result() {\nreturn {\n    match: '',\n    unmatch: '',\n    useUnmatch: false,\n}; }\nfunction State(pattern, segment, result) { return {\n    pattern: pattern,\n    segment: segment,\n    result: result,\n    openingBracket: segment.end + 1,\n    closingBracket: -1,\n    openingParens: 0,\n    closingParens: 0,\n    parensHandledUntil: -1,\n    extglobModifiers: [],\n    scanningForParens: false,\n    escapeChar: false,\n    addToMatch: true,\n    addToUnmatch: pattern.support.extglobs,\n    dotHandled: false,\n    i: -1,\n    char: '',\n    nextChar: '',\n}; }\n\nvar EXCLUDE_DOT_PATTERN = '(?!\\\\.)';\nfunction add(state, addition, excludeDot) {\n    if (state.addToUnmatch) {\n        state.result.unmatch += addition;\n    }\n    if (state.addToMatch) {\n        if (excludeDot && !state.dotHandled) {\n            addition = EXCLUDE_DOT_PATTERN + addition;\n        }\n        state.dotHandled = true;\n        state.result.match += addition;\n    }\n    return state.result;\n}\nfunction convertSegment(pattern, segment, result) {\n    var support = pattern.support;\n    var state = State(pattern, segment, result);\n    var separatorMatcher = segment.isLast\n        ? pattern.optionalSeparator\n        : pattern.requiredSeparator;\n    if (!support.excludeDot) {\n        state.dotHandled = true;\n    }\n    if (segment.end === -1) {\n        return segment.isLast && !segment.isFirst ? result : add(state, separatorMatcher);\n    }\n    if (support.globstar && segment.source === '**') {\n        var prefix = !state.dotHandled ? EXCLUDE_DOT_PATTERN : '';\n        var globstarSegment = prefix + pattern.wildcard + \"*?\" + separatorMatcher;\n        return add(state, \"(?:\" + globstarSegment + \")*?\");\n    }\n    while (++state.i <= segment.end) {\n        state.char = state.segment.source[state.i];\n        state.nextChar = state.i < segment.end ? segment.source[state.i + 1] : '';\n        if (state.char === '\\\\') {\n            if (state.i < state.segment.end) {\n                state.escapeChar = true;\n                continue;\n            }\n            else {\n                state.char = '';\n            }\n        }\n        var pattern = state.pattern, segment = state.segment, char = state.char, i = state.i;\n        if (pattern.support.brackets && !state.scanningForParens) {\n            if (i > state.openingBracket && i <= state.closingBracket) {\n                if (state.escapeChar) {\n                    add(state, escapeRegExpChar(char));\n                }\n                else if (i === state.closingBracket) {\n                    add(state, ']');\n                    state.openingBracket = segment.source.length;\n                }\n                else if (char === '-' && i === state.closingBracket - 1) {\n                    add(state, '\\\\-');\n                }\n                else if (char === '!' && i === state.openingBracket + 1) {\n                    add(state, '^');\n                }\n                else if (char === ']') {\n                    add(state, '\\\\]');\n                }\n                else {\n                    add(state, char);\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (i > state.openingBracket) {\n                if (char === ']' &&\n                    !state.escapeChar &&\n                    i > state.openingBracket + 1 &&\n                    i > state.closingBracket) {\n                    state.closingBracket = i;\n                    state.i = state.openingBracket;\n                    if (pattern.separator) {\n                        add(state, \"(?!\" + pattern.separatorMatcher + \")[\", true);\n                    }\n                    else {\n                        add(state, '[', true);\n                    }\n                }\n                else if (i === segment.end) {\n                    add(state, '\\\\[');\n                    state.i = state.openingBracket;\n                    state.openingBracket = segment.source.length;\n                    state.closingBracket = segment.source.length;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (char === '[' &&\n                !state.escapeChar &&\n                i > state.closingBracket &&\n                i < segment.end) {\n                state.openingBracket = i;\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        if (state.pattern.support.extglobs) {\n            var extglobModifiers = state.extglobModifiers, char = state.char, nextChar = state.nextChar, i = state.i;\n            if (nextChar === '(' &&\n                !state.escapeChar &&\n                (char === '@' || char === '?' || char === '*' || char === '+' || char === '!')) {\n                if (state.scanningForParens) {\n                    state.openingParens++;\n                }\n                else if (i > state.parensHandledUntil && !state.closingParens) {\n                    state.parensHandledUntil = i;\n                    state.scanningForParens = true;\n                    state.openingParens++;\n                }\n                else if (state.closingParens >= state.openingParens) {\n                    if (char === '!') {\n                        state.addToMatch = true;\n                        state.addToUnmatch = false;\n                        add(state, state.pattern.wildcard + \"*?\", true);\n                        state.addToMatch = false;\n                        state.addToUnmatch = true;\n                        state.result.useUnmatch = true;\n                    }\n                    extglobModifiers.push(char);\n                    add(state, '(?:', true);\n                    state.openingParens--;\n                    state.i++;\n                    continue;\n                }\n                else {\n                    state.openingParens--;\n                }\n            }\n            else if (char === ')' && !state.escapeChar) {\n                if (state.scanningForParens) {\n                    state.closingParens++;\n                }\n                else if (extglobModifiers.length) {\n                    var modifier_1 = extglobModifiers.pop();\n                    if (modifier_1 === '!' && extglobModifiers.indexOf('!') !== -1) {\n                        throw new Error(\"Nested negated extglobs aren't supported\");\n                    }\n                    modifier_1 = modifier_1 === '!' || modifier_1 === '@' ? '' : modifier_1;\n                    add(state, \")\" + modifier_1);\n                    state.addToMatch = true;\n                    state.addToUnmatch = true;\n                    state.closingParens--;\n                    continue;\n                }\n            }\n            else if (char === '|' && state.closingParens &&\n                !state.scanningForParens &&\n                !state.escapeChar) {\n                add(state, '|');\n                continue;\n            }\n            if (state.scanningForParens) {\n                if (state.closingParens === state.openingParens || i === state.segment.end) {\n                    state.scanningForParens = false;\n                    state.i = state.parensHandledUntil - 1;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        var pattern = state.pattern;\n        var support = pattern.support;\n        if (!state.escapeChar && support.star && state.char === '*') {\n            if (state.i === state.segment.end || state.nextChar !== '*') {\n                add(state, pattern.wildcard + \"*?\", true);\n            }\n        }\n        else if (!state.escapeChar && support.qMark && state.char === '?') {\n            add(state, pattern.wildcard, true);\n        }\n        else {\n            add(state, escapeRegExpChar(state.char));\n        }\n        state.escapeChar = false;\n    }\n    return add(state, separatorMatcher);\n}\nfunction convert(source, options, excludeDot) {\n    var pattern = Pattern(source, options, excludeDot);\n    var result = Result();\n    var segments = pattern.segments;\n    for (var i = 0; i < segments.length; i++) {\n        var segment = Segment(segments[i], pattern, i === 0, i === segments.length - 1);\n        convertSegment(pattern, segment, result);\n    }\n    if (result.useUnmatch) {\n        return \"(?!^\" + result.unmatch + \"$)\" + result.match;\n    }\n    else {\n        return result.match;\n    }\n}\n\nfunction flatMap(array, predicate) {\n    var results = [];\n    for (var i = 0; i < array.length; i++) {\n        var mappedValue = predicate(array[i]);\n        for (var j = 0; j < mappedValue.length; j++) {\n            results.push(mappedValue[j]);\n        }\n    }\n    return results;\n}\nfunction compile(patterns, options) {\n    patterns = Array.isArray(patterns) ? patterns : [patterns];\n    if (options['{}'] !== false) {\n        patterns = flatMap(patterns, expand);\n    }\n    var positiveResults = [];\n    var negativeResults = [];\n    var result = '';\n    for (var i = 0; i < patterns.length; i++) {\n        var negatedPattern = negate(patterns[i], options);\n        var convertedPattern = convert(negatedPattern.pattern, options, !negatedPattern.isNegated);\n        if (negatedPattern.isNegated) {\n            negativeResults.push(convertedPattern);\n        }\n        else {\n            positiveResults.push(convertedPattern);\n        }\n    }\n    if (negativeResults.length) {\n        result = \"(?!(?:\" + negativeResults.join('|') + \")$)\";\n    }\n    if (positiveResults.length > 1) {\n        result += \"(?:\" + positiveResults.join('|') + \")\";\n    }\n    else if (positiveResults.length === 1) {\n        result += positiveResults[0];\n    }\n    else if (result.length) {\n        result += convert('**', options, true);\n    }\n    return \"^\" + result + \"$\";\n}\nfunction isMatch(regexp, sample) { if (typeof sample !== 'string') {\n    throw new TypeError(\"Sample must be a string, but \" + typeof sample + \" given\");\n} return regexp.test(sample); }\n/**\n * Compiles one or more glob patterns into a RegExp and returns an isMatch function.\n * The isMatch function takes a sample string as its only argument and returns true\n * if the string matches the pattern(s).\n *\n * ```js\n * outmatch('src/*.js')('src/index.js') //=> true\n * ```\n *\n * ```js\n * const isMatch = outmatch('*.example.com', '.')\n * isMatch('foo.example.com') //=> true\n * isMatch('foo.bar.com') //=> false\n * ```\n */\nfunction outmatch(pattern, options) {\n    if (typeof pattern !== 'string' && !Array.isArray(pattern)) {\n        throw new TypeError(\"The first argument must be a single pattern string or an array of patterns, but \" + typeof pattern + \" given\");\n    }\n    if (typeof options === 'string' || typeof options === 'boolean') {\n        options = { separator: options };\n    }\n    if (arguments.length === 2 &&\n        !(typeof options === 'undefined' ||\n            (typeof options === 'object' && options !== null && !Array.isArray(options)))) {\n        throw new TypeError(\"The second argument must be an options object or a string/boolean separator, but \" + typeof options + \" given\");\n    }\n    options = options || {};\n    if (options.separator === '\\\\') {\n        throw new Error('\\\\ is not a valid separator');\n    }\n    var regexpPattern = compile(pattern, options);\n    var regexp = new RegExp(regexpPattern, options.flags);\n    var fn = isMatch.bind(null, regexp);\n    fn.options = options;\n    fn.pattern = pattern;\n    fn.regexp = regexp;\n    return fn;\n}\n\nexport { outmatch as default };\n//# sourceMappingURL=index.es.mjs.map\n","import outmatch from 'outmatch'\nexport default class CoreEvent {\n  #settings\n  #enable = false\n  #_boundListener\n  #_targets = []\n  constructor($settings) { \n    this.#settings = $settings\n    this.enable = this.#settings.enable\n  }\n  get type() { return this.#settings.type }\n  get path() { return this.#settings.path }\n  get #targets() {\n    const pretargets = this.#_targets\n    let propertyDirectory = [this.path].concat(this.#context.propertyDirectory)\n    const targetPaths = []\n    const targets = []\n    const propertyPathMatcher = outmatch(this.path, {\n      separator: '.',\n    })\n    iteratePropertyPaths: \n    for(const $propertyPath of propertyDirectory) {\n      const propertyPathMatch = propertyPathMatcher($propertyPath)\n      if(propertyPathMatch === true) { targetPaths.push($propertyPath) }\n    }\n    iterateTargetPaths: \n    for(const $targetPath of targetPaths) {\n      const pretargetElement = pretargets.find(\n        ($pretarget) => $pretarget?.path === $targetPath\n      )\n      let target = this.#context\n      let targetElement\n      const pathKeys = $targetPath.split('.')\n      let pathKeysIndex = 0\n      iterateTargetPathKeys: \n      while(pathKeysIndex < pathKeys.length) {\n        let pathKey = pathKeys[pathKeysIndex]\n        if(pathKeysIndex === 0 && pathKey === ':scope') {\n          break iterateTargetPathKeys\n        }\n        iterateTargetAccessors: \n        for(const $targetAccessor of this.#settings.target.accessors) {\n          if(target === undefined) { break iterateTargetAccessors }\n          if($targetAccessor === '[]') {\n            target = target[pathKey]\n          }\n          else if($targetAccessor === 'get') {\n            target = target?.get(pathKey)\n          }\n          if(target !== undefined) { break iterateTargetAccessors }\n        }\n        pathKeysIndex++\n      }\n      if(target !== undefined) {\n        if(target === pretargetElement?.target) {\n          targetElement = pretargetElement\n        }\n        else {\n          targetElement = {\n            path: $targetPath,\n            target: target,\n            enable: false,\n          }\n        }\n      }\n      if(targetElement !== undefined) { targets.push(targetElement) }\n    }\n    this.#_targets = targets\n    return this.#_targets\n  }\n  get listener() { return this.#settings.listener }\n  get options() { return this.#settings.options }\n  get enable() { return this.#enable }\n  set enable($enable) {\n    const targets = this.#targets\n    if(this.#targets.length === 0) { return }\n    const eventAbility = (\n      $enable === true\n    ) ? this.#settings.target.assign\n      : this.#settings.target.deassign\n    iterateTargets: \n    for(const targetElement of targets) {\n      const { path, target, enable } = targetElement\n      if(enable === eventAbility) { continue iterateTargets }\n      try {\n        target[eventAbility](this.type, this.#boundListener, this.options)\n        targetElement.enable = eventAbility\n      } catch($err) { console.error($err) }\n    }\n    this.#enable = $enable\n  }\n  get #context() { return this.#settings.context }\n  get #boundListener() {\n    if(this.#_boundListener !== undefined) { return this.#_boundListener }\n    this.#_boundListener = this.#settings.listener.bind(this.#context)\n    return this.#_boundListener\n  }\n}","export default {\n  events: []\n}","export default {\n  enableEvents: false,\n  propertyDirectory: {\n    maxDepth: 10,\n  }\n}","import { expandEvents, recursiveAssign, pathDirectory } from '../coutil/index.js'\nimport CoreEvent from './event/index.js'\nimport Settings from './settings/index.js' \nimport Options from './options/index.js' \nexport default class Core extends EventTarget {\n  #settings\n  #options\n  #_events\n  constructor($settings = {}, $options = {}) {\n    super()\n    this.#settings = Object.assign({}, Settings, $settings)\n    this.#options = recursiveAssign(structuredClone(Options), $options)\n    this.addEvents(this.settings.events)\n    if(this.options.enableEvents) this.enableEvents(this.options.enableEvents) \n  }\n  get propertyDirectory() { return pathDirectory(this, this.options.propertyDirectory) }\n  get settings() { return this.#settings }\n  get options() { return this.#options }\n  get #events() {\n    if(this.#_events !== undefined) return this.#_events\n    this.#_events = []\n    return this.#_events\n  }\n  getEvents() {\n    const getEvents = []\n    const events = this.#events\n    const $events = [].concat(arguments[0])\n    iterateEvents: \n    for(const $event of $events) {\n      const { type, path, listener, enable } = $event\n      const eventFilterProperties = []\n      if(type !== undefined) { eventFilterProperties.push(['type', type]) }\n      if(path !== undefined) { eventFilterProperties.push(['path', path]) }\n      if(listener !== undefined) { eventFilterProperties.push(['listener', listener]) }\n      if(enable !== undefined) { eventFilterProperties.push(['enable', enable]) }\n      getEvents.push(\n        ...events.filter(($existingEvent) => {\n          return eventFilterProperties.reduce(($match, [\n            $eventFilterPropertyKey, $eventFilterPropertyValue\n          ]) => {\n            const match = (\n              $existingEvent[$eventFilterPropertyKey] === $eventFilterPropertyValue\n            ) ? true : false\n            if($match !== false) { $match = match }\n            return $match\n          }, undefined)\n        })\n      )\n    }\n    return getEvents\n  }\n  addEvents() {\n    if(arguments[0] === undefined) { return this }\n    const $events = expandEvents(arguments[0])\n    const events = this.#events\n    iterateEvents: \n    for(let $event of $events) {\n      $event = recursiveAssign(\n        {\n          target: {\n            assign: 'addEventListener',\n            deassign: 'removeEventListener',\n            accessors: ['[]', 'get']\n          },\n          context: this\n        }, \n        $event,\n      )\n      const coreEvent = new CoreEvent($event)\n      events.push(coreEvent)\n    }\n    return this\n  }\n  removeEvents() {\n    let $events\n    if(arguments.length === 0) { $events = this.getEvents() }\n    else if(arguments.length === 1) {\n      $events = this.getEvents(arguments[0])\n    }\n    if($events.length === 0) return this\n    let eventsIndex = $events.length - 1\n    iterateEvents: \n    while(eventsIndex > -1) {\n      const event = $events[eventsIndex]\n      const removeEventIndex = this.#events.findIndex(\n        ($event) => $event === event\n      )\n      if(removeEventIndex !== -1) {\n        event.enable = false\n        this.#events.splice(eventsIndex, 1)\n      }\n      eventsIndex--\n    }\n    return this\n  }\n  enableEvents() {\n    let $events\n    if(\n      arguments.length === 0 ||\n      arguments[0] === true\n    ) { $events = this.#events }\n    else { $events = this.getEvents(arguments[0]) }\n    return this.#toggleEventAbility('Assign', $events)\n  }\n  disableEvents() {\n    let $events\n    if(arguments.length === 0) { $events = this.#events }\n    else { $events = this.getEvents(arguments[0]) }\n    return this.#toggleEventAbility('Deassign', $events)\n  }\n  reenableEvents() {\n    return this\n    .disableEvents(...arguments)\n    .enableEvents(...arguments)\n  }\n  #toggleEventAbility($eventListenerMethod, $events) {\n    let enability\n    if($eventListenerMethod === 'Assign') { enability = true }\n    else if($eventListenerMethod === 'Deassign') { enability = false }\n    else { return this }\n    iterateEvents: for(const $event of $events) { $event.enable = enability }\n    return this\n  }\n}"],"names":["expandEvents","$propEvents","propEvents","Array","isArray","undefined","$propEventSettings","$propEventListener","Object","entries","propEventSettings","split","path","type","listener","length","propEvent","enable","push","Options","depth","maxDepth","pathDirectory","$object","$options","target","options","assign","$key","$value","subtarget","$subtarget","join","recursiveAssign","$arguments","arguments","$target","shift","$sources","$source","$sourcePropKey","$sourcePropValue","recursiveAssignConcat","concat","$data","prototype","toString","call","slice","toLowerCase","handleNoCommaBraces","span","separatorI","i","rangeStart","substr","rangeEnd","expand","pattern","TypeError","scanning","openingBraces","closingBraces","handledUntil","results","alternatives","char","substring","j","newResults","k","l","unhandledFrom","negate","supportNegation","supportParens","isNegated","escapeRegExpChar","Pattern","source","excludeDot","separator","separatorSplitter","separatorMatcher","wildcard","str","result","escapeRegExpString","requiredSeparator","optionalSeparator","segments","support","qMark","star","globstar","brackets","extglobs","Segment","isFirst","isLast","end","EXCLUDE_DOT_PATTERN","add","state","addition","addToUnmatch","unmatch","addToMatch","dotHandled","match","convertSegment","segment","openingBracket","closingBracket","openingParens","closingParens","parensHandledUntil","extglobModifiers","scanningForParens","escapeChar","nextChar","State","modifier_1","pop","indexOf","Error","useUnmatch","convert","isMatch","regexp","sample","test","outmatch","regexpPattern","patterns","array","predicate","mappedValue","flatMap","positiveResults","negativeResults","negatedPattern","convertedPattern","compile","RegExp","flags","fn","bind","CoreEvent","settings","_boundListener","_targets","constructor","$settings","this","targets","pretargets","propertyDirectory","context","targetPaths","propertyPathMatcher","$propertyPath","$targetPath","pretargetElement","find","$pretarget","targetElement","pathKeys","pathKeysIndex","iterateTargetPathKeys","pathKey","iterateTargetAccessors","$targetAccessor","accessors","get","$enable","eventAbility","deassign","boundListener","$err","console","error","Settings","events","enableEvents","Core","EventTarget","_events","super","structuredClone","addEvents","getEvents","$events","$event","eventFilterProperties","filter","$existingEvent","reduce","$match","$eventFilterPropertyKey","$eventFilterPropertyValue","coreEvent","removeEvents","eventsIndex","event","findIndex","splice","toggleEventAbility","disableEvents","reenableEvents","$eventListenerMethod","enability"],"mappings":"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","x_google_ignoreList":[5]}