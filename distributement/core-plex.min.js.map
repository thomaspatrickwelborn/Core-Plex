{"version":3,"file":"core-plex.min.js","sources":["../../Recourse/distributement/recourse.js","../development/event-definition/index.js","../development/event-definition/settings/index.js","../development/index.js","../development/settings/index.js","../development/expand-events/index.js"],"sourcesContent":["function handleNoCommaBraces(span) {\n    if (span.length < 3) {\n        return \"{\" + span + \"}\";\n    }\n    var separatorI = -1;\n    for (var i = 2; i < span.length; i++) {\n        if (span[i] === '.' && span[i - 1] === '.' && (i < 2 || span[i - 2] !== '\\\\')) {\n            if (separatorI > -1) {\n                return \"{\" + span + \"}\";\n            }\n            separatorI = i - 1;\n        }\n    }\n    if (separatorI > -1) {\n        var rangeStart = span.substr(0, separatorI);\n        var rangeEnd = span.substr(separatorI + 2);\n        if (rangeStart.length > 0 && rangeEnd.length > 0) {\n            return \"[\" + span.substr(0, separatorI) + \"-\" + span.substr(separatorI + 2) + \"]\";\n        }\n    }\n    return \"{\" + span + \"}\";\n}\nfunction expand$1(pattern) {\n    if (typeof pattern !== 'string') {\n        throw new TypeError(\"A pattern must be a string, but \" + typeof pattern + \" given\");\n    }\n    var scanning = false;\n    var openingBraces = 0;\n    var closingBraces = 0;\n    var handledUntil = -1;\n    var results = [''];\n    var alternatives = [];\n    var span;\n    for (var i = 0; i < pattern.length; i++) {\n        var char = pattern[i];\n        if (char === '\\\\') {\n            i++;\n            continue;\n        }\n        if (char === '{') {\n            if (scanning) {\n                openingBraces++;\n            }\n            else if (i > handledUntil && !openingBraces) {\n                span = pattern.substring(handledUntil + 1, i);\n                for (var j = 0; j < results.length; j++) {\n                    results[j] += span;\n                }\n                alternatives = [];\n                handledUntil = i;\n                scanning = true;\n                openingBraces++;\n            }\n            else {\n                openingBraces--;\n            }\n        }\n        else if (char === '}') {\n            if (scanning) {\n                closingBraces++;\n            }\n            else if (closingBraces === 1) {\n                span = pattern.substring(handledUntil + 1, i);\n                if (alternatives.length > 0) {\n                    var newResults = [];\n                    alternatives.push(expand$1(span));\n                    for (var j = 0; j < results.length; j++) {\n                        for (var k = 0; k < alternatives.length; k++) {\n                            for (var l = 0; l < alternatives[k].length; l++) {\n                                newResults.push(results[j] + alternatives[k][l]);\n                            }\n                        }\n                    }\n                    results = newResults;\n                }\n                else {\n                    span = handleNoCommaBraces(span);\n                    for (var j = 0; j < results.length; j++) {\n                        results[j] += span;\n                    }\n                }\n                handledUntil = i;\n                closingBraces--;\n            }\n            else {\n                closingBraces--;\n            }\n        }\n        else if (!scanning && char === ',' && closingBraces - openingBraces === 1) {\n            span = pattern.substring(handledUntil + 1, i);\n            alternatives.push(expand$1(span));\n            handledUntil = i;\n        }\n        if (scanning && (closingBraces === openingBraces || i === pattern.length - 1)) {\n            scanning = false;\n            i = handledUntil - 1;\n        }\n    }\n    if (handledUntil === -1) {\n        return [pattern];\n    }\n    var unhandledFrom = pattern[handledUntil] === '{' ? handledUntil : handledUntil + 1;\n    if (unhandledFrom < pattern.length) {\n        span = pattern.substr(unhandledFrom);\n        for (var j = 0; j < results.length; j++) {\n            results[j] += span;\n        }\n    }\n    return results;\n}\n\nfunction negate(pattern, options) {\n    var supportNegation = options['!'] !== false;\n    var supportParens = options['()'] !== false;\n    var isNegated = false;\n    var i;\n    if (supportNegation) {\n        for (i = 0; i < pattern.length && pattern[i] === '!'; i++) {\n            if (supportParens && pattern[i + 1] === '(') {\n                i--;\n                break;\n            }\n            isNegated = !isNegated;\n        }\n        if (i > 0) {\n            pattern = pattern.substr(i);\n        }\n    }\n    return { pattern: pattern, isNegated: isNegated };\n}\n\nfunction escapeRegExpChar(char) { if (char === '-' ||\n    char === '^' ||\n    char === '$' ||\n    char === '+' ||\n    char === '.' ||\n    char === '(' ||\n    char === ')' ||\n    char === '|' ||\n    char === '[' ||\n    char === ']' ||\n    char === '{' ||\n    char === '}' ||\n    char === '*' ||\n    char === '?' ||\n    char === '\\\\') {\n    return \"\\\\\" + char;\n}\nelse {\n    return char;\n} }\nfunction escapeRegExpString(str) {\n    var result = '';\n    for (var i = 0; i < str.length; i++) {\n        result += escapeRegExpChar(str[i]);\n    }\n    return result;\n}\n\nfunction Pattern(source, options, excludeDot) {\n    var separator = typeof options.separator === 'undefined' ? true : options.separator;\n    var separatorSplitter = '';\n    var separatorMatcher = '';\n    var wildcard = '.';\n    if (separator === true) {\n        separatorSplitter = '/';\n        separatorMatcher = '[/\\\\\\\\]';\n        wildcard = '[^/\\\\\\\\]';\n    }\n    else if (separator) {\n        separatorSplitter = separator;\n        separatorMatcher = escapeRegExpString(separatorSplitter);\n        if (separatorMatcher.length > 1) {\n            separatorMatcher = \"(?:\" + separatorMatcher + \")\";\n            wildcard = \"((?!\" + separatorMatcher + \").)\";\n        }\n        else {\n            wildcard = \"[^\" + separatorMatcher + \"]\";\n        }\n    }\n    else {\n        wildcard = '.';\n    }\n    var requiredSeparator = separator ? separatorMatcher + \"+?\" : '';\n    var optionalSeparator = separator ? separatorMatcher + \"*?\" : '';\n    var segments = separator ? source.split(separatorSplitter) : [source];\n    var support = {\n        qMark: options['?'] !== false,\n        star: options['*'] !== false,\n        globstar: separator && options['**'] !== false,\n        brackets: options['[]'] !== false,\n        extglobs: options['()'] !== false,\n        excludeDot: excludeDot && options.excludeDot !== false,\n    };\n    return {\n        source: source,\n        segments: segments,\n        options: options,\n        separator: separator,\n        separatorSplitter: separatorSplitter,\n        separatorMatcher: separatorMatcher,\n        optionalSeparator: optionalSeparator,\n        requiredSeparator: requiredSeparator,\n        wildcard: wildcard,\n        support: support,\n    };\n}\nfunction Segment(source, pattern, isFirst, isLast) { return {\n    source: source,\n    isFirst: isFirst,\n    isLast: isLast,\n    end: source.length - 1,\n}; }\nfunction Result() {\nreturn {\n    match: '',\n    unmatch: '',\n    useUnmatch: false,\n}; }\nfunction State(pattern, segment, result) { return {\n    pattern: pattern,\n    segment: segment,\n    result: result,\n    openingBracket: segment.end + 1,\n    closingBracket: -1,\n    openingParens: 0,\n    closingParens: 0,\n    parensHandledUntil: -1,\n    extglobModifiers: [],\n    scanningForParens: false,\n    escapeChar: false,\n    addToMatch: true,\n    addToUnmatch: pattern.support.extglobs,\n    dotHandled: false,\n    i: -1,\n    char: '',\n    nextChar: '',\n}; }\n\nvar EXCLUDE_DOT_PATTERN = '(?!\\\\.)';\nfunction add(state, addition, excludeDot) {\n    if (state.addToUnmatch) {\n        state.result.unmatch += addition;\n    }\n    if (state.addToMatch) {\n        if (excludeDot && !state.dotHandled) {\n            addition = EXCLUDE_DOT_PATTERN + addition;\n        }\n        state.dotHandled = true;\n        state.result.match += addition;\n    }\n    return state.result;\n}\nfunction convertSegment(pattern, segment, result) {\n    var support = pattern.support;\n    var state = State(pattern, segment, result);\n    var separatorMatcher = segment.isLast\n        ? pattern.optionalSeparator\n        : pattern.requiredSeparator;\n    if (!support.excludeDot) {\n        state.dotHandled = true;\n    }\n    if (segment.end === -1) {\n        return segment.isLast && !segment.isFirst ? result : add(state, separatorMatcher);\n    }\n    if (support.globstar && segment.source === '**') {\n        var prefix = !state.dotHandled ? EXCLUDE_DOT_PATTERN : '';\n        var globstarSegment = prefix + pattern.wildcard + \"*?\" + separatorMatcher;\n        return add(state, \"(?:\" + globstarSegment + \")*?\");\n    }\n    while (++state.i <= segment.end) {\n        state.char = state.segment.source[state.i];\n        state.nextChar = state.i < segment.end ? segment.source[state.i + 1] : '';\n        if (state.char === '\\\\') {\n            if (state.i < state.segment.end) {\n                state.escapeChar = true;\n                continue;\n            }\n            else {\n                state.char = '';\n            }\n        }\n        var pattern = state.pattern, segment = state.segment, char = state.char, i = state.i;\n        if (pattern.support.brackets && !state.scanningForParens) {\n            if (i > state.openingBracket && i <= state.closingBracket) {\n                if (state.escapeChar) {\n                    add(state, escapeRegExpChar(char));\n                }\n                else if (i === state.closingBracket) {\n                    add(state, ']');\n                    state.openingBracket = segment.source.length;\n                }\n                else if (char === '-' && i === state.closingBracket - 1) {\n                    add(state, '\\\\-');\n                }\n                else if (char === '!' && i === state.openingBracket + 1) {\n                    add(state, '^');\n                }\n                else if (char === ']') {\n                    add(state, '\\\\]');\n                }\n                else {\n                    add(state, char);\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (i > state.openingBracket) {\n                if (char === ']' &&\n                    !state.escapeChar &&\n                    i > state.openingBracket + 1 &&\n                    i > state.closingBracket) {\n                    state.closingBracket = i;\n                    state.i = state.openingBracket;\n                    if (pattern.separator) {\n                        add(state, \"(?!\" + pattern.separatorMatcher + \")[\", true);\n                    }\n                    else {\n                        add(state, '[', true);\n                    }\n                }\n                else if (i === segment.end) {\n                    add(state, '\\\\[');\n                    state.i = state.openingBracket;\n                    state.openingBracket = segment.source.length;\n                    state.closingBracket = segment.source.length;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (char === '[' &&\n                !state.escapeChar &&\n                i > state.closingBracket &&\n                i < segment.end) {\n                state.openingBracket = i;\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        if (state.pattern.support.extglobs) {\n            var extglobModifiers = state.extglobModifiers, char = state.char, nextChar = state.nextChar, i = state.i;\n            if (nextChar === '(' &&\n                !state.escapeChar &&\n                (char === '@' || char === '?' || char === '*' || char === '+' || char === '!')) {\n                if (state.scanningForParens) {\n                    state.openingParens++;\n                }\n                else if (i > state.parensHandledUntil && !state.closingParens) {\n                    state.parensHandledUntil = i;\n                    state.scanningForParens = true;\n                    state.openingParens++;\n                }\n                else if (state.closingParens >= state.openingParens) {\n                    if (char === '!') {\n                        state.addToMatch = true;\n                        state.addToUnmatch = false;\n                        add(state, state.pattern.wildcard + \"*?\", true);\n                        state.addToMatch = false;\n                        state.addToUnmatch = true;\n                        state.result.useUnmatch = true;\n                    }\n                    extglobModifiers.push(char);\n                    add(state, '(?:', true);\n                    state.openingParens--;\n                    state.i++;\n                    continue;\n                }\n                else {\n                    state.openingParens--;\n                }\n            }\n            else if (char === ')' && !state.escapeChar) {\n                if (state.scanningForParens) {\n                    state.closingParens++;\n                }\n                else if (extglobModifiers.length) {\n                    var modifier_1 = extglobModifiers.pop();\n                    if (modifier_1 === '!' && extglobModifiers.indexOf('!') !== -1) {\n                        throw new Error(\"Nested negated extglobs aren't supported\");\n                    }\n                    modifier_1 = modifier_1 === '!' || modifier_1 === '@' ? '' : modifier_1;\n                    add(state, \")\" + modifier_1);\n                    state.addToMatch = true;\n                    state.addToUnmatch = true;\n                    state.closingParens--;\n                    continue;\n                }\n            }\n            else if (char === '|' && state.closingParens &&\n                !state.scanningForParens &&\n                !state.escapeChar) {\n                add(state, '|');\n                continue;\n            }\n            if (state.scanningForParens) {\n                if (state.closingParens === state.openingParens || i === state.segment.end) {\n                    state.scanningForParens = false;\n                    state.i = state.parensHandledUntil - 1;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        var pattern = state.pattern;\n        var support = pattern.support;\n        if (!state.escapeChar && support.star && state.char === '*') {\n            if (state.i === state.segment.end || state.nextChar !== '*') {\n                add(state, pattern.wildcard + \"*?\", true);\n            }\n        }\n        else if (!state.escapeChar && support.qMark && state.char === '?') {\n            add(state, pattern.wildcard, true);\n        }\n        else {\n            add(state, escapeRegExpChar(state.char));\n        }\n        state.escapeChar = false;\n    }\n    return add(state, separatorMatcher);\n}\nfunction convert(source, options, excludeDot) {\n    var pattern = Pattern(source, options, excludeDot);\n    var result = Result();\n    var segments = pattern.segments;\n    for (var i = 0; i < segments.length; i++) {\n        var segment = Segment(segments[i], pattern, i === 0, i === segments.length - 1);\n        convertSegment(pattern, segment, result);\n    }\n    if (result.useUnmatch) {\n        return \"(?!^\" + result.unmatch + \"$)\" + result.match;\n    }\n    else {\n        return result.match;\n    }\n}\n\nfunction flatMap(array, predicate) {\n    var results = [];\n    for (var i = 0; i < array.length; i++) {\n        var mappedValue = predicate(array[i]);\n        for (var j = 0; j < mappedValue.length; j++) {\n            results.push(mappedValue[j]);\n        }\n    }\n    return results;\n}\nfunction compile(patterns, options) {\n    patterns = Array.isArray(patterns) ? patterns : [patterns];\n    if (options['{}'] !== false) {\n        patterns = flatMap(patterns, expand$1);\n    }\n    var positiveResults = [];\n    var negativeResults = [];\n    var result = '';\n    for (var i = 0; i < patterns.length; i++) {\n        var negatedPattern = negate(patterns[i], options);\n        var convertedPattern = convert(negatedPattern.pattern, options, !negatedPattern.isNegated);\n        if (negatedPattern.isNegated) {\n            negativeResults.push(convertedPattern);\n        }\n        else {\n            positiveResults.push(convertedPattern);\n        }\n    }\n    if (negativeResults.length) {\n        result = \"(?!(?:\" + negativeResults.join('|') + \")$)\";\n    }\n    if (positiveResults.length > 1) {\n        result += \"(?:\" + positiveResults.join('|') + \")\";\n    }\n    else if (positiveResults.length === 1) {\n        result += positiveResults[0];\n    }\n    else if (result.length) {\n        result += convert('**', options, true);\n    }\n    return \"^\" + result + \"$\";\n}\nfunction isMatch(regexp, sample) { if (typeof sample !== 'string') {\n    throw new TypeError(\"Sample must be a string, but \" + typeof sample + \" given\");\n} return regexp.test(sample); }\n/**\n * Compiles one or more glob patterns into a RegExp and returns an isMatch function.\n * The isMatch function takes a sample string as its only argument and returns true\n * if the string matches the pattern(s).\n *\n * ```js\n * outmatch('src/*.js')('src/index.js') //=> true\n * ```\n *\n * ```js\n * const isMatch = outmatch('*.example.com', '.')\n * isMatch('foo.example.com') //=> true\n * isMatch('foo.bar.com') //=> false\n * ```\n */\nfunction outmatch(pattern, options) {\n    if (typeof pattern !== 'string' && !Array.isArray(pattern)) {\n        throw new TypeError(\"The first argument must be a single pattern string or an array of patterns, but \" + typeof pattern + \" given\");\n    }\n    if (typeof options === 'string' || typeof options === 'boolean') {\n        options = { separator: options };\n    }\n    if (arguments.length === 2 &&\n        !(typeof options === 'undefined' ||\n            (typeof options === 'object' && options !== null && !Array.isArray(options)))) {\n        throw new TypeError(\"The second argument must be an options object or a string/boolean separator, but \" + typeof options + \" given\");\n    }\n    options = options || {};\n    if (options.separator === '\\\\') {\n        throw new Error('\\\\ is not a valid separator');\n    }\n    var regexpPattern = compile(pattern, options);\n    var regexp = new RegExp(regexpPattern, options.flags);\n    var fn = isMatch.bind(null, regexp);\n    fn.options = options;\n    fn.pattern = pattern;\n    fn.regexp = regexp;\n    return fn;\n}\n\nfunction splitPath($path, $pathParseInteger) {\n  const subpathDelimiters = /([a-zA-Z_][a-zA-Z0-9_]*)|(\\d+)|\\[\"([^\"]*)\"\\]|\"([^\"]*)\"|\\./g;\n  const subpaths = [];\n  let match;\n  while((match = subpathDelimiters.exec($path)) !== null) {\n    if(match[1]) { subpaths.push(match[1]); }\n    else if(match[2]) {\n      if($pathParseInteger) { subpaths.push(parseInt(match[2], 10)); }\n      else { subpaths.push(match[2]); }\n    }\n    else if(match[3]) { subpaths.push(match[3]); }\n    else if(match[4]) { subpaths.push(match[4]); }\n  }\n  return subpaths\n}\n\nvar typeOf = ($operand) => Object\n  .prototype\n  .toString\n  .call($operand).slice(8, -1).toLowerCase();\n\nconst Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n};\nconst PrimitiveKeys = Object.keys(Primitives);\nconst PrimitiveValues = Object.values(Primitives);\nconst Objects = {\n  'object': Object,\n  'array': Array,\n  'eventTarget': EventTarget,\n  'map': Map,\n};\nconst ObjectKeys = Object.keys(Objects);\nconst ObjectValues = Object.values(Objects);\nconst Types = Object.assign({}, Primitives, Objects);\nconst TypeKeys = Object.keys(Types);\nconst TypeValues = Object.values(Types);\nconst TypeMethods = [\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n];\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ObjectKeys: ObjectKeys,\n    ObjectValues: ObjectValues,\n    Objects: Objects,\n    PrimitiveKeys: PrimitiveKeys,\n    PrimitiveValues: PrimitiveValues,\n    Primitives: Primitives,\n    TypeKeys: TypeKeys,\n    TypeMethods: TypeMethods,\n    TypeValues: TypeValues,\n    Types: Types\n});\n\n// Object Type Validator\nconst TypeValidator$1 = ($target) => (\n    !($target instanceof Map) &&\n    ['array', 'object'].includes(typeof $target)\n  );\n// Object Getter\nfunction Getter$1(...$arguments) {\n  if($arguments.length === 1) {\n    const [$target] = $arguments;\n    return $target\n  }\n  else {\n    const [$target, $property] = $arguments;\n    return $target[$property]\n  }\n}\n// Object Setter\nfunction Setter$1(...$arguments) {\n  if(['string', 'number'].includes(typeOf($arguments[1]))) {\n    const [$target, $property, $value] = $arguments;\n    $target[$property] = $value;\n    return $target[$property]\n  }\n  else {\n    const [$target, $source] = $arguments;\n    for(const $targetKey of Object.keys($target)) {\n      delete $target[$targetKey];\n    }\n    for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n      $target[$sourceKey] = $sourceValue;\n    }\n    return $target\n  }\n}\n// Object Deleter\nfunction Deleter$1(...$arguments) {\n  const [$target, $property] = $arguments;\n  if(['string', 'number'].includes(typeOf($property))) {\n    return delete $target[$property]\n  }\n  else {\n    for(const $targetKey of Object.keys($target)) {\n      delete $target[$targetKey];\n    }\n    return undefined\n  }\n}\n\n// Map Type Validator\nconst TypeValidator = ($target) => ($target instanceof Map);\n// Map Getter\nfunction Getter(...$arguments) {\n  if($arguments.length === 1) {\n    let [$receiver] = $arguments;\n    return $receiver\n  }\n  else {\n    let [$receiver, $property] = $arguments;\n    return $receiver.get($property)\n  }\n}\n// Map Setter\nfunction Setter(...$arguments) {\n  if($arguments.length === 2) {\n    let [$receiver, $source] = $arguments;\n    $receiver.clear();\n    for(const [$sourceKey, $sourceValue] of Object.entries(source)) {\n      $receiver.set($sourceKey, $sourceValue);\n    }\n    return $receiver\n  }\n  else {\n    let [$receiver, $property, $value] = $arguments;\n    $receiver.set($property, $value);\n    return $receiver.get($property)\n  }\n}\n// Map Deleter\nfunction Deleter(...$arguments) {\n  if($arguments.length === 2) {\n    let [$receiver, $property] = $arguments;\n    return $receiver.delete($property)\n  }\n  else {\n    let [$receiver] = $arguments;\n    return $receiver.clear()\n  } \n}\n\nconst Getters = {\n  Object: Getter$1, \n  Map: Getter, \n};\nconst Setters = {\n  Object: Setter$1, \n  Map: Setter, \n};\nconst Deleters = {\n  Object: Deleter$1, \n  Map: Deleter, \n};\nconst TypeValidators = {\n  Object: TypeValidator$1, \n  Map: TypeValidator, \n};\nclass Tensors extends EventTarget {\n  constructor($tensors, $typeValidators) {\n    super();\n    Object.defineProperties(this, {\n      'cess': { value: function(...$arguments) {\n        let tensorIndex = 0;\n        iterateTensors:\n        for(const $tensor of $tensors) {\n          if(tensorIndex >= $tensors.length) { break iterateTensors }\n          const typeValidator = $typeValidators[tensorIndex];\n          if(typeValidator($arguments[0])) {\n            return $tensor(...$arguments)\n          }\n          tensorIndex++;\n        }\n      } },\n    });\n  }\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Deleters: Deleters,\n    Getters: Getters,\n    Setters: Setters,\n    Tensors: Tensors,\n    TypeValidators: TypeValidators\n});\n\nconst Options$e = {\n  pathParseInteger: false,\n  getters: [Getters.Object, Getters.Map],\n  typeValidators: [TypeValidators.Object, TypeValidators.Map],\n  ancestors: [],\n  depth: 0, maxDepth: 10,\n  enumerable: true, nonenumerable: false,\n  recurse: true,\n};\nfunction entities($source, $type, $options = {}) {\n  typeOf($source);\n  const sourceEntities = [];\n  const options = Object.assign({}, Options$e, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  });\n  const { ancestors, maxDepth, enumerable, nonenumerable, recurse } = options;\n  if(options.depth >= maxDepth) { return }\n  if(!ancestors.includes($source)) { ancestors.unshift($source); }\n  options.depth++;\n  const getters = new Tensors(options.getters, options.typeValidators);\n  const source = getters.cess($source);\n  if(!source) { return sourceEntities }\n  const propertyDescriptorKeys = (typeOf(source) === 'map')\n    ? source.keys()\n    : Object.keys(source);\n  for(let $propertyKey of propertyDescriptorKeys) {\n    if(!isNaN($propertyKey) && options.pathParseInteger) {\n      $propertyKey = parseInt($propertyKey, 10);\n    }\n    const value = getters.cess($source, $propertyKey);\n    const propertyDescriptor = (typeOf($source) !== 'map')\n      ? Object.getOwnPropertyDescriptor($source, $propertyKey)\n      : { enumerable: true, value};\n    if(\n      (enumerable && propertyDescriptor.enumerable) ||\n      (nonenumerable && !propertyDescriptor.enumerable)\n    ) {\n      const $value = (\n        propertyDescriptor.get?.call\n      ) ? propertyDescriptor.get.call() : propertyDescriptor.value;\n      const typeOfValue = typeOf($value);\n      if(\n        recurse && \n        ObjectKeys.includes(typeOfValue) && \n        !ancestors.includes($value)\n      ) {\n        ancestors.unshift($value);\n        const subentities = entities($value, $type, options);\n        if(subentities.length) {\n          if($type === 'entries') { sourceEntities.push([$propertyKey, subentities]); }\n          else if($type === 'values') { sourceEntities.push(subentities); }\n          else if($type === 'keys') { sourceEntities.push($propertyKey, subentities); }\n        }\n        else {\n          if($type === 'entries') { sourceEntities.push([$propertyKey, $value]); }\n          else if($type === 'values') { sourceEntities.push($value); }\n          else if($type === 'keys') { sourceEntities.push($propertyKey); }\n        }\n      }\n      else {\n        if($type === 'entries') { sourceEntities.push([$propertyKey, $value]); }\n        else if($type === 'values') { sourceEntities.push($value); }\n        else if($type === 'keys') { sourceEntities.push($propertyKey); }\n      }\n    }\n  }\n  return sourceEntities\n}\n\nconst Options$d = {\n  depth: 0, \n  getters: [Getters.Object, Getters.Map],\n  typeValidators: [TypeValidators.Object, TypeValidators.Map],\n  maxDepth: 10,\n  values: false,\n  returnValue: 'receiver',\n};\nfunction compand($source, $options = {}) {\n  const compandEntries = [];\n  const options = Object.assign({}, Options$d, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  });\n  const { ancestors, values } = options;\n  options.depth++;\n  if(options.depth > options.maxDepth) { return compandEntries }\n  const source = new Tensors(options.getters, options.typeValidators).cess($source);\n  if(!ancestors.includes($source)) { ancestors.unshift($source); }\n  const sourceEntries = entities($source, 'entries', Object.assign({}, options, {\n    recurse: false\n  }));\n  for(const [$key, $value] of sourceEntries) {\n    if(!values) { compandEntries.push($key); }\n    else if(values) { compandEntries.push([$key, $value]); }\n    if(\n      typeof $value === 'object' &&\n      $value !== null &&\n      !Object.is($value, source) && \n      !ancestors.includes($value)\n    ) {\n      const subsources = compand($value, options);\n      if(!values) {\n        for(const $subsource of subsources) {\n          const path = [$key, $subsource].join('.');\n          compandEntries.push(path);\n        }\n      }\n      else if(values) {\n        for(const [$subsourceKey, $subsource] of subsources) {\n          const path = [$key, $subsourceKey].join('.');\n          compandEntries.push([path, $subsource]);\n        }\n      }\n    }\n  }\n  return compandEntries\n}\n\nconst Options$c = {\n  pathMatch: false,\n  pathMatchMaxResults: 1000,\n  pathParseInteger: false,\n  getters: [Getters.Object, Getters.Map],\n  typeValidators: [TypeValidators.Object, TypeValidators.Map],\n};\nfunction getProperty() {\n  const [$target, $path, $options] = [...arguments];\n  const options = Object.assign ({}, Options$c, $options);\n  const getters = new Tensors(options.getters, options.typeValidators);\n  if($path === undefined) { return getters.cess($target, options) }\n  const subpaths = splitPath($path, options.pathParseInteger);\n  if(!options.pathMatch) {\n    let subtarget = $target;\n    iterateSubpaths: \n    for(const $subpath of subpaths) {\n      try {\n        subtarget = getters.cess(subtarget, $subpath);\n        if(subtarget === undefined) { break iterateSubpaths } \n      }\n      catch($err) { break iterateSubpaths }\n    }\n    return subtarget\n  }\n  else {\n    const subtargets = [];\n    const compandEntries = compand($target, Object.assign({}, options, { values: true }));\n    const propertyPathMatcher = outmatch($path, { separator: '.' });\n    for(const [$propertyPath, $propertyValue] of compandEntries) {\n      const propertyPathMatch = propertyPathMatcher($propertyPath, );\n      if(propertyPathMatch === true) { subtargets.push([$propertyPath, $propertyValue]); }\n    }\n    return subtargets\n  }\n}\n\nconst Options$b = { strict: true };\nfunction isArrayLike($source, $options) {\n  const options = Object.assign({}, Options$b, $options);\n  let isArrayLike;\n  const typeOfSource = typeOf($source);\n  if(typeOfSource === 'array') { isArrayLike = true; }\n  else if(\n    typeOfSource === 'object' &&\n    $source.length >= 0 && \n    Number.isInteger($source.length)\n  ) {\n    if(options.strict === false) {\n      isArrayLike = true;\n    }\n    else {\n      iterateSourceKeys: \n      for(const $sourceKey of entities($source, 'keys', {\n        nonenumerable: true, recurse: false\n      }).reverse()) {\n        const lastIndex = Number($sourceKey);\n        if(lastIndex === $source.length - 1) {\n          isArrayLike = true;\n          break iterateSourceKeys\n        }\n      }\n      if(isArrayLike === undefined) { isArrayLike = false; }\n    }\n  }\n  else { isArrayLike = false; }\n  return isArrayLike\n}\n\nconst Options$a = { strict: true };\nfunction isMapLike($source, $options) {\n  const options = Object.assign({}, Options$a, $options);\n  let isMapLike;\n  const typeOfSource = typeOf($source);\n  if(typeOfSource === 'map') { isMapLike = true; }\n  else if(\n    typeOfSource === 'object' &&\n    $source.size >= 0 && \n    Number.isInteger($source.size)\n  ) {\n    if(options.strict === false) {\n      isMapLike = true;\n    }\n    else {\n      iterateSourceEntries: \n      for(const $sourceEntity of entities($source, 'entries', {\n        nonenumerable: true, recurse: false\n      })) {\n        if(\n          isArrayLike($sourceEntity, options) ||\n          $sourceEntity.length === 2\n        ) { isMapLike = true; }\n        else {\n          isMapLike = false;\n          break iterateSourceEntries\n        }\n      }\n      if(isMapLike === undefined) { isMapLike = false; }\n    }\n  }\n  else { isMapLike = false; }\n  return isMapLike\n}\n\nfunction typedObjectLiteral($source) {\n  const typeOfSource = typeOf($source);\n  if(typeOfSource === 'string') {\n    const source = $source.toLowerCase();\n    if(source === 'object') { return Object() }\n    else if(source === 'array') { return Array() }\n    else if(source === 'map') { return new Map() }\n    else ;\n  }\n  else  {\n    if(typeOfSource === 'object') { return Object() }\n    else if(isArrayLike($source, { strict: true })) { return Array() }\n    else if(isMapLike($source, { strict: true })) { return new Map() }\n    else ;\n  }\n}\n\nconst Options$9 = {\n  pathMatch: false,\n  pathMatchMaxResults: 1000,\n  pathParseInteger: false, \n  getters: [Getters.Object, Getters.Map], \n  setters: [Setters.Object, Setters.Map],\n  typeValidators: [TypeValidators.Object, TypeValidators.Map],\n};\nfunction setProperty() {\n  const $arguments = [...arguments];\n  const [$target, $path, $value, $options] = $arguments;\n  const options = Object.assign({}, Options$9, $options);\n  const getters = new Tensors(options.getters, options.typeValidators);\n  const setters = new Tensors(options.setters, options.typeValidators);\n  if(!options.pathMatch) {\n    if(typeOf($arguments[1]) === 'string') {\n      const { enumerable, nonenumerable } = options;\n      getters.cess($target);\n      const subpaths = splitPath($path, options.pathParseInteger);\n      const key = subpaths.pop();\n      let subtarget = $target;\n      iterateSubpaths: \n      for(const $subpath of subpaths) {\n        subtarget = getters.cess(subtarget, $subpath, options) || setters.cess(\n          subtarget, $subpath, isNaN($subpath) ? {} : []\n        );\n        if(subtarget === undefined) { break iterateSubpaths } \n      }\n      setters.cess(subtarget, key, $value, options);\n      return $target\n    }\n    else {\n      const [$target, $value] = $arguments;\n      return $target\n    }\n  }\n  else {\n    const subtargets = [];\n    const compandEntries = compand($target, Object.assign({}, options, { values: true }));\n    const propertyPathMatcher = outmatch($path, { separator: '.' });\n    for(const [$propertyPath, $propertyValue] of compandEntries) {\n      const propertyPathMatch = propertyPathMatcher($propertyPath, { separator: '.' });\n      if(propertyPathMatch === true) {\n        setProperty($target, $propertyPath, $value, {\n          pathMatch: false, pathParseInteger: options.pathParseInteger\n        });\n        subtargets.push([$propertyPath, $value]);\n      }\n    }\n    return subtargets\n  }\n}\n\nconst Options$8 = {\n  pathMatch: false,\n  pathMatchMax: 100,\n  pathParseInteger: false, \n  deleters: [Deleters.Object, Deleters.Map],\n  typeValidators: [TypeValidators.Object, TypeValidators.Map],\n};\nfunction deleteProperty($target, $path, $options) {\n  const options = Object.assign ({}, Options$8, $options);\n  const deleters = new Tensors(options.deleters, options.typeValidators);\n  if(!options.pathMatch) {\n    const subpaths = splitPath($path, options.pathParseInteger);\n    const key = subpaths.pop();\n    const subtarget = getProperty($target, subpaths.join('.'), options) || $target;\n    deleters.cess(subtarget, key);\n  }\n  else {\n    const subtargets = [];\n    const compandEntries = compand($target, Object.assign({}, options, { values: true }));\n    const propertyPathMatcher = outmatch($path, { separator: '.' });\n    for(const [$propertyPath, $propertyValue] of compandEntries) {\n      const propertyPathMatch = propertyPathMatcher($propertyPath, { separator: '.' });\n      if(propertyPathMatch === true) {\n        deleteProperty($target, $propertyPath, {\n          pathMatch: false, pathParseInteger: options.pathParseInteger\n        });\n        subtargets.push([$propertyPath, undefined]);\n      }\n    }\n    return subtargets\n  }\n}\n\nconst ValidPathTypes = ['string', 'function'];\nfunction expand($source, $path, $options = {}) {\n  const options = Object.assign({}, $options);\n  const typeOfPath = typeOf($path);\n  const typeOfSource = typeOf($source);\n  if(\n    !ValidPathTypes.includes(typeOfPath) ||\n    !ObjectKeys.includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source);\n  for(const [$sourceKey, $sourceValue] of entities(\n    $source, 'entries', Object.assign({}, options, { recurse: false })\n  )) {\n    const targetValue = (\n      ObjectKeys.includes(typeOf($sourceValue))\n    ) ? expand($sourceValue, $path, options) : $sourceValue;\n    if(typeOfPath === ValidPathTypes[0]) {\n      target[$sourceKey] = setProperty({}, $path, targetValue, options);\n    }\n    else if(typeOfPath === ValidPathTypes[1]) {\n      target[$sourceKey] = $path(targetValue);\n    }\n  }\n  return target\n}\n\nconst Options$7 = {\n  ancestors: [], \n  getters: [Getters.Object, Getters.Map],\n  typeValidators: [TypeValidators.Object, TypeValidators.Map],\n  depth: 0, maxDepth: 10,\n};\nfunction impand($source, $property, $options = {}) {\n  const options = Object.assign({}, Options$7, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  });\n  const { ancestors, values } = options;\n  if(options.depth > options.maxDepth) { return } else { options.depth++; }\n  const source = new Tensors(options.getters, options.typeValidators).cess($source);\n  if(!ancestors.includes(source)) { ancestors.unshift(source); }\n  const typeOfProperty = typeOf($property);\n  let target = typedObjectLiteral($source);\n  for(const [$sourceKey, $sourceValue] of entities(\n    $source, 'entries', Object.assign({}, options, { recurse: false })\n  )) {\n    if(typeOfProperty === 'string') { target[$sourceKey] = getProperty($sourceValue, $property); }\n    else if(typeOfProperty === 'function') { target[$sourceKey] = $property($sourceValue); }\n    if(target[$sourceKey] && typeof target[$sourceKey] === 'object') {\n      target[$sourceKey] = impand(target[$sourceKey], $property);\n    }\n  }\n  return target\n}\n\nconst Options$6 = {\n  setters: [Setters.Object, Setters.Map],\n};\nfunction decompand($source, $options) {\n  const options = Object.assign({}, Options$6, $options);\n  const typeofSource= typeOf($source);\n  const sourceEntries = (\n    typeofSource === 'object'\n  ) ? entities($source, 'entries', options) : $source;\n  if(!sourceEntries) { return }\n  const target = (isNaN(sourceEntries[0][0])) ? {} : [];\n  for(const [$propertyPath, $propertyValue] of sourceEntries) {\n    setProperty(target, $propertyPath, $propertyValue, options);\n  }\n  return target\n}\n\nconst Options$5 = {\n  getters: [Getters.Object, Getters.Map],\n  setters: [Setters.Object, Setters.Map],\n  typeValidators: [TypeValidators.Object, TypeValidators.Map],\n};\nfunction assignSources($target, $type, ...$sources) {\n  if(!$target) { return $target}\n  const options = Object.assign({}, Options$5);\n  const getters = new Tensors(options.getters, options.typeValidators);\n  const setters = new Tensors(options.setters, options.typeValidators);\n  const typeOfTarget = typeOf($target);\n  iterateSources: \n  for(const $source of $sources) {\n    if(!ObjectKeys.includes(typeOf($source))) continue iterateSources\n    const sourceEntries = entities($source, 'entries', {\n      recurse: false, // returnValue: 'entries'\n    });\n    for(const [$sourcePropertyKey, $sourcePropertyValue] of sourceEntries) {\n      const targetPropertyValue = getters.cess($target, $sourcePropertyKey);\n      const typeOfTargetPropertyValue = typeOf(targetPropertyValue);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if(typeOfTarget === 'array' && $type === 'assignConcat') {\n        setters.cess($target, $target.length, $sourcePropertyValue);\n      }\n      else if(\n        ObjectKeys.includes(typeOfSourcePropertyValue) &&\n        ObjectKeys.includes(typeOfTargetPropertyValue)\n      ) {\n        assignSources(targetPropertyValue, $type, $sourcePropertyValue);\n      }\n      else {\n        setters.cess($target, $sourcePropertyKey, $sourcePropertyValue);\n      }\n    }\n  }\n}\n\nvar assign = ($target, ...$sources) => assignSources($target, 'assign', ...$sources);\n\nvar assignConcat = ($target, ...$sources) => assignSources($target, 'assignConcat', ...$sources);\n\nconst Options$4 = { typeCoercion: false };\nfunction defineProperty($target, $propertyKey, $propertyDescriptor, $options) {\n  const propertyDescriptor = Object.assign({}, $propertyDescriptor);\n  let propertyDescriptorValue = propertyDescriptor.value;\n  const options = Object.assign({}, Options$4, $options);\n  const typeOfPropertyDescriptorValue = typeOf(propertyDescriptor.value);\n  const targetPropertyValue = $target[$propertyKey];\n  const typeOfTargetPropertyValue = typeOf(targetPropertyValue);\n  if(ObjectKeys.includes(typeOfPropertyDescriptorValue)) {\n    if(ObjectKeys.includes(typeOfTargetPropertyValue)) {\n      propertyDescriptor.value = defineProperties(targetPropertyValue, propertyDescriptorValue, options);\n    }\n    else {\n      const propertyValueTarget = typedObjectLiteral(isArrayLike(\n        Object.defineProperties({}, propertyDescriptorValue)\n      ) ? 'array' : 'object');\n      propertyDescriptor.value = defineProperties(propertyValueTarget, propertyDescriptorValue, options);\n    }\n  }\n  else if(\n    options.typeCoercion && \n    Object.getOwnPropertyDescriptor(propertyDescriptor, 'type') !== undefined &&\n    !['undefined'/*, 'null'*/].includes(typeOfPropertyDescriptorValue)\n  ) {\n    propertyDescriptor.value = new Primitives[propertyDescriptor.type](propertyDescriptorValue);\n  }\n  Object.defineProperty($target, $propertyKey, propertyDescriptor);\n  if($propertyDescriptor.sealed) { Object.seal($target[$propertyKey]); }\n  if($propertyDescriptor.frozen) { Object.freeze($target[$propertyKey]); }\n  return $target\n}\n\nfunction defineProperties($target, $propertyDescriptors, $options) {\n  for(const [$propertyKey, $propertyDescriptor] of Object.entries($propertyDescriptors)) {\n    defineProperty($target, $propertyKey, $propertyDescriptor, $options);\n  }\n  return $target\n}\n\nconst Options$3 = {\n  getters: [Getters.Object, Getters.Map],\n  typeValidators: [TypeValidators.Object, TypeValidators.Map],\n  ancestors: [], \n  depth: 0, maxDepth: 10,\n};\nfunction freeze($target, $options = {}) {\n  const options = Object.assign({}, Options$3, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  });\n  const { ancestors, values } = options;\n  if(options.depth > options.maxDepth) { return } else { options.depth++; }\n  const target = new Tensors(options.getters, options.typeValidators).cess($target);\n  if(!ancestors.includes(target)) { ancestors.unshift(target); }\n  const targetEntities = entities($target, 'entries', Object.assign(options, {\n    recurse: false\n  }));\n  iterateTargetEntities: \n  for(const [$propertyKey, $propertyValue] of targetEntities) {\n    if(ancestors.includes($propertyValue)) { continue iterateTargetEntities }\n    else if(ObjectKeys.includes(typeOf($propertyValue))) {\n      freeze($propertyValue, options);\n    }\n  }\n  return Object.freeze($target)\n}\n\nconst Options$2 = {\n  getters: [Getters.Object, Getters.Map],\n  typeValidators: [TypeValidators.Object, TypeValidators.Map],\n  ancestors: [], \n  depth: 0, maxDepth: 10,\n};\nfunction seal($target, $options = {}) {\n  const options = Object.assign({}, Options$2, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  });\n  const { ancestors, values } = options;\n  if(options.depth > options.maxDepth) { return } else { options.depth++; }\n  const target = new Tensors(options.getters, options.typeValidators).cess($target);\n  if(!ancestors.includes(target)) { ancestors.unshift(target); }\n  const targetEntities = entities($target, 'entries', Object.assign(options, {\n    recurse: false\n  }));\n  iterateTargetEntities: \n  for(const [$propertyKey, $propertyValue] of targetEntities) {\n    if(ancestors.includes($propertyValue)) { continue iterateTargetEntities }\n    else if(ObjectKeys.includes(typeOf($propertyValue))) {\n      seal($propertyValue, options);\n    }\n  }\n  return Object.seal($target)\n}\n\nvar keys = ($target, $options) => entities($target, 'keys', $options);\n\nvar values = ($target, $options) => entities($target, 'values', $options);\n\nvar entries = ($target, $options) => entities($target, 'entries', $options);\n\nconst Options$1 = {\n  getters: [Getters.Object, Getters.Map],\n  typeValidators: [TypeValidators.Object, TypeValidators.Map],\n  delimiter: '.',\n  depth: 0,\n  enumerable: true,\n  frozen: false,\n  maxDepth: 10,\n  nonenumerable: false,\n  path: false,\n  recurse: true,\n  returnValue: 'receiver',\n  sealed: false,\n  type: false,\n};\nfunction getOwnPropertyDescriptor($source, $propertyKey, $options = {}) {\n  const options = Object.assign({}, Options$1, $options, {\n    ancestors: Object.assign([], $options.ancestors),\n  });\n  if(options.depth >= options.maxDepth) { return }\n  else { options.depth++; }\n  if(!options.ancestors.includes($source)) { options.ancestors.unshift($source); }\n  const getters = new Tensors(options.getters, options.typeValidators);\n  const propertyValue = getters.cess($source, $propertyKey);\n  if(propertyValue !== undefined) {\n    if(ObjectKeys.includes(typeOf(propertyValue))) {\n      if(options.ancestors.includes(propertyValue)) { return }\n      else { options.ancestors.unshift(propertyValue); }\n    }\n    const typeOfSource = typeOf($source);\n    const propertyDescriptor = (typeOfSource !== 'map')\n      ? Object.getOwnPropertyDescriptor($source, $propertyKey)\n      : { configurable: false, enumerable: true, value: propertyValue[1], writable: true };\n    if(!options.nonenumerable && !propertyDescriptor.enumerable) { return }\n    if(options.path) {\n      options.path = (\n        typeOf(options.path) === 'string'\n      ) ? [options.path, $propertyKey].join(options.delimiter) : $propertyKey;\n      propertyDescriptor.path = options.path;\n    }\n    if(options.type) { propertyDescriptor.type = typeOf(propertyValue); }\n    if(options.frozen) { propertyDescriptor.frozen = Object.isFrozen(propertyValue); }\n    if(options.sealed) { propertyDescriptor.sealed = Object.isSealed(propertyValue); }\n    if(options.recurse && ObjectKeys.includes(typeOf(propertyValue))) {\n      propertyDescriptor.value = getOwnPropertyDescriptors(propertyValue, options);\n    }\n    else {\n      propertyDescriptor.value = propertyValue;\n    }\n    return propertyDescriptor\n  }\n}\n\nfunction getOwnPropertyDescriptors($source, $options = {}) {\n  const options = Object.assign({}, $options);\n  const propertyDescriptors = {};\n  const typeOfSource = typeOf($source);\n  const propertyDescriptorKeys = (['array', 'object'].includes(typeOfSource))\n    ? Object.keys(Object.getOwnPropertyDescriptors($source))\n    : (typeOfSource == 'map')\n    ? Array.from($source.keys())\n    : [];\n  for(const $propertyKey of propertyDescriptorKeys) {\n    const propertyDescriptor = getOwnPropertyDescriptor($source, $propertyKey, options);\n    if(propertyDescriptor) {\n      propertyDescriptors[$propertyKey] = propertyDescriptor;\n    }\n  }\n  return propertyDescriptors\n}\n\n({\n  getters: [Getters.Object, Getters.Map]});\nfunction valueOf($source, $options = {}) {\n  const options = Object.assign({}, $options);\n  if(options.returnValue === 'receiver') { return $source }\n  else {\n    const target = typedObjectLiteral(typeOf($source));\n    return defineProperties(target, getOwnPropertyDescriptors($source, $options))\n  }\n}\n\nconst Options = { space: 0, replacer: null, returnValue: 'target', nonenumerable: true };\nfunction toString($source, $options) {\n  const options = Object.assign({}, Options, $options);\n  return JSON.stringify(\n    valueOf($source, options), options.replacer, options.space\n  )\n}\n\nclass Recourse extends EventTarget {\n  static compand = compand\n  static decompand = decompand\n  static expand = expand\n  static impand = impand\n  static keys = keys\n  static values = values\n  static entries = entries\n  static entities = entities\n  static get = getProperty\n  static set = setProperty\n  static delete = deleteProperty\n  static assign = assign\n  static assignConcat = assignConcat\n  static defineProperties = defineProperties\n  static defineProperty = defineProperty\n  static freeze = freeze\n  static seal = seal\n  static getOwnPropertyDescriptors = getOwnPropertyDescriptors\n  static getOwnPropertyDescriptor = getOwnPropertyDescriptor\n  static isArrayLike = isArrayLike\n  static isMapLike = isMapLike\n  static typeOf = typeOf\n  static toString = toString\n  static valueOf = valueOf\n\n  constructor($target) {\n    super();\n    for(const [$staticMethodName, $staticMethod] of Object.entries({\n      compand: Recourse.compand, decompand: Recourse.decompand, \n      expand: Recourse.expand, impand: Recourse.impand,\n      entities: Recourse.entities,\n      keys: Recourse.keys, values: Recourse.values, entries: Recourse.entries, \n      get: Recourse.get, set: Recourse.set, delete: Recourse.delete,\n      assign: Recourse.assign, assignConcat: Recourse.assignConcat, \n      defineProperties: Recourse.defineProperties, \n      defineProperty: Recourse.defineProperty,\n      freeze: Recourse.freeze, seal: Recourse.seal,\n      getOwnPropertyDescriptors: Recourse.getOwnPropertyDescriptors, \n      getOwnPropertyDescriptor: Recourse.getOwnPropertyDescriptor,\n      isArrayLike: Recourse.isArrayLike, isMapLike: Recourse.isMapLike,\n      typeOf: Recourse.typeOf,\n    })) {\n      Object.defineProperty(this, $staticMethodName, {\n        value: $staticMethod.bind(this, $target)\n      });\n    }\n  }\n}\n\nexport { Recourse, assign, assignConcat, compand, decompand, defineProperties, defineProperty, deleteProperty as delete, entities, entries, expand, freeze, getProperty as get, getOwnPropertyDescriptor, getOwnPropertyDescriptors, impand, isArrayLike, keys, seal, setProperty as set, splitPath, index as tensors, toString, typeOf, typedObjectLiteral, valueOf, values, index$1 as variables };\n//# sourceMappingURL=recourse.js.map\n","import Settings from './settings/index.js'\nimport { typeOf, compand, get } from 'recourse'\nexport default class EventDefinition {\n  #context\n  #enable = false\n  #nontranssigned = []\n  #_targets = []\n  #_assign\n  #_deassign\n  #_transsign\n  constructor($settings, $context) { \n    if(!$settings || !$context) { return this }\n    const settings = Settings($settings)\n    const assigned = []\n    const deassigned = []\n    const transsigned = []\n    Object.defineProperties(this, {\n      'settings': { value: settings },\n      'path': { value: settings.path },\n      'type': { value: settings.type },\n      'assigned': { value: assigned },\n      'deassigned': { value: deassigned },\n      'transsigned': { value: transsigned },\n      'listener':  { configurable: true, get() {\n        const typeOfListener = typeOf(settings.listener)\n        let listener \n        if(typeOfListener === 'string') {\n          let listenerTarget = $context\n          iterateListenerPathKeys: \n          for(const $pathKey of settings.listener.split('.')) {\n            const value = listenerTarget[$pathKey]\n            if(value !== undefined) { listenerTarget = listenerTarget[$pathKey] }\n            else { break iterateListenerPathKeys }\n          }\n          if(typeOf(listenerTarget) === 'function') {\n            listener = listenerTarget\n          }\n        }\n        else { listener = settings.listener }\n        if(settings.bindListener === true) {\n          listener = listener.bind(this.#context)\n        }\n        Object.defineProperty(this, 'listener', { value: listener })\n        return listener\n      } }\n    })\n    this.#context = $context\n    this.enable = this.settings.enable\n  }\n  get enable() { return this.#enable }\n  set enable($enable) {\n    const targets = this.#targets\n    const assigned = this.assigned\n    const deassigned = this.deassigned\n    assigned.length = 0\n    deassigned.length = 0\n    iterateTargetElements: \n    for(const $targetElement of targets) {\n      const { path, target, enable } = $targetElement\n      const settings = this.settings\n      if(enable === $enable) { continue iterateTargetElements }\n      if($enable === true) {\n        try {\n          this.#assign(target)\n          $targetElement.enable = $enable\n          assigned.push($targetElement)\n          \n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err) } }\n      }\n      else if($enable === false) {\n        try {\n          this.#deassign(target)\n          $targetElement.enable = $enable\n          deassigned.push($targetElement)\n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err) } }\n      }\n    }\n    this.#enable = $enable\n  }\n  get #target() { return this.settings.target }\n  get #targets() {\n    const pretargets = this.#_targets\n    const targets = []\n    if(this.#target) {\n      for(const $target of [].concat(this.#target)) {\n        const pretargetElement = pretargets.find(\n          ($pretarget) => $pretarget?.path === this.path\n        )\n        if(pretargetElement !== undefined) {\n          targets.push(pretargetElement)\n        }\n        else if(pretargetElement === undefined) { targets.push({\n            path: this.path,\n            target: $target,\n            enable: false,\n          })\n        }\n      }\n    }\n    else if(typeOf(this.path) === 'string') {\n      const targetPaths = []\n      if(this.settings.pathMatch) {\n        targetPaths.push(...get(this.#context, this.path, {\n          nonenumerable: true, pathMatch: true\n        }))\n        if(this.path.charAt(0) === '*') {\n          targetPaths.unshift([this.#scopeKey, this.#context])\n        }\n        iterateTargetPaths: \n        for(const [$targetPath, $targetValue] of targetPaths) {\n          const pretargetElement = pretargets.find(\n            ($pretarget) => $pretarget.path === $targetPath\n          )\n          let target = $targetValue\n          let targetElement\n          if(target !== undefined) {\n            if(target === pretargetElement?.target) {\n              targetElement = pretargetElement\n            }\n            else if(typeof target === 'object') {\n              targetElement = {\n                path: $targetPath,\n                target: target,\n                enable: false,\n              }\n            }\n          }\n          if(targetElement !== undefined) { targets.push(targetElement) }\n        }\n      }\n      if(this.path === this.#scopeKey) {\n        const targetElement = {\n          path: this.path,\n          target: this.#context,\n          enable: false,\n        }\n        targets.push(targetElement)\n      }\n    }\n    this.#_targets = targets\n    return this.#_targets\n  }\n  get #scopeKey() { return this.settings.scopeKey }\n  get #assign() {\n    if(this.#_assign !== undefined) { return this.#_assign }\n    this.#_assign = this.settings.methods.assign[this.settings.assign].bind(null, this)\n    return this.#_assign\n  }\n  get #deassign() {\n    if(this.#_deassign !== undefined) { return this.#_deassign }\n    this.#_deassign = this.settings.methods.deassign[this.settings.deassign].bind(null, this)\n    return this.#_deassign\n  }\n  get #transsign() {\n    if(this.#_transsign !== undefined) { return this.#_transsign }\n    this.#_transsign = this.settings.methods.transsign[this.settings.transsign].bind(null, this)\n    return this.#_transsign\n  }\n  emit() {\n    const targets = this.#targets\n    const transsigned = this.transsigned\n    const nontranssigned = this.#nontranssigned\n    transsigned.length = 0\n    nontranssigned.length = 0\n    iterateTargetElements: \n    for(const $targetElement of targets) {\n      const { target } = $targetElement\n      try {\n        this.#transsign(target, ...arguments)\n        transsigned.push($targetElement)\n      }\n      catch($err) { nontranssigned.push($targetElement) }\n    }\n    return this\n  }\n}","import { assign, typeOf } from 'recourse'\nexport default ($settings = {}) => {\n  const Settings = {\n    enable: false,\n    assign: 'addEventListener', deassign: 'removeEventListener', transsign: 'dispatchEvent',\n    bindListener: true,\n    errorLog: false,\n    scopeKey: ':scope',\n    pathMatch: true,\n    methods: {\n      assign: {\n        addEventListener: function addEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition\n          const { options, useCapture } = settings\n          return $target['addEventListener'](type, listener, options || useCapture)\n        },\n        on: function on($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition\n          return $target['on'](type, listener)\n        },\n        once: function once($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition\n          return $target['once'](type, listener)\n        },\n      }, \n      deassign: {\n        removeEventListener: function removeEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition\n          const { options, useCapture } = settings\n          return $target['removeEventListener'](type, listener, options || useCapture)\n        },\n        off: function off($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition\n          return $target['off'](type, listener)\n        },\n      },\n      transsign: {\n        dispatchEvent: function dispatchEvent($eventDefinition, $target, $event) {\n          return $target['dispatchEvent']($event)\n        },\n        emit: function emit($eventDefinition, $target, $type, ...$arguments) {\n          return $target['emit']($type, ...$arguments)\n        },\n      },\n    },\n  }\n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'methods': \n        Settings[$settingKey] = assign(Settings[$settingKey], $settingValue)\n        break\n      case 'enableEvents': break\n      default: \n        Settings[$settingKey] = $settingValue\n        break\n    }\n  }\n  return Settings\n}","import { assign } from 'recourse'\nimport expandEvents from './expand-events/index.js'\nimport Settings from './settings/index.js'\nimport EventDefinition from './event-definition/index.js'\nexport default class Core extends EventTarget {\n  static implement = function ($target, $settings) {\n    if(!$target || !$settings) { return undefined }\n    const settings = Settings($settings)\n    const events = []\n    Object.defineProperties($target, {\n      [settings.propertyDefinitions.getEvents]: {\n        enumerable: false, writable: false, \n        value: function getEvents() {\n          if(!arguments[0]) { return events }\n          const getEvents = []\n          const $filterEvents = [].concat(arguments[0])\n          iterateFilterEvents: \n          for(const $filterEvent of $filterEvents) {\n            iterateEvents: \n            for(const $event of events) {\n              let match\n              iterateEventFilterProperties: \n              for(const [\n                $filterEventPropertyKey, $filterEventPropertyValue\n              ] of Object.entries($filterEvent)) {\n                let eventFilterMatch\n                if($filterEventPropertyKey === 'listener') {\n                  eventFilterMatch = (\n                    $event.settings[$filterEventPropertyKey] === $filterEventPropertyValue\n                  )\n                }\n                else {\n                  eventFilterMatch = (\n                    $event[$filterEventPropertyKey] === $filterEventPropertyValue\n                  )\n                }\n                if(match !== false) { match = eventFilterMatch }\n                else { break iterateEventFilterProperties }\n              }\n              if(match === true) { getEvents.push($event) }\n            }\n          }\n          return getEvents\n        }\n      },\n      [settings.propertyDefinitions.addEvents]: {\n        enumerable: false, writable: false, \n        value: function addEvents() {\n          if(!arguments.length) { return $target }\n          let $addEvents = expandEvents(arguments[0], settings.compand.scopeKey)\n          let $enableEvents = arguments[1] || false\n          iterateAddEvents: \n          for(let $addEvent of $addEvents) {\n            const event = {}\n            for(const $settingKey of [\n              'assign', 'deassign', 'transsign', 'compand', 'bindListener'\n            ]) {\n              const settingValue = settings[$settingKey]\n              if(settingValue !== undefined) { event[$settingKey] = settingValue }\n            }\n            assign(event, $addEvent)\n            const eventDefinition = new EventDefinition(event, $target)\n            if($enableEvents) { eventDefinition.enable = true }\n            events.push(eventDefinition)\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.removeEvents]: {\n        enumerable: false, writable: false, \n        value: function removeEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0])\n          if($events.length === 0) return $target\n          let eventsIndex = events.length - 1\n          while(eventsIndex > -1) {\n            const event = events[eventsIndex]\n            if($events.includes(event)) {\n              event.enable = false\n              events.splice(eventsIndex, 1)\n            }\n            eventsIndex--\n          }\n          return $target\n        }\n      },\n      [settings.propertyDefinitions.enableEvents]: {\n        enumerable: false, writable: false, \n        value: function enableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0])\n          if($events.length === 0) return $target\n          iterateEvents: for(const $event of $events) { $event.enable = true }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.disableEvents]: {\n        enumerable: false, writable: false, \n        value: function disableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0])\n          if($events.length === 0) return $target\n          iterateEvents: for(const $event of $events) { $event.enable = false }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.reenableEvents]: {\n        enumerable: false, writable: false, \n        value: function reenableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0])\n          for(const $event of $events) {\n            $event.enable = false\n            $event.enable = true\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.emitEvents]: {\n        enumerable: false, writable: false, \n        value: function emitEvents($filterEvents, ...$eventParameters) {\n          const $events = $target[settings.propertyDefinitions.getEvents]($filterEvents)\n          for(const $event of $events) {\n            $event.emit(...$eventParameters)\n          }\n          return $target\n        },\n      },\n    })\n    if(settings.events) { $target[settings.propertyDefinitions.addEvents](settings.events) }\n    if(settings.enableEvents === true) { $target[settings.propertyDefinitions.enableEvents]() }\n    return $target\n  }\n  constructor($settings = {}) {\n    super()\n    return Core.implement(this, $settings)\n  }\n}","export default ($settings = {}) => {\n  const Settings = {\n    events: {},\n    enableEvents: false,\n    compand: {\n      scopeKey: ':scope', \n      maxDepth: 10,\n    },\n    propertyDefinitions: {\n      getEvents: 'getEvents',\n      addEvents: 'addEvents',\n      removeEvents: 'removeEvents',\n      enableEvents: 'enableEvents',\n      disableEvents: 'disableEvents',\n      reenableEvents: 'reenableEvents',\n      emitEvents: 'emitEvents',\n    },\n  }\n  iterateSettingEntries: \n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'propertyDefinitions':\n      case 'compand':\n        Settings[$settingKey] = Object.assign(Settings[$settingKey], $settingValue)\n        break\n      default: \n        Settings[$settingKey] = $settingValue\n        break\n    }\n  }\n  return Settings\n}","function expandEvents($propEvents, $scopeKey = ':scope') {\n  if(\n    Array.isArray($propEvents) ||\n    $propEvents === undefined\n  ) { return $propEvents }\n  const propEvents = []\n  iteratePropEvents:\n  for(const [\n    $propEventSettings, $propEventListener\n  ] of Object.entries($propEvents)) {\n    const propEventSettings = $propEventSettings.trim().split(' ')\n    let path, type, listener, options\n    if(propEventSettings.length === 1) {\n      path = $scopeKey\n      type = propEventSettings[0]\n    }\n    else if(propEventSettings.length > 1) {\n      path = propEventSettings[0]\n      type = propEventSettings[1]\n    }\n    if(Array.isArray($propEventListener)) {\n      listener = $propEventListener[0]\n      options = $propEventListener[1]\n    }\n    else {\n      listener = $propEventListener\n    }\n    const propEvent = {\n      type,\n      path,\n      listener,\n      enable: false,\n    }\n    propEvents.push(propEvent)\n  }\n  return propEvents\n}\n\nexport default expandEvents"],"names":["handleNoCommaBraces","span","length","separatorI","i","rangeStart","substr","rangeEnd","expand$1","pattern","TypeError","scanning","openingBraces","closingBraces","handledUntil","results","alternatives","char","substring","j","newResults","push","k","l","unhandledFrom","negate","options","supportNegation","supportParens","isNegated","escapeRegExpChar","Pattern","source","excludeDot","separator","separatorSplitter","separatorMatcher","wildcard","str","result","escapeRegExpString","requiredSeparator","optionalSeparator","segments","split","support","qMark","star","globstar","brackets","extglobs","Segment","isFirst","isLast","end","EXCLUDE_DOT_PATTERN","add","state","addition","addToUnmatch","unmatch","addToMatch","dotHandled","match","convertSegment","segment","openingBracket","closingBracket","openingParens","closingParens","parensHandledUntil","extglobModifiers","scanningForParens","escapeChar","nextChar","State","modifier_1","pop","indexOf","Error","useUnmatch","convert","isMatch","regexp","sample","test","outmatch","Array","isArray","arguments","regexpPattern","patterns","array","predicate","mappedValue","flatMap","positiveResults","negativeResults","negatedPattern","convertedPattern","join","compile","RegExp","flags","fn","bind","splitPath","$path","$pathParseInteger","subpathDelimiters","subpaths","exec","parseInt","typeOf","$operand","Object","prototype","toString","call","slice","toLowerCase","Primitives","string","String","number","Number","boolean","Boolean","bigint","BigInt","undefined","null","Objects","keys","values","object","eventTarget","EventTarget","map","Map","ObjectKeys","Types","assign","Getters","$arguments","$target","$property","$receiver","get","Setters","includes","$value","$source","$targetKey","$sourceKey","$sourceValue","entries","clear","set","Deleters","delete","TypeValidators","Tensors","constructor","$tensors","$typeValidators","super","defineProperties","this","cess","value","tensorIndex","iterateTensors","$tensor","typeValidator","Options$e","pathParseInteger","getters","typeValidators","ancestors","depth","maxDepth","enumerable","nonenumerable","recurse","entities","$type","$options","sourceEntities","unshift","propertyDescriptorKeys","$propertyKey","isNaN","propertyDescriptor","getOwnPropertyDescriptor","typeOfValue","subentities","Options$d","returnValue","compand","compandEntries","sourceEntries","$key","is","subsources","$subsourceKey","$subsource","path","Options$c","pathMatch","pathMatchMaxResults","getProperty","subtargets","propertyPathMatcher","$propertyPath","$propertyValue","subtarget","iterateSubpaths","$subpath","$err","Options$b","strict","isArrayLike","typeOfSource","isInteger","iterateSourceKeys","reverse","Options$a","isMapLike","size","iterateSourceEntries","$sourceEntity","typedObjectLiteral","Options$9","setters","setProperty","key","Options$8","pathMatchMax","deleters","deleteProperty","ValidPathTypes","expand","typeOfPath","target","targetValue","Options$7","impand","typeOfProperty","Options$6","decompand","Options$5","assignSources","$sources","typeOfTarget","iterateSources","$sourcePropertyKey","$sourcePropertyValue","targetPropertyValue","typeOfTargetPropertyValue","typeOfSourcePropertyValue","assignConcat","Options$4","typeCoercion","defineProperty","$propertyDescriptor","propertyDescriptorValue","typeOfPropertyDescriptorValue","propertyValueTarget","type","sealed","seal","frozen","freeze","$propertyDescriptors","Options$3","targetEntities","Options$2","Options$1","delimiter","propertyValue","configurable","writable","isFrozen","isSealed","getOwnPropertyDescriptors","propertyDescriptors","from","valueOf","Options","space","replacer","JSON","stringify","EventDefinition","context","enable","nontranssigned","_targets","_assign","_deassign","_transsign","$settings","$context","settings","Settings","deassign","transsign","bindListener","errorLog","scopeKey","methods","addEventListener","$eventDefinition","listener","useCapture","on","once","removeEventListener","off","dispatchEvent","$event","emit","$settingKey","$settingValue","assigned","deassigned","transsigned","listenerTarget","iterateListenerPathKeys","$pathKey","$enable","targets","$targetElement","console","error","pretargets","concat","pretargetElement","find","$pretarget","targetPaths","charAt","$targetPath","$targetValue","targetElement","Core","static","events","enableEvents","propertyDefinitions","getEvents","addEvents","removeEvents","disableEvents","reenableEvents","emitEvents","$filterEvents","$filterEvent","iterateEventFilterProperties","$filterEventPropertyKey","$filterEventPropertyValue","eventFilterMatch","$addEvents","$propEvents","$scopeKey","propEvents","$propEventSettings","$propEventListener","propEventSettings","trim","propEvent","expandEvents","$enableEvents","$addEvent","event","settingValue","eventDefinition","$events","eventsIndex","splice","$eventParameters","implement"],"mappings":"AAAA,SAASA,EAAoBC,GACzB,GAAIA,EAAKC,OAAS,EACd,MAAO,IAAMD,EAAO,IAGxB,IADA,IAAIE,GAAc,EACTC,EAAI,EAAGA,EAAIH,EAAKC,OAAQE,IAC7B,GAAgB,MAAZH,EAAKG,IAA8B,MAAhBH,EAAKG,EAAI,KAAeA,EAAI,GAAqB,OAAhBH,EAAKG,EAAI,IAAc,CAC3E,GAAID,GAAc,EACd,MAAO,IAAMF,EAAO,IAExBE,EAAaC,EAAI,CAC7B,CAEI,GAAID,GAAc,EAAG,CACjB,IAAIE,EAAaJ,EAAKK,OAAO,EAAGH,GAC5BI,EAAWN,EAAKK,OAAOH,EAAa,GACxC,GAAIE,EAAWH,OAAS,GAAKK,EAASL,OAAS,EAC3C,MAAO,IAAMD,EAAKK,OAAO,EAAGH,GAAc,IAAMF,EAAKK,OAAOH,EAAa,GAAK,GAE1F,CACI,MAAO,IAAMF,EAAO,GACxB,CACA,SAASO,EAASC,GACd,GAAuB,iBAAZA,EACP,MAAM,IAAIC,UAAU,0CAA4CD,EAAU,UAS9E,IAPA,IAMIR,EANAU,GAAW,EACXC,EAAgB,EAChBC,EAAgB,EAChBC,GAAgB,EAChBC,EAAU,CAAC,IACXC,EAAe,GAEVZ,EAAI,EAAGA,EAAIK,EAAQP,OAAQE,IAAK,CACrC,IAAIa,EAAOR,EAAQL,GACnB,GAAa,OAATa,EAAJ,CAIA,GAAa,MAATA,EACA,GAAIN,EACAC,SAEC,GAAIR,EAAIU,IAAiBF,EAAe,CACzCX,EAAOQ,EAAQS,UAAUJ,EAAe,EAAGV,GAC3C,IAAK,IAAIe,EAAI,EAAGA,EAAIJ,EAAQb,OAAQiB,IAChCJ,EAAQI,IAAMlB,EAElBe,EAAe,GACfF,EAAeV,EACfO,GAAW,EACXC,GAChB,MAEgBA,SAGH,GAAa,MAATK,EACL,GAAIN,EACAE,SAEC,GAAsB,IAAlBA,EAAqB,CAE1B,GADAZ,EAAOQ,EAAQS,UAAUJ,EAAe,EAAGV,GACvCY,EAAad,OAAS,EAAG,CACzB,IAAIkB,EAAa,GACjBJ,EAAaK,KAAKb,EAASP,IAC3B,IAASkB,EAAI,EAAGA,EAAIJ,EAAQb,OAAQiB,IAChC,IAAK,IAAIG,EAAI,EAAGA,EAAIN,EAAad,OAAQoB,IACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAaM,GAAGpB,OAAQqB,IACxCH,EAAWC,KAAKN,EAAQI,GAAKH,EAAaM,GAAGC,IAIzDR,EAAUK,CAC9B,KACqB,CACDnB,EAAOD,EAAoBC,GAC3B,IAASkB,EAAI,EAAGA,EAAIJ,EAAQb,OAAQiB,IAChCJ,EAAQI,IAAMlB,CAEtC,CACgBa,EAAeV,EACfS,GAChB,MAEgBA,SAGEF,GAAqB,MAATM,GAAgBJ,EAAgBD,IAAkB,IACpEX,EAAOQ,EAAQS,UAAUJ,EAAe,EAAGV,GAC3CY,EAAaK,KAAKb,EAASP,IAC3Ba,EAAeV,IAEfO,GAAaE,IAAkBD,GAAiBR,IAAMK,EAAQP,OAAS,IACvES,GAAW,EACXP,EAAIU,EAAe,EAzD/B,MAFYV,GA6DZ,CACI,IAAsB,IAAlBU,EACA,MAAO,CAACL,GAEZ,IAAIe,EAA0C,MAA1Bf,EAAQK,GAAwBA,EAAeA,EAAe,EAClF,GAAIU,EAAgBf,EAAQP,OAAQ,CAChCD,EAAOQ,EAAQH,OAAOkB,GACtB,IAASL,EAAI,EAAGA,EAAIJ,EAAQb,OAAQiB,IAChCJ,EAAQI,IAAMlB,CAE1B,CACI,OAAOc,CACX,CAEA,SAASU,EAAOhB,EAASiB,GACrB,IAGItB,EAHAuB,GAAmC,IAAjBD,EAAQ,KAC1BE,GAAkC,IAAlBF,EAAQ,MACxBG,GAAY,EAEhB,GAAIF,EAAiB,CACjB,IAAKvB,EAAI,EAAGA,EAAIK,EAAQP,QAAyB,MAAfO,EAAQL,GAAYA,IAAK,CACvD,GAAIwB,GAAoC,MAAnBnB,EAAQL,EAAI,GAAY,CACzCA,IACA,KAChB,CACYyB,GAAaA,CACzB,CACYzB,EAAI,IACJK,EAAUA,EAAQH,OAAOF,GAErC,CACI,MAAO,CAAEK,QAASA,EAASoB,UAAWA,EAC1C,CAEA,SAASC,EAAiBb,GAAQ,MAAa,MAATA,GACzB,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,OAATA,EACO,KAAOA,EAGPA,CACV,CASD,SAASc,EAAQC,EAAQN,EAASO,GAC9B,IAAIC,OAAyC,IAAtBR,EAAQQ,WAAmCR,EAAQQ,UACtEC,EAAoB,GACpBC,EAAmB,GACnBC,EAAW,KACG,IAAdH,GACAC,EAAoB,IACpBC,EAAmB,UACnBC,EAAW,YAOPA,EALCH,GAELE,EApBR,SAA4BE,GAExB,IADA,IAAIC,EAAS,GACJnC,EAAI,EAAGA,EAAIkC,EAAIpC,OAAQE,IAC5BmC,GAAUT,EAAiBQ,EAAIlC,IAEnC,OAAOmC,CACX,CAc2BC,CADnBL,EAAoBD,IAEChC,OAAS,EAEf,QADXkC,EAAmB,MAAQA,EAAmB,KACP,MAG5B,KAAOA,EAAmB,IAI9B,IAEf,IAAIK,EAAoBP,EAAYE,EAAmB,KAAO,GAC1DM,EAAoBR,EAAYE,EAAmB,KAAO,GAC1DO,EAAWT,EAAYF,EAAOY,MAAMT,GAAqB,CAACH,GAS9D,MAAO,CACHA,OAAQA,EACRW,SAAUA,EACVjB,QAASA,EACTQ,UAAWA,EACXC,kBAAmBA,EACnBC,iBAAkBA,EAClBM,kBAAmBA,EACnBD,kBAAmBA,EACnBJ,SAAUA,EACVQ,QAlBU,CACVC,OAAwB,IAAjBpB,EAAQ,KACfqB,MAAuB,IAAjBrB,EAAQ,KACdsB,SAAUd,IAA+B,IAAlBR,EAAQ,MAC/BuB,UAA4B,IAAlBvB,EAAQ,MAClBwB,UAA4B,IAAlBxB,EAAQ,MAClBO,WAAYA,IAAqC,IAAvBP,EAAQO,YAc1C,CACA,SAASkB,EAAQnB,EAAQvB,EAAS2C,EAASC,GAAU,MAAO,CACxDrB,OAAQA,EACRoB,QAASA,EACTC,OAAQA,EACRC,IAAKtB,EAAO9B,OAAS,EACvB,CA2BF,IAAIqD,EAAsB,UAC1B,SAASC,EAAIC,EAAOC,EAAUzB,GAW1B,OAVIwB,EAAME,eACNF,EAAMlB,OAAOqB,SAAWF,GAExBD,EAAMI,aACF5B,IAAewB,EAAMK,aACrBJ,EAAWH,EAAsBG,GAErCD,EAAMK,YAAa,EACnBL,EAAMlB,OAAOwB,OAASL,GAEnBD,EAAMlB,MACjB,CACA,SAASyB,EAAevD,EAASwD,EAAS1B,GACtC,IAAIM,EAAUpC,EAAQoC,QAClBY,EApCR,SAAehD,EAASwD,EAAS1B,GAAU,MAAO,CAC9C9B,QAASA,EACTwD,QAASA,EACT1B,OAAQA,EACR2B,eAAgBD,EAAQX,IAAM,EAC9Ba,gBAAiB,EACjBC,cAAe,EACfC,cAAe,EACfC,oBAAqB,EACrBC,iBAAkB,GAClBC,mBAAmB,EACnBC,YAAY,EACZZ,YAAY,EACZF,aAAclD,EAAQoC,QAAQK,SAC9BY,YAAY,EACZ1D,GAAI,EACJa,KAAM,GACNyD,SAAU,GACZ,CAkBcC,CAAMlE,EAASwD,EAAS1B,GAChCH,EAAmB6B,EAAQZ,OACzB5C,EAAQiC,kBACRjC,EAAQgC,kBAId,GAHKI,EAAQZ,aACTwB,EAAMK,YAAa,IAEF,IAAjBG,EAAQX,IACR,OAAOW,EAAQZ,SAAWY,EAAQb,QAAUb,EAASiB,EAAIC,EAAOrB,GAEpE,GAAIS,EAAQG,UAA+B,OAAnBiB,EAAQjC,OAG5B,OAAOwB,EAAIC,EAAO,QAFJA,EAAMK,WAAmC,GAAtBP,GACF9C,EAAQ4B,SAAW,KAAOD,GACb,OAEhD,OAASqB,EAAMrD,GAAK6D,EAAQX,KAAK,CAG7B,GAFAG,EAAMxC,KAAOwC,EAAMQ,QAAQjC,OAAOyB,EAAMrD,GACxCqD,EAAMiB,SAAWjB,EAAMrD,EAAI6D,EAAQX,IAAMW,EAAQjC,OAAOyB,EAAMrD,EAAI,GAAK,GACpD,OAAfqD,EAAMxC,KAAe,CACrB,GAAIwC,EAAMrD,EAAIqD,EAAMQ,QAAQX,IAAK,CAC7BG,EAAMgB,YAAa,EACnB,QAChB,CAEgBhB,EAAMxC,KAAO,EAE7B,CACYR,EAAUgD,EAAMhD,QAASwD,EAAUR,EAAMQ,QAA7C,IAAsDhD,EAAOwC,EAAMxC,KAAMb,EAAIqD,EAAMrD,EACnF,GAAIK,EAAQoC,QAAQI,WAAaQ,EAAMe,kBAAmB,CACtD,GAAIpE,EAAIqD,EAAMS,gBAAkB9D,GAAKqD,EAAMU,eAAgB,CACnDV,EAAMgB,WACNjB,EAAIC,EAAO3B,EAAiBb,IAEvBb,IAAMqD,EAAMU,gBACjBX,EAAIC,EAAO,KACXA,EAAMS,eAAiBD,EAAQjC,OAAO9B,QAExB,MAATe,GAAgBb,IAAMqD,EAAMU,eAAiB,EAClDX,EAAIC,EAAO,OAEG,MAATxC,GAAgBb,IAAMqD,EAAMS,eAAiB,EAClDV,EAAIC,EAAO,KAGXD,EAAIC,EADU,MAATxC,EACM,MAGAA,GAEfwC,EAAMgB,YAAa,EACnB,QAChB,CACY,GAAIrE,EAAIqD,EAAMS,eAAgB,CACb,MAATjD,IACCwC,EAAMgB,YACPrE,EAAIqD,EAAMS,eAAiB,GAC3B9D,EAAIqD,EAAMU,gBACVV,EAAMU,eAAiB/D,EACvBqD,EAAMrD,EAAIqD,EAAMS,eACZzD,EAAQyB,UACRsB,EAAIC,EAAO,MAAQhD,EAAQ2B,iBAAmB,MAAM,GAGpDoB,EAAIC,EAAO,KAAK,IAGfrD,IAAM6D,EAAQX,MACnBE,EAAIC,EAAO,OACXA,EAAMrD,EAAIqD,EAAMS,eAChBT,EAAMS,eAAiBD,EAAQjC,OAAO9B,OACtCuD,EAAMU,eAAiBF,EAAQjC,OAAO9B,QAE1CuD,EAAMgB,YAAa,EACnB,QAChB,CACY,GAAa,MAATxD,IACCwC,EAAMgB,YACPrE,EAAIqD,EAAMU,gBACV/D,EAAI6D,EAAQX,IAAK,CACjBG,EAAMS,eAAiB9D,EACvBqD,EAAMgB,YAAa,EACnB,QAChB,CACA,CACQ,GAAIhB,EAAMhD,QAAQoC,QAAQK,SAAU,CAChC,IAAIqB,EAAmBd,EAAMc,iBAAqCG,GAAnBzD,EAAOwC,EAAMxC,KAAiBwC,EAAMiB,UAAUtE,EAAIqD,EAAMrD,EACvG,GAAiB,MAAbsE,GACCjB,EAAMgB,YACG,MAATxD,GAAyB,MAATA,GAAyB,MAATA,GAAyB,MAATA,GAAyB,MAATA,GA4BhE,GAAa,MAATA,GAAiBwC,EAAMgB,YAiB3B,GAAa,MAATxD,GAAgBwC,EAAMY,gBAC1BZ,EAAMe,oBACNf,EAAMgB,WAAY,CACnBjB,EAAIC,EAAO,KACX,QAChB,OArBgB,GAAIA,EAAMe,kBACNf,EAAMY,qBAEL,GAAIE,EAAiBrE,OAAQ,CAC9B,IAAI0E,EAAaL,EAAiBM,MAClC,GAAmB,MAAfD,IAAyD,IAAnCL,EAAiBO,QAAQ,KAC/C,MAAM,IAAIC,MAAM,4CAGpBvB,EAAIC,EAAO,KADXmB,EAA4B,MAAfA,GAAqC,MAAfA,EAAqB,GAAKA,IAE7DnB,EAAMI,YAAa,EACnBJ,EAAME,cAAe,EACrBF,EAAMY,gBACN,QACpB,OA1CgB,GAAIZ,EAAMe,kBACNf,EAAMW,qBAEL,GAAIhE,EAAIqD,EAAMa,qBAAuBb,EAAMY,cAC5CZ,EAAMa,mBAAqBlE,EAC3BqD,EAAMe,mBAAoB,EAC1Bf,EAAMW,oBAEL,IAAIX,EAAMY,eAAiBZ,EAAMW,cAAe,CACpC,MAATnD,IACAwC,EAAMI,YAAa,EACnBJ,EAAME,cAAe,EACrBH,EAAIC,EAAOA,EAAMhD,QAAQ4B,SAAW,MAAM,GAC1CoB,EAAMI,YAAa,EACnBJ,EAAME,cAAe,EACrBF,EAAMlB,OAAOyC,YAAa,GAE9BT,EAAiBlD,KAAKJ,GACtBuC,EAAIC,EAAO,OAAO,GAClBA,EAAMW,gBACNX,EAAMrD,IACN,QACpB,CAEoBqD,EAAMW,eAC1B,CAyBY,GAAIX,EAAMe,kBAAmB,CACrBf,EAAMY,gBAAkBZ,EAAMW,eAAiBhE,IAAMqD,EAAMQ,QAAQX,MACnEG,EAAMe,mBAAoB,EAC1Bf,EAAMrD,EAAIqD,EAAMa,mBAAqB,GAEzCb,EAAMgB,YAAa,EACnB,QAChB,CACA,CAEY5B,GADApC,EAAUgD,EAAMhD,SACEoC,SACjBY,EAAMgB,YAAc5B,EAAQE,MAAuB,MAAfU,EAAMxC,KACvCwC,EAAMrD,IAAMqD,EAAMQ,QAAQX,KAA0B,MAAnBG,EAAMiB,UACvClB,EAAIC,EAAOhD,EAAQ4B,SAAW,MAAM,IAGlCoB,EAAMgB,YAAc5B,EAAQC,OAAwB,MAAfW,EAAMxC,KACjDuC,EAAIC,EAAOhD,EAAQ4B,UAAU,GAG7BmB,EAAIC,EAAO3B,EAAiB2B,EAAMxC,OAEtCwC,EAAMgB,YAAa,CAC3B,CACI,OAAOjB,EAAIC,EAAOrB,EACtB,CACA,SAAS6C,EAAQjD,EAAQN,EAASO,GAI9B,IAHA,IAAIxB,EAAUsB,EAAQC,EAAQN,EAASO,GACnCM,EAhND,CACHwB,MAAO,GACPH,QAAS,GACToB,YAAY,GA8MRrC,EAAWlC,EAAQkC,SACdvC,EAAI,EAAGA,EAAIuC,EAASzC,OAAQE,IAAK,CAEtC4D,EAAevD,EADD0C,EAAQR,EAASvC,GAAIK,EAAe,IAANL,EAASA,IAAMuC,EAASzC,OAAS,GAC5CqC,EACzC,CACI,OAAIA,EAAOyC,WACA,OAASzC,EAAOqB,QAAU,KAAOrB,EAAOwB,MAGxCxB,EAAOwB,KAEtB,CA4CA,SAASmB,EAAQC,EAAQC,GAAU,GAAsB,iBAAXA,EAC1C,MAAM,IAAI1E,UAAU,uCAAyC0E,EAAS,UACxE,OAAOD,EAAOE,KAAKD,EAAQ,CAgB7B,SAASE,EAAS7E,EAASiB,GACvB,GAAuB,iBAAZjB,IAAyB8E,MAAMC,QAAQ/E,GAC9C,MAAM,IAAIC,UAAU,0FAA4FD,EAAU,UAK9H,GAHuB,iBAAZiB,GAA2C,kBAAZA,IACtCA,EAAU,CAAEQ,UAAWR,IAEF,IAArB+D,UAAUvF,aACW,IAAZwB,IACe,iBAAZA,GAAoC,OAAZA,GAAqB6D,MAAMC,QAAQ9D,IACvE,MAAM,IAAIhB,UAAU,2FAA6FgB,EAAU,UAG/H,GAA0B,QAD1BA,EAAUA,GAAW,CAAE,GACXQ,UACR,MAAM,IAAI6C,MAAM,+BAEpB,IAAIW,EAlER,SAAiBC,EAAUjE,GACvBiE,EAAWJ,MAAMC,QAAQG,GAAYA,EAAW,CAACA,IAC3B,IAAlBjE,EAAQ,QACRiE,EAbR,SAAiBC,EAAOC,GAEpB,IADA,IAAI9E,EAAU,GACLX,EAAI,EAAGA,EAAIwF,EAAM1F,OAAQE,IAE9B,IADA,IAAI0F,EAAcD,EAAUD,EAAMxF,IACzBe,EAAI,EAAGA,EAAI2E,EAAY5F,OAAQiB,IACpCJ,EAAQM,KAAKyE,EAAY3E,IAGjC,OAAOJ,CACX,CAImBgF,CAAQJ,EAAUnF,IAKjC,IAHA,IAAIwF,EAAkB,GAClBC,EAAkB,GAClB1D,EAAS,GACJnC,EAAI,EAAGA,EAAIuF,EAASzF,OAAQE,IAAK,CACtC,IAAI8F,EAAiBzE,EAAOkE,EAASvF,GAAIsB,GACrCyE,EAAmBlB,EAAQiB,EAAezF,QAASiB,GAAUwE,EAAerE,WAC5EqE,EAAerE,UACfoE,EAAgB5E,KAAK8E,GAGrBH,EAAgB3E,KAAK8E,EAEjC,CAaI,OAZIF,EAAgB/F,SAChBqC,EAAS,SAAW0D,EAAgBG,KAAK,KAAO,OAEhDJ,EAAgB9F,OAAS,EACzBqC,GAAU,MAAQyD,EAAgBI,KAAK,KAAO,IAEd,IAA3BJ,EAAgB9F,OACrBqC,GAAUyD,EAAgB,GAErBzD,EAAOrC,SACZqC,GAAU0C,EAAQ,KAAMvD,GAAS,IAE9B,IAAMa,EAAS,GAC1B,CAmCwB8D,CAAQ5F,EAASiB,GACjCyD,EAAS,IAAImB,OAAOZ,EAAehE,EAAQ6E,OAC3CC,EAAKtB,EAAQuB,KAAK,KAAMtB,GAI5B,OAHAqB,EAAG9E,QAAUA,EACb8E,EAAG/F,QAAUA,EACb+F,EAAGrB,OAASA,EACLqB,CACX,CAEA,SAASE,EAAUC,EAAOC,GACxB,MAAMC,EAAoB,6DACpBC,EAAW,GACjB,IAAI/C,EACJ,KAAkD,QAA3CA,EAAQ8C,EAAkBE,KAAKJ,KACjC5C,EAAM,GAAM+C,EAASzF,KAAK0C,EAAM,IAC3BA,EAAM,GACT6C,EAAqBE,EAASzF,KAAK2F,SAASjD,EAAM,GAAI,KAClD+C,EAASzF,KAAK0C,EAAM,IAErBA,EAAM,GAAM+C,EAASzF,KAAK0C,EAAM,IAChCA,EAAM,IAAM+C,EAASzF,KAAK0C,EAAM,IAE1C,OAAO+C,CACT,CAEA,IAAIG,EAAUC,GAAaC,OACxBC,UACAC,SACAC,KAAKJ,GAAUK,MAAM,GAAI,GAAGC,cAE/B,MAAMC,EAAa,CACjBC,OAAUC,OACVC,OAAUC,OACVC,QAAWC,QACXC,OAAUC,OACVC,eAAaA,EACbC,KAAQ,MAIJC,GAFgBjB,OAAOkB,KAAKZ,GACVN,OAAOmB,OAAOb,GACtB,CACdc,OAAUpB,OACVvB,MAASL,MACTiD,YAAeC,YACfC,IAAOC,MAEHC,EAAazB,OAAOkB,KAAKD,GAEzBS,GADe1B,OAAOmB,OAAOF,GACrBjB,OAAO2B,OAAO,CAAA,EAAIrB,EAAYW,IAC3BjB,OAAOkB,KAAKQ,GACV1B,OAAOmB,OAAOO,GAEhCpB,EAAWE,OAAQF,EAAWI,OAAQJ,EAAWM,QA2GlD,MAAMgB,EAAU,CACd5B,OApFF,YAAqB6B,GACnB,GAAyB,IAAtBA,EAAW9I,OAAc,CAC1B,MAAO+I,GAAWD,EAClB,OAAOC,CACX,CACO,CACH,MAAOA,EAASC,GAAaF,EAC7B,OAAOC,EAAQC,EACnB,CACA,EA4EEP,IAxCF,YAAmBK,GACjB,GAAyB,IAAtBA,EAAW9I,OAAc,CAC1B,IAAKiJ,GAAaH,EAClB,OAAOG,CACX,CACO,CACH,IAAKA,EAAWD,GAAaF,EAC7B,OAAOG,EAAUC,IAAIF,EACzB,CACA,GAiCMG,EAAU,CACdlC,OA7EF,YAAqB6B,GACnB,GAAG,CAAC,SAAU,UAAUM,SAASrC,EAAO+B,EAAW,KAAM,CACvD,MAAOC,EAASC,EAAWK,GAAUP,EAErC,OADAC,EAAQC,GAAaK,EACdN,EAAQC,EACnB,CACO,CACH,MAAOD,EAASO,GAAWR,EAC3B,IAAI,MAAMS,KAActC,OAAOkB,KAAKY,UAC3BA,EAAQQ,GAEjB,IAAI,MAAOC,EAAYC,KAAiBxC,OAAOyC,QAAQJ,GACrDP,EAAQS,GAAcC,EAExB,OAAOV,CACX,CACA,EA8DEN,IAjCF,YAAmBK,GACjB,GAAyB,IAAtBA,EAAW9I,OAAc,CAC1B,IAAKiJ,EAAWK,GAAWR,EAC3BG,EAAUU,QACV,IAAI,MAAOH,EAAYC,KAAiBxC,OAAOyC,QAAQ5H,QACrDmH,EAAUW,IAAIJ,EAAYC,GAE5B,OAAOR,CACX,CACO,CACH,IAAKA,EAAWD,EAAWK,GAAUP,EAErC,OADAG,EAAUW,IAAIZ,EAAWK,GAClBJ,EAAUC,IAAIF,EACzB,CACA,GAqBMa,EAAW,CACf5C,OA/DF,YAAsB6B,GACpB,MAAOC,EAASC,GAAaF,EAC7B,GAAG,CAAC,SAAU,UAAUM,SAASrC,EAAOiC,IACtC,cAAcD,EAAQC,GAGtB,IAAI,MAAMO,KAActC,OAAOkB,KAAKY,UAC3BA,EAAQQ,EAIrB,EAqDEd,IArBF,YAAoBK,GAClB,GAAyB,IAAtBA,EAAW9I,OAAc,CAC1B,IAAKiJ,EAAWD,GAAaF,EAC7B,OAAOG,EAAUa,OAAOd,EAC5B,CACO,CACH,IAAKC,GAAaH,EAClB,OAAOG,EAAUU,OAClB,CACH,GAcMI,EAAiB,CACrB9C,OArGuB8B,KACnBA,aAAmBN,MACrB,CAAC,QAAS,UAAUW,gBAAgBL,GAoGtCN,IAtDqBM,GAAaA,aAAmBN,KAwDvD,MAAMuB,UAAgBzB,YACpB,WAAA0B,CAAYC,EAAUC,GACpBC,QACAnD,OAAOoD,iBAAiBC,KAAM,CAC5BC,KAAQ,CAAEC,MAAO,YAAY1B,GAC3B,IAAI2B,EAAc,EAClBC,EACA,IAAI,MAAMC,KAAWT,EAAU,CAC7B,GAAGO,GAAeP,EAASlK,OAAU,MAAM0K,EAE3C,IAAGE,EADmBT,EAAgBM,IACrB3B,EAAW,IAC1B,OAAO6B,KAAW7B,GAEpB2B,GACV,CACA,IAEA,EAYA,MAAMI,EAAY,CAChBC,kBAAkB,EAClBC,QAAS,CAAClC,EAAQ5B,OAAQ4B,EAAQJ,KAClCuC,eAAgB,CAACjB,EAAe9C,OAAQ8C,EAAetB,KACvDwC,UAAW,GACXC,MAAO,EAAGC,SAAU,GACpBC,YAAY,EAAMC,eAAe,EACjCC,SAAS,GAEX,SAASC,EAASjC,EAASkC,EAAOC,EAAW,CAAA,GAC3C1E,EAAOuC,GACP,MAAMoC,EAAiB,GACjBlK,EAAUyF,OAAO2B,OAAO,CAAA,EAAIiC,EAAWY,EAAU,CACrDR,UAAWhE,OAAO2B,OAAO,GAAI6C,EAASR,cAElCA,UAAEA,EAASE,SAAEA,EAAQC,WAAEA,EAAUC,cAAEA,EAAaC,QAAEA,GAAY9J,EACpE,GAAGA,EAAQ0J,OAASC,EAAY,OAC5BF,EAAU7B,SAASE,IAAY2B,EAAUU,QAAQrC,GACrD9H,EAAQ0J,QACR,MAAMH,EAAU,IAAIf,EAAQxI,EAAQuJ,QAASvJ,EAAQwJ,gBAC/ClJ,EAASiJ,EAAQR,KAAKjB,GAC5B,IAAIxH,EAAU,OAAO4J,EACrB,MAAME,EAA6C,QAAnB7E,EAAOjF,GACnCA,EAAOqG,OACPlB,OAAOkB,KAAKrG,GAChB,IAAI,IAAI+J,KAAgBD,EAAwB,EAC1CE,MAAMD,IAAiBrK,EAAQsJ,mBACjCe,EAAe/E,SAAS+E,EAAc,KAExC,MAAMrB,EAAQO,EAAQR,KAAKjB,EAASuC,GAC9BE,EAA0C,QAApBhF,EAAOuC,GAC/BrC,OAAO+E,yBAAyB1C,EAASuC,GACzC,CAAET,YAAY,EAAMZ,SACxB,GACGY,GAAcW,EAAmBX,YACjCC,IAAkBU,EAAmBX,WACtC,CACA,MAAM/B,EACJ0C,EAAmB7C,KAAK9B,KACtB2E,EAAmB7C,IAAI9B,OAAS2E,EAAmBvB,MACjDyB,EAAclF,EAAOsC,GAC3B,GACEiC,GACA5C,EAAWU,SAAS6C,KACnBhB,EAAU7B,SAASC,GACpB,CACA4B,EAAUU,QAAQtC,GAClB,MAAM6C,EAAcX,EAASlC,EAAQmC,EAAOhK,GACzC0K,EAAYlM,OACA,YAAVwL,EAAuBE,EAAevK,KAAK,CAAC0K,EAAcK,IAC3C,WAAVV,EAAsBE,EAAevK,KAAK+K,GAChC,SAAVV,GAAoBE,EAAevK,KAAK0K,EAAcK,GAGjD,YAAVV,EAAuBE,EAAevK,KAAK,CAAC0K,EAAcxC,IAC3C,WAAVmC,EAAsBE,EAAevK,KAAKkI,GAChC,SAAVmC,GAAoBE,EAAevK,KAAK0K,EAE1D,KAEqB,YAAVL,EAAuBE,EAAevK,KAAK,CAAC0K,EAAcxC,IAC3C,WAAVmC,EAAsBE,EAAevK,KAAKkI,GAChC,SAAVmC,GAAoBE,EAAevK,KAAK0K,EAExD,CACA,CACE,OAAOH,CACT,CAEA,MAAMS,EAAY,CAChBjB,MAAO,EACPH,QAAS,CAAClC,EAAQ5B,OAAQ4B,EAAQJ,KAClCuC,eAAgB,CAACjB,EAAe9C,OAAQ8C,EAAetB,KACvD0C,SAAU,GACV/C,QAAQ,EACRgE,YAAa,YAEf,SAASC,EAAQ/C,EAASmC,EAAW,IACnC,MAAMa,EAAiB,GACjB9K,EAAUyF,OAAO2B,OAAO,CAAA,EAAIuD,EAAWV,EAAU,CACrDR,UAAWhE,OAAO2B,OAAO,GAAI6C,EAASR,cAElCA,UAAEA,EAAS7C,OAAEA,GAAW5G,EAE9B,GADAA,EAAQ0J,QACL1J,EAAQ0J,MAAQ1J,EAAQ2J,SAAY,OAAOmB,EAC9C,MAAMxK,EAAS,IAAIkI,EAAQxI,EAAQuJ,QAASvJ,EAAQwJ,gBAAgBT,KAAKjB,GACrE2B,EAAU7B,SAASE,IAAY2B,EAAUU,QAAQrC,GACrD,MAAMiD,EAAgBhB,EAASjC,EAAS,UAAWrC,OAAO2B,OAAO,CAAE,EAAEpH,EAAS,CAC5E8J,SAAS,KAEX,IAAI,MAAOkB,EAAMnD,KAAWkD,EAG1B,GAFInE,EACIA,GAAUkE,EAAenL,KAAK,CAACqL,EAAMnD,IAD/BiD,EAAenL,KAAKqL,GAGd,iBAAXnD,GACI,OAAXA,IACCpC,OAAOwF,GAAGpD,EAAQvH,KAClBmJ,EAAU7B,SAASC,GACpB,CACA,MAAMqD,EAAaL,EAAQhD,EAAQ7H,GACnC,GAAI4G,GAMC,GAAGA,EACN,IAAI,MAAOuE,EAAeC,KAAeF,EAAY,CACnD,MAAMG,EAAO,CAACL,EAAMG,GAAezG,KAAK,KACxCoG,EAAenL,KAAK,CAAC0L,EAAMD,GACrC,OATQ,IAAI,MAAMA,KAAcF,EAAY,CAClC,MAAMG,EAAO,CAACL,EAAMI,GAAY1G,KAAK,KACrCoG,EAAenL,KAAK0L,EAC9B,CAQA,CAEE,OAAOP,CACT,CAEA,MAAMQ,EAAY,CAChBC,WAAW,EACXC,oBAAqB,IACrBlC,kBAAkB,EAClBC,QAAS,CAAClC,EAAQ5B,OAAQ4B,EAAQJ,KAClCuC,eAAgB,CAACjB,EAAe9C,OAAQ8C,EAAetB,MAEzD,SAASwE,IACP,MAAOlE,EAAStC,EAAOgF,GAAY,IAAIlG,WACjC/D,EAAUyF,OAAO2B,OAAQ,CAAA,EAAIkE,EAAWrB,GACxCV,EAAU,IAAIf,EAAQxI,EAAQuJ,QAASvJ,EAAQwJ,gBACrD,QAAahD,IAAVvB,EAAuB,OAAOsE,EAAQR,KAAKxB,EAASvH,GACvD,MAAMoF,EAAWJ,EAAUC,EAAOjF,EAAQsJ,kBAC1C,GAAItJ,EAAQuL,UAYP,CACH,MAAMG,EAAa,GACbZ,EAAiBD,EAAQtD,EAAS9B,OAAO2B,OAAO,CAAE,EAAEpH,EAAS,CAAE4G,QAAQ,KACvE+E,EAAsB/H,EAASqB,EAAO,CAAEzE,UAAW,MACzD,IAAI,MAAOoL,EAAeC,KAAmBf,EAAgB,EAElC,IADCa,EAAoBC,IACbF,EAAW/L,KAAK,CAACiM,EAAeC,GACvE,CACI,OAAOH,CACX,CArByB,CACrB,IAAII,EAAYvE,EAChBwE,EACA,IAAI,MAAMC,KAAY5G,EACpB,IAEE,GADA0G,EAAYvC,EAAQR,KAAK+C,EAAWE,QACnBxF,IAAdsF,EAA2B,MAAMC,CAC5C,CACM,MAAME,GAAQ,MAAMF,CAAe,CAErC,OAAOD,CACX,CAWA,CAEA,MAAMI,EAAY,CAAEC,QAAQ,GAC5B,SAASC,EAAYtE,EAASmC,GAC5B,MAAMjK,EAAUyF,OAAO2B,OAAO,CAAA,EAAI8E,EAAWjC,GAC7C,IAAImC,EACJ,MAAMC,EAAe9G,EAAOuC,GAC5B,GAAoB,UAAjBuE,EAA4BD,GAAc,OACxC,GACc,WAAjBC,GACAvE,EAAQtJ,QAAU,GAClB2H,OAAOmG,UAAUxE,EAAQtJ,QAEzB,IAAsB,IAAnBwB,EAAQmM,OACTC,GAAc,MAEX,CACHG,EACA,IAAI,MAAMvE,KAAc+B,EAASjC,EAAS,OAAQ,CAChD+B,eAAe,EAAMC,SAAS,IAC7B0C,UAAW,CAEZ,GADkBrG,OAAO6B,KACRF,EAAQtJ,OAAS,EAAG,CACnC4N,GAAc,EACd,MAAMG,CAChB,CACA,MACyB/F,IAAhB4F,IAA6BA,GAAc,EACpD,MAESA,GAAc,EACrB,OAAOA,CACT,CAEA,MAAMK,EAAY,CAAEN,QAAQ,GAC5B,SAASO,EAAU5E,EAASmC,GAC1B,MAAMjK,EAAUyF,OAAO2B,OAAO,CAAA,EAAIqF,EAAWxC,GAC7C,IAAIyC,EACJ,MAAML,EAAe9G,EAAOuC,GAC5B,GAAoB,QAAjBuE,EAA0BK,GAAY,OACpC,GACc,WAAjBL,GACAvE,EAAQ6E,MAAQ,GAChBxG,OAAOmG,UAAUxE,EAAQ6E,MAEzB,IAAsB,IAAnB3M,EAAQmM,OACTO,GAAY,MAET,CACHE,EACA,IAAI,MAAMC,KAAiB9C,EAASjC,EAAS,UAAW,CACtD+B,eAAe,EAAMC,SAAS,IAC5B,CACF,IACEsC,EAAYS,EAAe7M,IACF,IAAzB6M,EAAcrO,OAEX,CACHkO,GAAY,EACZ,MAAME,CAChB,CAJYF,GAAY,CAKxB,MACuBlG,IAAdkG,IAA2BA,GAAY,EAChD,MAESA,GAAY,EACnB,OAAOA,CACT,CAEA,SAASI,EAAmBhF,GAC1B,MAAMuE,EAAe9G,EAAOuC,GAC5B,GAAoB,WAAjBuE,EAA2B,CAC5B,MAAM/L,EAASwH,EAAQhC,cACvB,GAAc,WAAXxF,EAAuB,OAAOmF,SAC5B,GAAc,UAAXnF,EAAsB,OAAOuD,QAChC,GAAc,QAAXvD,EAAoB,OAAO,IAAI2G,GAE3C,KACQ,CACJ,GAAoB,WAAjBoF,EAA6B,OAAO5G,SAClC,GAAG2G,EAAYtE,EAAS,CAAEqE,QAAQ,IAAW,OAAOtI,QACpD,GAAG6I,EAAU5E,EAAS,CAAEqE,QAAQ,IAAW,OAAO,IAAIlF,GAE/D,CACA,CAEA,MAAM8F,EAAY,CAChBxB,WAAW,EACXC,oBAAqB,IACrBlC,kBAAkB,EAClBC,QAAS,CAAClC,EAAQ5B,OAAQ4B,EAAQJ,KAClC+F,QAAS,CAACrF,EAAQlC,OAAQkC,EAAQV,KAClCuC,eAAgB,CAACjB,EAAe9C,OAAQ8C,EAAetB,MAEzD,SAASgG,IACP,MAAM3F,EAAa,IAAIvD,YAChBwD,EAAStC,EAAO4C,EAAQoC,GAAY3C,EACrCtH,EAAUyF,OAAO2B,OAAO,CAAA,EAAI2F,EAAW9C,GACvCV,EAAU,IAAIf,EAAQxI,EAAQuJ,QAASvJ,EAAQwJ,gBAC/CwD,EAAU,IAAIxE,EAAQxI,EAAQgN,QAAShN,EAAQwJ,gBACrD,GAAIxJ,EAAQuL,UAsBP,CACH,MAAMG,EAAa,GACbZ,EAAiBD,EAAQtD,EAAS9B,OAAO2B,OAAO,CAAE,EAAEpH,EAAS,CAAE4G,QAAQ,KACvE+E,EAAsB/H,EAASqB,EAAO,CAAEzE,UAAW,MACzD,IAAI,MAAOoL,EAAeC,KAAmBf,EAAgB,EAElC,IADCa,EAAoBC,EAAe,CAAEpL,UAAW,QAExEyM,EAAY1F,EAASqE,EAAe/D,EAAQ,CAC1C0D,WAAW,EAAOjC,iBAAkBtJ,EAAQsJ,mBAE9CoC,EAAW/L,KAAK,CAACiM,EAAe/D,IAExC,CACI,OAAO6D,CACX,CAnCI,GAA6B,WAA1BnG,EAAO+B,EAAW,IAAkB,CACrC,MAAMsC,WAAEA,EAAUC,cAAEA,GAAkB7J,EACtCuJ,EAAQR,KAAKxB,GACb,MAAMnC,EAAWJ,EAAUC,EAAOjF,EAAQsJ,kBACpC4D,EAAM9H,EAASjC,MACrB,IAAI2I,EAAYvE,EAChBwE,EACA,IAAI,MAAMC,KAAY5G,EAIpB,GAHA0G,EAAYvC,EAAQR,KAAK+C,EAAWE,EAAUhM,IAAYgN,EAAQjE,KAChE+C,EAAWE,EAAU1B,MAAM0B,GAAY,CAAA,EAAK,SAE7BxF,IAAdsF,EAA2B,MAAMC,EAGtC,OADAiB,EAAQjE,KAAK+C,EAAWoB,EAAKrF,EAAQ7H,GAC9BuH,CACb,CACS,CACH,MAAOA,EAASM,GAAUP,EAC1B,OAAOC,CACb,CAiBA,CAEA,MAAM4F,EAAY,CAChB5B,WAAW,EACX6B,aAAc,IACd9D,kBAAkB,EAClB+D,SAAU,CAAChF,EAAS5C,OAAQ4C,EAASpB,KACrCuC,eAAgB,CAACjB,EAAe9C,OAAQ8C,EAAetB,MAEzD,SAASqG,EAAe/F,EAAStC,EAAOgF,GACtC,MAAMjK,EAAUyF,OAAO2B,OAAQ,CAAA,EAAI+F,EAAWlD,GACxCoD,EAAW,IAAI7E,EAAQxI,EAAQqN,SAAUrN,EAAQwJ,gBACvD,GAAIxJ,EAAQuL,UAMP,CACH,MAAMG,EAAa,GACbZ,EAAiBD,EAAQtD,EAAS9B,OAAO2B,OAAO,CAAE,EAAEpH,EAAS,CAAE4G,QAAQ,KACvE+E,EAAsB/H,EAASqB,EAAO,CAAEzE,UAAW,MACzD,IAAI,MAAOoL,EAAeC,KAAmBf,EAAgB,EAElC,IADCa,EAAoBC,EAAe,CAAEpL,UAAW,QAExE8M,EAAe/F,EAASqE,EAAe,CACrCL,WAAW,EAAOjC,iBAAkBtJ,EAAQsJ,mBAE9CoC,EAAW/L,KAAK,CAACiM,OAAepF,IAExC,CACI,OAAOkF,CACX,CApByB,CACrB,MAAMtG,EAAWJ,EAAUC,EAAOjF,EAAQsJ,kBACpC4D,EAAM9H,EAASjC,MACf2I,EAAYL,EAAYlE,EAASnC,EAASV,KAAK,KAAM1E,IAAYuH,EACvE8F,EAAStE,KAAK+C,EAAWoB,EAC7B,CAgBA,CAEA,MAAMK,EAAiB,CAAC,SAAU,YAClC,SAASC,EAAO1F,EAAS7C,EAAOgF,EAAW,CAAA,GACzC,MAAMjK,EAAUyF,OAAO2B,OAAO,CAAA,EAAI6C,GAC5BwD,EAAalI,EAAON,GACpBoH,EAAe9G,EAAOuC,GAC5B,IACGyF,EAAe3F,SAAS6F,KACxBvG,EAAWU,SAASyE,GACnB,OAAOvE,EACX,IAAI4F,EAASZ,EAAmBhF,GAChC,IAAI,MAAOE,EAAYC,KAAiB8B,EACtCjC,EAAS,UAAWrC,OAAO2B,OAAO,CAAE,EAAEpH,EAAS,CAAE8J,SAAS,KACzD,CACD,MAAM6D,EACJzG,EAAWU,SAASrC,EAAO0C,IACzBuF,EAAOvF,EAAchD,EAAOjF,GAAWiI,EACxCwF,IAAeF,EAAe,GAC/BG,EAAO1F,GAAciF,EAAY,CAAE,EAAEhI,EAAO0I,EAAa3N,GAEnDyN,IAAeF,EAAe,KACpCG,EAAO1F,GAAc/C,EAAM0I,GAEjC,CACE,OAAOD,CACT,CAEA,MAAME,EAAY,CAChBnE,UAAW,GACXF,QAAS,CAAClC,EAAQ5B,OAAQ4B,EAAQJ,KAClCuC,eAAgB,CAACjB,EAAe9C,OAAQ8C,EAAetB,KACvDyC,MAAO,EAAGC,SAAU,IAEtB,SAASkE,EAAO/F,EAASN,EAAWyC,EAAW,CAAA,GAC7C,MAAMjK,EAAUyF,OAAO2B,OAAO,CAAA,EAAIwG,EAAW3D,EAAU,CACrDR,UAAWhE,OAAO2B,OAAO,GAAI6C,EAASR,cAElCA,UAAEA,EAAS7C,OAAEA,GAAW5G,EAC9B,GAAGA,EAAQ0J,MAAQ1J,EAAQ2J,SAAY,OAAgB3J,EAAQ0J,QAC/D,MAAMpJ,EAAS,IAAIkI,EAAQxI,EAAQuJ,QAASvJ,EAAQwJ,gBAAgBT,KAAKjB,GACrE2B,EAAU7B,SAAStH,IAAWmJ,EAAUU,QAAQ7J,GACpD,MAAMwN,EAAiBvI,EAAOiC,GAC9B,IAAIkG,EAASZ,EAAmBhF,GAChC,IAAI,MAAOE,EAAYC,KAAiB8B,EACtCjC,EAAS,UAAWrC,OAAO2B,OAAO,CAAE,EAAEpH,EAAS,CAAE8J,SAAS,KAEpC,WAAnBgE,EAA+BJ,EAAO1F,GAAcyD,EAAYxD,EAAcT,GACtD,aAAnBsG,IAAiCJ,EAAO1F,GAAcR,EAAUS,IACrEyF,EAAO1F,IAA6C,iBAAvB0F,EAAO1F,KACrC0F,EAAO1F,GAAc6F,EAAOH,EAAO1F,GAAaR,IAGpD,OAAOkG,CACT,CAEA,MAAMK,EAAY,CAChBf,QAAS,CAACrF,EAAQlC,OAAQkC,EAAQV,MAEpC,SAAS+G,EAAUlG,EAASmC,GAC1B,MAAMjK,EAAUyF,OAAO2B,OAAO,CAAA,EAAI2G,EAAW9D,GAEvCc,EACa,WAFCxF,EAAOuC,GAGvBiC,EAASjC,EAAS,UAAW9H,GAAW8H,EAC5C,IAAIiD,EAAiB,OACrB,MAAM2C,EAAUpD,MAAMS,EAAc,GAAG,IAAO,CAAA,EAAK,GACnD,IAAI,MAAOa,EAAeC,KAAmBd,EAC3CkC,EAAYS,EAAQ9B,EAAeC,EAAgB7L,GAErD,OAAO0N,CACT,CAEA,MAAMO,EAAY,CAChB1E,QAAS,CAAClC,EAAQ5B,OAAQ4B,EAAQJ,KAClC+F,QAAS,CAACrF,EAAQlC,OAAQkC,EAAQV,KAClCuC,eAAgB,CAACjB,EAAe9C,OAAQ8C,EAAetB,MAEzD,SAASiH,EAAc3G,EAASyC,KAAUmE,GACxC,IAAI5G,EAAW,OAAOA,EACtB,MAAMvH,EAAUyF,OAAO2B,OAAO,CAAA,EAAI6G,GAC5B1E,EAAU,IAAIf,EAAQxI,EAAQuJ,QAASvJ,EAAQwJ,gBAC/CwD,EAAU,IAAIxE,EAAQxI,EAAQgN,QAAShN,EAAQwJ,gBAC/C4E,EAAe7I,EAAOgC,GAC5B8G,EACA,IAAI,MAAMvG,KAAWqG,EAAU,CAC7B,IAAIjH,EAAWU,SAASrC,EAAOuC,IAAW,SAASuG,EACnD,MAAMtD,EAAgBhB,EAASjC,EAAS,UAAW,CACjDgC,SAAS,IAEX,IAAI,MAAOwE,EAAoBC,KAAyBxD,EAAe,CACrE,MAAMyD,EAAsBjF,EAAQR,KAAKxB,EAAS+G,GAC5CG,EAA4BlJ,EAAOiJ,GACnCE,EAA4BnJ,EAAOgJ,GACrB,UAAjBH,GAAsC,iBAAVpE,EAC7BgD,EAAQjE,KAAKxB,EAASA,EAAQ/I,OAAQ+P,GAGtCrH,EAAWU,SAAS8G,IACpBxH,EAAWU,SAAS6G,GAEpBP,EAAcM,EAAqBxE,EAAOuE,GAG1CvB,EAAQjE,KAAKxB,EAAS+G,EAAoBC,EAElD,CACA,CACA,CAEA,IAAInH,EAAS,CAACG,KAAY4G,IAAaD,EAAc3G,EAAS,YAAa4G,GAEvEQ,EAAe,CAACpH,KAAY4G,IAAaD,EAAc3G,EAAS,kBAAmB4G,GAEvF,MAAMS,EAAY,CAAEC,cAAc,GAClC,SAASC,EAAevH,EAAS8C,EAAc0E,EAAqB9E,GAClE,MAAMM,EAAqB9E,OAAO2B,OAAO,CAAA,EAAI2H,GAC7C,IAAIC,EAA0BzE,EAAmBvB,MACjD,MAAMhJ,EAAUyF,OAAO2B,OAAO,CAAA,EAAIwH,EAAW3E,GACvCgF,EAAgC1J,EAAOgF,EAAmBvB,OAC1DwF,EAAsBjH,EAAQ8C,GAC9BoE,EAA4BlJ,EAAOiJ,GACzC,GAAGtH,EAAWU,SAASqH,GACrB,GAAG/H,EAAWU,SAAS6G,GACrBlE,EAAmBvB,MAAQH,EAAiB2F,EAAqBQ,EAAyBhP,OAEvF,CACH,MAAMkP,EAAsBpC,EAAmBV,EAC7C3G,OAAOoD,iBAAiB,CAAA,EAAImG,IAC1B,QAAU,UACdzE,EAAmBvB,MAAQH,EAAiBqG,EAAqBF,EAAyBhP,EAChG,MAGIA,EAAQ6O,mBACwDrI,IAAhEf,OAAO+E,yBAAyBD,EAAoB,UACnD,CAAC,aAAyB3C,SAASqH,KAEpC1E,EAAmBvB,MAAQ,IAAIjD,EAAWwE,EAAmB4E,MAAMH,IAKrE,OAHAvJ,OAAOqJ,eAAevH,EAAS8C,EAAcE,GAC1CwE,EAAoBK,QAAU3J,OAAO4J,KAAK9H,EAAQ8C,IAClD0E,EAAoBO,QAAU7J,OAAO8J,OAAOhI,EAAQ8C,IAChD9C,CACT,CAEA,SAASsB,EAAiBtB,EAASiI,EAAsBvF,GACvD,IAAI,MAAOI,EAAc0E,KAAwBtJ,OAAOyC,QAAQsH,GAC9DV,EAAevH,EAAS8C,EAAc0E,EAAqB9E,GAE7D,OAAO1C,CACT,CAEA,MAAMkI,EAAY,CAChBlG,QAAS,CAAClC,EAAQ5B,OAAQ4B,EAAQJ,KAClCuC,eAAgB,CAACjB,EAAe9C,OAAQ8C,EAAetB,KACvDwC,UAAW,GACXC,MAAO,EAAGC,SAAU,IAEtB,SAAS4F,EAAOhI,EAAS0C,EAAW,IAClC,MAAMjK,EAAUyF,OAAO2B,OAAO,CAAA,EAAIqI,EAAWxF,EAAU,CACrDR,UAAWhE,OAAO2B,OAAO,GAAI6C,EAASR,cAElCA,UAAEA,EAAS7C,OAAEA,GAAW5G,EAC9B,GAAGA,EAAQ0J,MAAQ1J,EAAQ2J,SAAY,OAAgB3J,EAAQ0J,QAC/D,MAAMgE,EAAS,IAAIlF,EAAQxI,EAAQuJ,QAASvJ,EAAQwJ,gBAAgBT,KAAKxB,GACrEkC,EAAU7B,SAAS8F,IAAWjE,EAAUU,QAAQuD,GACpD,MAAMgC,EAAiB3F,EAASxC,EAAS,UAAW9B,OAAO2B,OAAOpH,EAAS,CACzE8J,SAAS,KAGX,IAAI,MAAOO,EAAcwB,KAAmB6D,EACvCjG,EAAU7B,SAASiE,IACd3E,EAAWU,SAASrC,EAAOsG,KACjC0D,EAAO1D,EAAgB7L,GAG3B,OAAOyF,OAAO8J,OAAOhI,EACvB,CAEA,MAAMoI,EAAY,CAChBpG,QAAS,CAAClC,EAAQ5B,OAAQ4B,EAAQJ,KAClCuC,eAAgB,CAACjB,EAAe9C,OAAQ8C,EAAetB,KACvDwC,UAAW,GACXC,MAAO,EAAGC,SAAU,IAEtB,SAAS0F,GAAK9H,EAAS0C,EAAW,IAChC,MAAMjK,EAAUyF,OAAO2B,OAAO,CAAA,EAAIuI,EAAW1F,EAAU,CACrDR,UAAWhE,OAAO2B,OAAO,GAAI6C,EAASR,cAElCA,UAAEA,EAAS7C,OAAEA,GAAW5G,EAC9B,GAAGA,EAAQ0J,MAAQ1J,EAAQ2J,SAAY,OAAgB3J,EAAQ0J,QAC/D,MAAMgE,EAAS,IAAIlF,EAAQxI,EAAQuJ,QAASvJ,EAAQwJ,gBAAgBT,KAAKxB,GACrEkC,EAAU7B,SAAS8F,IAAWjE,EAAUU,QAAQuD,GACpD,MAAMgC,EAAiB3F,EAASxC,EAAS,UAAW9B,OAAO2B,OAAOpH,EAAS,CACzE8J,SAAS,KAGX,IAAI,MAAOO,EAAcwB,KAAmB6D,EACvCjG,EAAU7B,SAASiE,IACd3E,EAAWU,SAASrC,EAAOsG,KACjCwD,GAAKxD,EAAgB7L,GAGzB,OAAOyF,OAAO4J,KAAK9H,EACrB,CAEA,IAAIZ,GAAO,CAACY,EAAS0C,IAAaF,EAASxC,EAAS,OAAQ0C,GAExDrD,GAAS,CAACW,EAAS0C,IAAaF,EAASxC,EAAS,SAAU0C,GAE5D/B,GAAU,CAACX,EAAS0C,IAAaF,EAASxC,EAAS,UAAW0C,GAElE,MAAM2F,GAAY,CAChBrG,QAAS,CAAClC,EAAQ5B,OAAQ4B,EAAQJ,KAClCuC,eAAgB,CAACjB,EAAe9C,OAAQ8C,EAAetB,KACvD4I,UAAW,IACXnG,MAAO,EACPE,YAAY,EACZ0F,QAAQ,EACR3F,SAAU,GACVE,eAAe,EACfwB,MAAM,EACNvB,SAAS,EACTc,YAAa,WACbwE,QAAQ,EACRD,MAAM,GAER,SAAS3E,GAAyB1C,EAASuC,EAAcJ,EAAW,CAAA,GAClE,MAAMjK,EAAUyF,OAAO2B,OAAO,CAAA,EAAIwI,GAAW3F,EAAU,CACrDR,UAAWhE,OAAO2B,OAAO,GAAI6C,EAASR,aAExC,GAAGzJ,EAAQ0J,OAAS1J,EAAQ2J,SAAY,OACjC3J,EAAQ0J,QACX1J,EAAQyJ,UAAU7B,SAASE,IAAY9H,EAAQyJ,UAAUU,QAAQrC,GACrE,MACMgI,EADU,IAAItH,EAAQxI,EAAQuJ,QAASvJ,EAAQwJ,gBACvBT,KAAKjB,EAASuC,GAC5C,QAAqB7D,IAAlBsJ,EAA6B,CAC9B,GAAG5I,EAAWU,SAASrC,EAAOuK,IAAiB,CAC7C,GAAG9P,EAAQyJ,UAAU7B,SAASkI,GAAkB,OACzC9P,EAAQyJ,UAAUU,QAAQ2F,EACvC,CACI,MACMvF,EAAuC,QADxBhF,EAAOuC,GAExBrC,OAAO+E,yBAAyB1C,EAASuC,GACzC,CAAE0F,cAAc,EAAOnG,YAAY,EAAMZ,MAAO8G,EAAc,GAAIE,UAAU,GAChF,IAAIhQ,EAAQ6J,gBAAkBU,EAAmBX,WAAc,OAgB/D,OAfG5J,EAAQqL,OACTrL,EAAQqL,KACmB,WAAzB9F,EAAOvF,EAAQqL,MACb,CAACrL,EAAQqL,KAAMhB,GAAc3F,KAAK1E,EAAQ6P,WAAaxF,EAC3DE,EAAmBc,KAAOrL,EAAQqL,MAEjCrL,EAAQmP,OAAQ5E,EAAmB4E,KAAO5J,EAAOuK,IACjD9P,EAAQsP,SAAU/E,EAAmB+E,OAAS7J,OAAOwK,SAASH,IAC9D9P,EAAQoP,SAAU7E,EAAmB6E,OAAS3J,OAAOyK,SAASJ,IAC9D9P,EAAQ8J,SAAW5C,EAAWU,SAASrC,EAAOuK,IAC/CvF,EAAmBvB,MAAQmH,GAA0BL,EAAe9P,GAGpEuK,EAAmBvB,MAAQ8G,EAEtBvF,CACX,CACA,CAEA,SAAS4F,GAA0BrI,EAASmC,EAAW,IACrD,MAAMjK,EAAUyF,OAAO2B,OAAO,CAAA,EAAI6C,GAC5BmG,EAAsB,CAAE,EACxB/D,EAAe9G,EAAOuC,GACtBsC,EAA0B,CAAC,QAAS,UAAUxC,SAASyE,GACzD5G,OAAOkB,KAAKlB,OAAO0K,0BAA0BrI,IAC5B,OAAhBuE,EACDxI,MAAMwM,KAAKvI,EAAQnB,QACnB,GACJ,IAAI,MAAM0D,KAAgBD,EAAwB,CAChD,MAAMG,EAAqBC,GAAyB1C,EAASuC,EAAcrK,GACxEuK,IACD6F,EAAoB/F,GAAgBE,EAE1C,CACE,OAAO6F,CACT,CAIA,SAASE,GAAQxI,EAASmC,EAAW,IAEnC,GAA2B,aADXxE,OAAO2B,OAAO,CAAA,EAAI6C,GACvBW,YAA8B,OAAO9C,EAG9C,OAAOe,EADQiE,EAAmBvH,EAAOuC,IACTqI,GAA0BrI,EAASmC,GAEvE,CAEA,MAAMsG,GAAU,CAAEC,MAAO,EAAGC,SAAU,KAAM7F,YAAa,SAAUf,eAAe,GAClF,SAASlE,GAASmC,EAASmC,GACzB,MAAMjK,EAAUyF,OAAO2B,OAAO,CAAA,EAAImJ,GAAStG,GAC3C,OAAOyG,KAAKC,UACVL,GAAQxI,EAAS9H,GAAUA,EAAQyQ,SAAUzQ,EAAQwQ,MAEzD,CAEuBzJ,YC3zCR,MAAM6J,GACnBC,GACAC,IAAU,EACVC,GAAkB,GAClBC,GAAY,GACZC,GACAC,GACAC,GACA,WAAA1I,CAAY2I,EAAWC,GACrB,IAAID,IAAcC,EAAY,OAAOvI,KACrC,MAAMwI,ECXK,EAACF,EAAY,CAAA,KAC1B,MAAMG,EAAW,CACfT,QAAQ,EACR1J,OAAQ,mBAAoBoK,SAAU,sBAAuBC,UAAW,gBACxEC,cAAc,EACdC,UAAU,EACVC,SAAU,SACVrG,WAAW,EACXsG,QAAS,CACPzK,OAAQ,CACN0K,iBAAkB,SAA0BC,EAAkBxK,GAC5D,MAAM4H,KAAEA,EAAI6C,SAAEA,EAAQV,SAAEA,GAAaS,GAC/B/R,QAAEA,EAAOiS,WAAEA,GAAeX,EAChC,OAAO/J,EAA0B,iBAAE4H,EAAM6C,EAAUhS,GAAWiS,EAC/D,EACDC,GAAI,SAAYH,EAAkBxK,GAChC,MAAM4H,KAAEA,EAAI6C,SAAEA,GAAaD,EAC3B,OAAOxK,EAAY,GAAE4H,EAAM6C,EAC5B,EACDG,KAAM,SAAcJ,EAAkBxK,GACpC,MAAM4H,KAAEA,EAAI6C,SAAEA,GAAaD,EAC3B,OAAOxK,EAAc,KAAE4H,EAAM6C,EAC9B,GAEHR,SAAU,CACRY,oBAAqB,SAA6BL,EAAkBxK,GAClE,MAAM4H,KAAEA,EAAI6C,SAAEA,EAAQV,SAAEA,GAAaS,GAC/B/R,QAAEA,EAAOiS,WAAEA,GAAeX,EAChC,OAAO/J,EAA6B,oBAAE4H,EAAM6C,EAAUhS,GAAWiS,EAClE,EACDI,IAAK,SAAaN,EAAkBxK,GAClC,MAAM4H,KAAEA,EAAI6C,SAAEA,GAAaD,EAC3B,OAAOxK,EAAa,IAAE4H,EAAM6C,EAC7B,GAEHP,UAAW,CACTa,cAAe,SAAuBP,EAAkBxK,EAASgL,GAC/D,OAAOhL,EAAuB,cAAEgL,EACjC,EACDC,KAAM,SAAcT,EAAkBxK,EAASyC,KAAU1C,GACvD,OAAOC,EAAc,KAAEyC,KAAU1C,EAClC,KAIP,IAAI,MAAOmL,EAAaC,KAAkBjN,OAAOyC,QAAQkJ,GACvD,OAAOqB,GACL,IAAK,UACHlB,EAASkB,GAAerL,EAAOmK,EAASkB,GAAcC,GACtD,MACF,IAAK,eAAgB,MACrB,QACEnB,EAASkB,GAAeC,EAI9B,OAAOnB,GD7CYA,CAASH,GAI1B3L,OAAOoD,iBAAiBC,KAAM,CAC5BwI,SAAY,CAAEtI,MAAOsI,GACrBjG,KAAQ,CAAErC,MAAOsI,EAASjG,MAC1B8D,KAAQ,CAAEnG,MAAOsI,EAASnC,MAC1BwD,SAAY,CAAE3J,MAPC,IAQf4J,WAAc,CAAE5J,MAPC,IAQjB6J,YAAe,CAAE7J,MAPC,IAQlBgJ,SAAa,CAAEjC,cAAc,EAAM,GAAArI,GAEjC,IAAIsK,EACJ,GAAsB,WAFCzM,EAAO+L,EAASU,UAEP,CAC9B,IAAIc,EAAiBzB,EACrB0B,EACA,IAAI,MAAMC,KAAY1B,EAASU,SAAS9Q,MAAM,KAAM,CAElD,QAAasF,IADCsM,EAAeE,GAEtB,MAAMD,EADaD,EAAiBA,EAAeE,EAEtE,CACwC,aAA3BzN,EAAOuN,KACRd,EAAWc,EAEvB,MACed,EAAWV,EAASU,SAK3B,OAJ6B,IAA1BV,EAASI,eACVM,EAAWA,EAASjN,KAAK+D,MAAK+H,IAEhCpL,OAAOqJ,eAAehG,KAAM,WAAY,CAAEE,MAAOgJ,IAC1CA,CACR,KAEHlJ,MAAK+H,EAAWQ,EAChBvI,KAAKgI,OAAShI,KAAKwI,SAASR,MAChC,CACE,UAAIA,GAAW,OAAOhI,MAAKgI,CAAO,CAClC,UAAIA,CAAOmC,GACT,MAAMC,EAAUpK,MAAKoK,EACfP,EAAW7J,KAAK6J,SAChBC,EAAa9J,KAAK8J,WACxBD,EAASnU,OAAS,EAClBoU,EAAWpU,OAAS,EAEpB,IAAI,MAAM2U,KAAkBD,EAAS,CACnC,MAAM7H,KAAEA,EAAIqC,OAAEA,EAAMoD,OAAEA,GAAWqC,EAChBrK,KAAKwI,SACtB,GAAGR,IAAWmC,EACd,IAAe,IAAZA,EACD,IACEnK,MAAK1B,EAAQsG,GACbyF,EAAerC,OAASmC,EACxBN,EAAShT,KAAKwT,EAExB,CACQ,MAAMlH,GAAWnD,KAAKwI,SAASK,UAAYyB,QAAQC,MAAMpH,EAAO,MAE7D,IAAe,IAAZgH,EACN,IACEnK,MAAK0I,EAAU9D,GACfyF,EAAerC,OAASmC,EACxBL,EAAWjT,KAAKwT,EAC1B,CACQ,MAAMlH,GAAWnD,KAAKwI,SAASK,UAAYyB,QAAQC,MAAMpH,EAAO,CAExE,CACInD,MAAKgI,EAAUmC,CACnB,CACE,KAAIvF,GAAY,OAAO5E,KAAKwI,SAAS5D,MAAM,CAC3C,KAAIwF,GACF,MAAMI,EAAaxK,MAAKkI,EAClBkC,EAAU,GAChB,GAAGpK,MAAK4E,EACN,IAAI,MAAMnG,IAAW,GAAGgM,OAAOzK,MAAK4E,GAAU,CAC5C,MAAM8F,EAAmBF,EAAWG,MACjCC,GAAeA,GAAYrI,OAASvC,KAAKuC,YAEpB7E,IAArBgN,EACDN,EAAQvT,KAAK6T,QAEchN,IAArBgN,GAAkCN,EAAQvT,KAAK,CACnD0L,KAAMvC,KAAKuC,KACXqC,OAAQnG,EACRuJ,QAAQ,GAGpB,MAES,GAAyB,WAAtBvL,EAAOuD,KAAKuC,MAAoB,CACtC,MAAMsI,EAAc,GACpB,GAAG7K,KAAKwI,SAAS/F,UAAW,CAC1BoI,EAAYhU,QAAQ+H,EAAIoB,MAAK+H,EAAU/H,KAAKuC,KAAM,CAChDxB,eAAe,EAAM0B,WAAW,KAEP,MAAxBzC,KAAKuC,KAAKuI,OAAO,IAClBD,EAAYxJ,QAAQ,CAACrB,MAAK8I,EAAW9I,MAAK+H,IAG5C,IAAI,MAAOgD,EAAaC,KAAiBH,EAAa,CACpD,MAAMH,EAAmBF,EAAWG,MACjCC,GAAeA,EAAWrI,OAASwI,IAEtC,IACIE,EADArG,EAASoG,OAECtN,IAAXkH,IACEA,IAAW8F,GAAkB9F,OAC9BqG,EAAgBP,EAEQ,iBAAX9F,IACbqG,EAAgB,CACd1I,KAAMwI,EACNnG,OAAQA,EACRoD,QAAQ,UAIOtK,IAAlBuN,GAA+Bb,EAAQvT,KAAKoU,EACzD,CACA,CACM,GAAGjL,KAAKuC,OAASvC,MAAK8I,EAAW,CAC/B,MAAMmC,EAAgB,CACpB1I,KAAMvC,KAAKuC,KACXqC,OAAQ5E,MAAK+H,EACbC,QAAQ,GAEVoC,EAAQvT,KAAKoU,EACrB,CACA,CAEI,OADAjL,MAAKkI,EAAYkC,EACVpK,MAAKkI,CAChB,CACE,KAAIY,GAAc,OAAO9I,KAAKwI,SAASM,QAAQ,CAC/C,KAAIxK,GACF,YAAqBZ,IAAlBsC,MAAKmI,IACRnI,MAAKmI,EAAWnI,KAAKwI,SAASO,QAAQzK,OAAO0B,KAAKwI,SAASlK,QAAQrC,KAAK,KAAM+D,OADrCA,MAAKmI,CAGlD,CACE,KAAIO,GACF,YAAuBhL,IAApBsC,MAAKoI,IACRpI,MAAKoI,EAAapI,KAAKwI,SAASO,QAAQL,SAAS1I,KAAKwI,SAASE,UAAUzM,KAAK,KAAM+D,OADzCA,MAAKoI,CAGpD,CACE,KAAIO,GACF,YAAwBjL,IAArBsC,MAAKqI,IACRrI,MAAKqI,EAAcrI,KAAKwI,SAASO,QAAQJ,UAAU3I,KAAKwI,SAASG,WAAW1M,KAAK,KAAM+D,OAD3CA,MAAKqI,CAGrD,CACE,IAAAqB,GACE,MAAMU,EAAUpK,MAAKoK,EACfL,EAAc/J,KAAK+J,YACnB9B,EAAiBjI,MAAKiI,EAC5B8B,EAAYrU,OAAS,EACrBuS,EAAevS,OAAS,EAExB,IAAI,MAAM2U,KAAkBD,EAAS,CACnC,MAAMxF,OAAEA,GAAWyF,EACnB,IACErK,MAAK2I,EAAW/D,KAAW3J,WAC3B8O,EAAYlT,KAAKwT,EACzB,CACM,MAAMlH,GAAQ8E,EAAepR,KAAKwT,EAAe,CACvD,CACI,OAAOrK,IACX,EE5Ke,MAAMkL,WAAajN,YAChCkN,iBAAmB,SAAU1M,EAAS6J,GACpC,IAAI7J,IAAY6J,EAAa,OAC7B,MAAME,ECPK,EAACF,EAAY,CAAA,KAC1B,MAAMG,EAAW,CACf2C,OAAQ,CAAE,EACVC,cAAc,EACdtJ,QAAS,CACP+G,SAAU,SACVjI,SAAU,IAEZyK,oBAAqB,CACnBC,UAAW,YACXC,UAAW,YACXC,aAAc,eACdJ,aAAc,eACdK,cAAe,gBACfC,eAAgB,iBAChBC,WAAY,eAIhB,IAAI,MAAOjC,EAAaC,KAAkBjN,OAAOyC,QAAQkJ,GACvD,OAAOqB,GACL,IAAK,sBACL,IAAK,UACHlB,EAASkB,GAAehN,OAAO2B,OAAOmK,EAASkB,GAAcC,GAC7D,MACF,QACEnB,EAASkB,GAAeC,EAI9B,OAAOnB,GDvBYA,CAASH,GACpB8C,EAAS,GAuHf,OAtHAzO,OAAOoD,iBAAiBtB,EAAS,CAC/B,CAAC+J,EAAS8C,oBAAoBC,WAAY,CACxCzK,YAAY,EAAOoG,UAAU,EAC7BhH,MAAO,WACL,IAAIjF,UAAU,GAAM,OAAOmQ,EAC3B,MAAMG,EAAY,GACZM,EAAgB,GAAGpB,OAAOxP,UAAU,IAE1C,IAAI,MAAM6Q,KAAgBD,EAExB,IAAI,MAAMpC,KAAU2B,EAAQ,CAC1B,IAAI7R,EACJwS,EACA,IAAI,MACFC,EAAyBC,KACtBtP,OAAOyC,QAAQ0M,GAAe,CACjC,IAAII,EAWJ,GATEA,EAD6B,aAA5BF,EAECvC,EAAOjB,SAASwD,KAA6BC,EAK7CxC,EAAOuC,KAA6BC,GAG3B,IAAV1S,EACI,MAAMwS,EADSxS,EAAQ2S,CAE9C,EAC2B,IAAV3S,GAAkBgS,EAAU1U,KAAK4S,EAClD,CAEU,OAAO8B,CACjB,GAEM,CAAC/C,EAAS8C,oBAAoBE,WAAY,CACxC1K,YAAY,EAAOoG,UAAU,EAC7BhH,MAAO,WACL,IAAIjF,UAAUvF,OAAU,OAAO+I,EAC/B,IAAI0N,EEjDd,SAAsBC,EAAaC,EAAY,UAC7C,GACEtR,MAAMC,QAAQoR,SACE1O,IAAhB0O,EACE,OAAOA,EACX,MAAME,EAAa,GAEnB,IAAI,MACFC,EAAoBC,KACjB7P,OAAOyC,QAAQgN,GAAc,CAChC,MAAMK,EAAoBF,EAAmBG,OAAOtU,MAAM,KAC1D,IAAImK,EAAM8D,EAAM6C,EAAUhS,EACM,IAA7BuV,EAAkB/W,QACnB6M,EAAO8J,EACPhG,EAAOoG,EAAkB,IAEnBA,EAAkB/W,OAAS,IACjC6M,EAAOkK,EAAkB,GACzBpG,EAAOoG,EAAkB,IAExB1R,MAAMC,QAAQwR,IACftD,EAAWsD,EAAmB,GAC9BtV,EAAUsV,EAAmB,IAG7BtD,EAAWsD,EAEb,MAAMG,EAAY,CAChBtG,OACA9D,OACA2G,WACAlB,QAAQ,GAEVsE,EAAWzV,KAAK8V,EACpB,CACE,OAAOL,CACT,CFa2BM,CAAa3R,UAAU,GAAIuN,EAASzG,QAAQ+G,UACzD+D,EAAgB5R,UAAU,KAAM,EAEpC,IAAI,IAAI6R,KAAaX,EAAY,CAC/B,MAAMY,EAAQ,CAAA,EACd,IAAI,MAAMpD,IAAe,CACvB,SAAU,WAAY,YAAa,UAAW,gBAC7C,CACD,MAAMqD,EAAexE,EAASmB,QACVjM,IAAjBsP,IAA8BD,EAAMpD,GAAeqD,EACpE,CACY1O,EAAOyO,EAAOD,GACd,MAAMG,EAAkB,IAAInF,GAAgBiF,EAAOtO,GAChDoO,IAAiBI,EAAgBjF,QAAS,GAC7CoD,EAAOvU,KAAKoW,EACxB,CACU,OAAOxO,CACR,GAEH,CAAC+J,EAAS8C,oBAAoBG,cAAe,CAC3C3K,YAAY,EAAOoG,UAAU,EAC7BhH,MAAO,WACL,MAAMgN,EAAUzO,EAAQ+J,EAAS8C,oBAAoBC,WAAWtQ,UAAU,IAC1E,GAAsB,IAAnBiS,EAAQxX,OAAc,OAAO+I,EAChC,IAAI0O,EAAc/B,EAAO1V,OAAS,EAClC,KAAMyX,GAAe,GAAG,CACtB,MAAMJ,EAAQ3B,EAAO+B,GAClBD,EAAQpO,SAASiO,KAClBA,EAAM/E,QAAS,EACfoD,EAAOgC,OAAOD,EAAa,IAE7BA,GACZ,CACU,OAAO1O,CACjB,GAEM,CAAC+J,EAAS8C,oBAAoBD,cAAe,CAC3CvK,YAAY,EAAOoG,UAAU,EAC7BhH,MAAO,WACL,MAAMgN,EAAUzO,EAAQ+J,EAAS8C,oBAAoBC,WAAWtQ,UAAU,IAC1E,GAAsB,IAAnBiS,EAAQxX,OAAc,OAAO+I,EACjB,IAAI,MAAMgL,KAAUyD,EAAWzD,EAAOzB,QAAS,EAC9D,OAAOvJ,CACR,GAEH,CAAC+J,EAAS8C,oBAAoBI,eAAgB,CAC5C5K,YAAY,EAAOoG,UAAU,EAC7BhH,MAAO,WACL,MAAMgN,EAAUzO,EAAQ+J,EAAS8C,oBAAoBC,WAAWtQ,UAAU,IAC1E,GAAsB,IAAnBiS,EAAQxX,OAAc,OAAO+I,EACjB,IAAI,MAAMgL,KAAUyD,EAAWzD,EAAOzB,QAAS,EAC9D,OAAOvJ,CACR,GAEH,CAAC+J,EAAS8C,oBAAoBK,gBAAiB,CAC7C7K,YAAY,EAAOoG,UAAU,EAC7BhH,MAAO,WACL,MAAMgN,EAAUzO,EAAQ+J,EAAS8C,oBAAoBC,WAAWtQ,UAAU,IAC1E,IAAI,MAAMwO,KAAUyD,EAClBzD,EAAOzB,QAAS,EAChByB,EAAOzB,QAAS,EAElB,OAAOvJ,CACR,GAEH,CAAC+J,EAAS8C,oBAAoBM,YAAa,CACzC9K,YAAY,EAAOoG,UAAU,EAC7BhH,MAAO,SAAoB2L,KAAkBwB,GAC3C,MAAMH,EAAUzO,EAAQ+J,EAAS8C,oBAAoBC,WAAWM,GAChE,IAAI,MAAMpC,KAAUyD,EAClBzD,EAAOC,QAAQ2D,GAEjB,OAAO5O,CACR,KAGF+J,EAAS4C,QAAU3M,EAAQ+J,EAAS8C,oBAAoBE,WAAWhD,EAAS4C,SAClD,IAA1B5C,EAAS6C,cAAyB5M,EAAQ+J,EAAS8C,oBAAoBD,gBACnE5M,CACX,EACE,WAAAkB,CAAY2I,EAAY,IAEtB,OADAxI,QACOoL,GAAKoC,UAAUtN,KAAMsI,EAChC"}