{"version":3,"file":"core-plex.js","sources":["../development/coutil/pandEvents/index.js","../development/coutil/variables/index.js","../development/coutil/regularExpressions/index.js","../development/coutil/path/index.js","../development/coutil/typeOf/index.js","../development/coutil/typedObjectLiteral/index.js","../development/coutil/tree/index.js","../development/coutil/pandTree/index.js","../development/coutil/keytree/index.js","../development/coutil/pathkeyTree/index.js","../development/coutil/recursiveAssign/index.js","../development/coutil/recursiveAssignConcat/index.js","../development/core/propertyClass/states/index.js","../development/core/propertyClass/handler/index.js","../development/core/propertyClass/index.js","../node_modules/balanced-match/index.js","../node_modules/brace-expansion/index.js","../node_modules/minimatch/dist/esm/assert-valid-pattern.js","../node_modules/minimatch/dist/esm/brace-expressions.js","../node_modules/minimatch/dist/esm/unescape.js","../node_modules/minimatch/dist/esm/ast.js","../node_modules/minimatch/dist/esm/escape.js","../node_modules/minimatch/dist/esm/index.js","../development/core/event/index.js","../development/core/settings/index.js","../development/core/options/index.js","../development/core/index.js"],"sourcesContent":["function impandEvents($propEvents) {\n  if(!Array.isArray($propEvents)) { return $propEvents }\n  const propEvents = {}\n  iteratePropEvents: \n  for(const $propEvent of $propEvents) {\n    const { path, type, listener, options } = $propEvent\n    const propEventSettings = `${$path} ${$type}`\n    if(options !== undefined) {\n      propEvents[propEventSettings] = [listener, options]\n    }\n    else {\n      propEvents[propEventSettings] = listener\n    }\n  }\n  return propEvents\n}\n\nfunction expandEvents($propEvents) {\n  const propEvents = []\n  if(Array.isArray($propEvents)) { return $propEvents }\n  else if($propEvents === undefined) { return propEvents }\n  iteratePropEvents:\n  for(const [\n    $propEventSettings, $propEventListener\n  ] of Object.entries($propEvents)) {\n    const propEventSettings = $propEventSettings.split(' ')\n    let path, type, listener, options\n    if(propEventSettings.length === 1) {\n      path = ':scope'\n      type = propEventSettings[0]\n    }\n    else if(propEventSettings.length > 1) {\n      path = propEventSettings[0]\n      type = propEventSettings[1]\n    }\n    if(Array.isArray($propEventListener)) {\n      listener = $propEventListener[0]\n      options = $propEventListener[1]\n    }\n    else {\n      listener = $propEventListener\n    }\n    const propEvent = {\n      type,\n      path,\n      listener,\n      enable: false,\n    }\n    propEvents.push(propEvent)\n  }\n  return propEvents\n}\n\nexport { impandEvents, expandEvents }","const Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'undefined': undefined,\n  'null': null,\n}\nconst PrimitiveKeys = Object.keys(Primitives)\nconst PrimitiveValues = Object.values(Primitives)\nconst Objects = {\n  'object': Object,\n  'array': Array,\n}\nconst ObjectKeys = Object.keys(Objects)\nconst ObjectValues = Object.values(Objects)\nconst Types = Object.assign({}, Primitives, Objects)\nconst TypeKeys = Object.keys(Types)\nconst TypeValues = Object.values(Types)\nconst TypeMethods = [\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n]\nexport {\n  Primitives, PrimitiveKeys, PrimitiveValues, \n  Objects, ObjectKeys, ObjectValues,\n  Types, TypeKeys, TypeValues, TypeMethods\n}\n","export default {\n  quotationEscape: /\\.(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,\n}","import regularExpressions from '../regularExpressions/index.js'\nfunction subpaths($path) {\n  return $path.split(\n    new RegExp(regularExpressions.quotationEscape)\n  )\n}\nfunction keypaths($path) {\n  const _subpaths = subpaths($path)\n  _subpaths.pop()\n  return _subpaths\n}\nfunction key($path) {\n  return subpaths($path).pop()\n}\nfunction root($path) {\n  return subpaths($path).shift()\n}\nfunction typeofRoot($path) {\n  return (Number(root($path))) ? 'array' : 'object'\n}\nfunction parse($path) {\n  return {\n    subpaths: subpaths($path),\n    keypaths: keypaths($path),\n    key: key($path),\n    root: root($path),\n    typeofRoot: typeofRoot($path),\n  }\n}\nexport {\n  subpaths,\n  keypaths,\n  key,\n  root,\n  typeofRoot,\n  parse,\n}","const typeOf = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase()\n\nexport default typeOf","import typeOf from \"../typeOf/index.js\"\nexport default function typedObjectLiteral($object) {\n  const typeOfObject = typeOf($object)\n  if(\n    typeOfObject === 'object' ||\n    $object === Object\n  ) { return {} }\n  else if(\n    typeOfObject === 'array' ||\n    $object === Array\n  ) { return [] }\n  else if(typeOfObject === 'string') { return (\n    $object === 'Object' ||\n    $object === 'object'\n  ) ? {} \n    : (\n    $object === 'Array' ||\n    $object === 'array'\n  ) ? []\n    : undefined\n  }\n  else { return undefined }\n}","import * as path from '../path/index.js'\nimport typedObjectLiteral from '../typedObjectLiteral/index.js'\nimport regularExpressions from '../regularExpressions/index.js'\nfunction get($path, $value) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape))\n  const key = subpaths.pop()\n  const tree = $value\n  let treeNode = tree\n  for(const $subpath of subpaths) {\n    treeNode = treeNode[$subpath]\n  }\n  return treeNode[key]\n}\nfunction set($path, $value) {\n  const {\n    keypaths, key, typeofRoot\n  } = path.parse($path)\n  const tree = typedObjectLiteral(typeofRoot)\n  let treeNode = tree\n  for(const $subpath of keypaths) {\n    if(Number($subpath)) { treeNode[$subpath] = [] }\n    else { treeNode[$subpath] = {} }\n    treeNode = treeNode[$subpath]\n  }\n  treeNode[key] = $value\n  return tree\n}\nexport { get, set }","import * as Variables from '../variables/index.js'\nimport * as Path from '../path/index.js'\nimport * as Tree from '../tree/index.js'\nimport typedObjectLiteral from \"../typedObjectLiteral/index.js\"\nfunction impandTree($root, $tree) {\n  const typeofTree = typeof $tree\n  const typeofRoot = typeof $root\n  if(\n    !['string', 'function'].includes(typeofTree) ||\n    typeofRoot && typeofRoot !== 'object'\n  ) { return undefined /*$root*/ }\n  let tree = typedObjectLiteral($root)\n  if(typeofRoot === 'object') {\n    iterateRootEntries: \n    for(const [$rootKey, $rootValue] of Object.entries($root)) {\n      if(typeofTree === 'string') { tree[$rootKey] = Tree.get($tree, $rootValue) }\n      else if(typeofTree === 'function') { tree = $tree($rootValue) }\n    }\n  }\n  return tree\n}\n\nfunction expandTree($root, $tree) {\n  const typeofRoot = typeof $root\n  const typeofTree = typeof $tree\n  if(\n    !['string', 'function'].includes(typeofTree)\n  ) { return undefined }\n  let tree\n  if($root && typeofRoot === 'object') {\n    iterateRootEntries: \n    for(const [$rootKey, $rootValue] of Object.entries($root)) {\n      if(typeofTree === 'string') { tree = Tree.set($tree, $rootValue) }\n      else if(typeofTree === 'function') { tree = $tree($rootValue) }\n    }\n  }\n  else {\n    if(typeofTree === 'string') { tree = Tree.set($tree, $root) }\n    else if(typeofTree === 'function') { tree = $tree($root) }\n  }\n  return tree\n}\n\nexport { impandTree, expandTree }\n\n","export default function keytree($object) {\n  const target = []\n  for(const [$key, $value] of Object.entries($object)) {\n    if(typeof $value === 'object') {\n      target.push([$key, keytree($value)])\n    }\n    else {\n      target.push($key)\n    }\n  }\n  return target\n}\n","export default function pathkeyTree($object) {\n  const target = []\n  for(const [$key, $value] of Object.entries($object)) {\n    target.push($key)\n    if(typeof $value === 'object') {\n      const subtarget = pathkeyTree($value)\n      for(const $subtarget of subtarget) {\n        let path\n        if(typeof $subtarget === 'object') {\n          path = [$key, ...$subtarget].join('.')\n        }\n        else {\n          path = [$key, $subtarget].join('.')\n        }\n        target.push(path)\n      }\n    }\n  }\n  return target\n}","function recursiveAssign() {\n  const $arguments = [...arguments]\n  const $target = $arguments.shift()\n  const $sources = $arguments\n  iterateSources: \n  for(const $source of $sources) {\n    if(\n      $source === null ||\n      $source === undefined\n    ) { continue iterateSources }\n    iterateSourceEntries: \n    for(let [\n      $sourcePropKey, $sourcePropValue\n    ] of Object.entries($source)) {\n      // Type: Non-Null Object\n      if(\n        $target[$sourcePropKey] !== null &&\n        typeof $sourcePropValue === 'object'\n      ) {\n        let targetPropValue\n        if($target[$sourcePropKey] === undefined) {\n          $target[$sourcePropKey] = $sourcePropValue\n        } else {\n          $target[$sourcePropKey] = recursiveAssign(\n            $target[$sourcePropKey], $sourcePropValue\n          )\n        }\n      }\n      // Type: Primitive\n      else {\n        $target[$sourcePropKey] = $sourcePropValue\n      }\n    }\n  }\n  return $target\n}\nexport default recursiveAssign","function recursiveAssignConcat() {\n  const $arguments = [...arguments]\n  const $target = $arguments.shift()\n  const $sources = $arguments\n  iterateSources: \n  for(const $source of $sources) {\n    if(\n      $source === null ||\n      $source === undefined\n    ) { continue iterateSources }\n    iterateSourceEntries: \n    for(let [\n      $sourcePropKey, $sourcePropValue\n    ] of Object.entries($source)) {\n      // Type: Non-Null Object\n      if(\n        $target[$sourcePropKey] !== null &&\n        typeof $sourcePropValue === 'object'\n      ) {\n        let targetPropValue\n        if($target[$sourcePropKey] === undefined) {\n          $target[$sourcePropKey] = $sourcePropValue\n        }\n        else {\n          if(Array.isArray($sourcePropValue)) {\n            $target[$sourcePropKey] = $target[$sourcePropKey]\n              .concat(recursiveAssignConcat($sourcePropValue))\n          }\n          else {\n            $target[$sourcePropKey] = recursiveAssignConcat(\n              $target[$sourcePropKey], $sourcePropValue\n            )\n          }\n        }\n      }\n      // Type: Primitive\n      else {\n        $target[$sourcePropKey] = $sourcePropValue\n      }\n    }\n  }\n  return $target\n}\nexport default recursiveAssignConcat","function Instate(\n  $propertyClass, $property, $value\n) { return $value }\nfunction Deinstate(\n  $propertyClass, $property\n) { return $propertyClass.target[$property] }\nexport {\n  Instate,\n  Deinstate,\n}","import * as States from '../states/index.js'\nexport default class Handler {\n  #propertyClass\n  constructor($propertyClass) {\n    this.#propertyClass = $propertyClass\n  }\n  get get() {\n    return function get($target, $property) {\n      return $target[$property]\n    }\n  }\n  get set() {\n    const Instate = this.#propertyClass.States.Instate || States.Instate\n    const Definition = this.#propertyClass.Definition\n    return function set($target, $property, $value) {\n      if(\n        Definition.Object === \"Array\" && \n        $property === 'length'\n      ) {\n        $target[$property] = $value\n      }\n      else {\n        $target[$property] = Instate(this.#propertyClass, $property, $value)\n      }\n      return true\n    }\n  }\n  get deleteProperty() {\n    const Deinstate = this.#propertyClass.States.Deinstate || States.Deinstate\n    return function deleteProperty($target, $property) {\n      Deinstate(this.#propertyClass, $property)\n      delete $target[$property]\n      return true\n    }\n  }\n}","import { typedObjectLiteral } from '../../coutil/index.js'\nimport Handler from './handler/index.js'\nexport default class PropertyClass {\n  #settings\n  #core\n  #_target\n  #_handler\n  #_proxy\n  constructor($settings, $core) {\n    this.#settings = $settings\n    this.#core = $core\n    return this.#proxy\n  }\n  get #target() {\n    if(this.#_target !== undefined) { return this.#_target }\n    this.#_target = typedObjectLiteral(this.Definition.Object)\n    return this.#_target\n  }\n  get #handler() {\n    if(this.#_handler !== undefined) { return this.#_handler }\n    this.#_handler = new Handler(this)\n    return this.#_handler\n  }\n  get #proxy() {\n    if(this.#_proxy !== undefined) { return this.#_proxy }\n    this.#_proxy = new Proxy(this.#target, this.#handler)\n    return this.#_proxy\n  }\n  get core() { return this.#core }\n  get ID() { return this.#settings.ID }\n  get Name() { return this.#settings.Name }\n  get Names() { return this.#settings.Names }\n  get Events() { return this.#settings.Events }\n  get States() { return this.#settings.States }\n  get Definition() { return this.#settings.Definition }\n}","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    if(a===b) {\n      return [ai, bi];\n    }\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","var balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m) return [str];\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  if (/\\$$/.test(m.pre)) {    \n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre+ '{' + m.body + '}' + post[k];\n      expansions.push(expansion);\n    }\n  } else {\n    var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isSequence = isNumericSequence || isAlphaSequence;\n    var isOptions = m.body.indexOf(',') >= 0;\n    if (!isSequence && !isOptions) {\n      // {a},b}\n      if (m.post.match(/,.*\\}/)) {\n        str = m.pre + '{' + m.body + escClose + m.post;\n        return expand(str);\n      }\n      return [str];\n    }\n\n    var n;\n    if (isSequence) {\n      n = m.body.split(/\\.\\./);\n    } else {\n      n = parseCommaParts(m.body);\n      if (n.length === 1) {\n        // x{{a,b}}y ==> x{a}y x{b}y\n        n = expand(n[0], false).map(embrace);\n        if (n.length === 1) {\n          return post.map(function(p) {\n            return m.pre + n[0] + p;\n          });\n        }\n      }\n    }\n\n    // at this point, n is the parts, and we know it's not a comma set\n    // with a single entry.\n    var N;\n\n    if (isSequence) {\n      var x = numeric(n[0]);\n      var y = numeric(n[1]);\n      var width = Math.max(n[0].length, n[1].length)\n      var incr = n.length == 3\n        ? Math.abs(numeric(n[2]))\n        : 1;\n      var test = lte;\n      var reverse = y < x;\n      if (reverse) {\n        incr *= -1;\n        test = gte;\n      }\n      var pad = n.some(isPadded);\n\n      N = [];\n\n      for (var i = x; test(i, y); i += incr) {\n        var c;\n        if (isAlphaSequence) {\n          c = String.fromCharCode(i);\n          if (c === '\\\\')\n            c = '';\n        } else {\n          c = String(i);\n          if (pad) {\n            var need = width - c.length;\n            if (need > 0) {\n              var z = new Array(need + 1).join('0');\n              if (i < 0)\n                c = '-' + z + c.slice(1);\n              else\n                c = z + c;\n            }\n          }\n        }\n        N.push(c);\n      }\n    } else {\n      N = [];\n\n      for (var j = 0; j < n.length; j++) {\n        N.push.apply(N, expand(n[j], false));\n      }\n    }\n\n    for (var j = 0; j < N.length; j++) {\n      for (var k = 0; k < post.length; k++) {\n        var expansion = pre + N[j] + post[k];\n        if (!isTop || isSequence || expansion)\n          expansions.push(expansion);\n      }\n    }\n  }\n\n  return expansions;\n}\n\n","const MAX_PATTERN_LENGTH = 1024 * 64;\nexport const assertValidPattern = (pattern) => {\n    if (typeof pattern !== 'string') {\n        throw new TypeError('invalid pattern');\n    }\n    if (pattern.length > MAX_PATTERN_LENGTH) {\n        throw new TypeError('pattern is too long');\n    }\n};\n//# sourceMappingURL=assert-valid-pattern.js.map","// translate the various posix character classes into unicode properties\n// this works across all unicode locales\n// { <posix class>: [<translation>, /u flag required, negated]\nconst posixClasses = {\n    '[:alnum:]': ['\\\\p{L}\\\\p{Nl}\\\\p{Nd}', true],\n    '[:alpha:]': ['\\\\p{L}\\\\p{Nl}', true],\n    '[:ascii:]': ['\\\\x' + '00-\\\\x' + '7f', false],\n    '[:blank:]': ['\\\\p{Zs}\\\\t', true],\n    '[:cntrl:]': ['\\\\p{Cc}', true],\n    '[:digit:]': ['\\\\p{Nd}', true],\n    '[:graph:]': ['\\\\p{Z}\\\\p{C}', true, true],\n    '[:lower:]': ['\\\\p{Ll}', true],\n    '[:print:]': ['\\\\p{C}', true],\n    '[:punct:]': ['\\\\p{P}', true],\n    '[:space:]': ['\\\\p{Z}\\\\t\\\\r\\\\n\\\\v\\\\f', true],\n    '[:upper:]': ['\\\\p{Lu}', true],\n    '[:word:]': ['\\\\p{L}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}', true],\n    '[:xdigit:]': ['A-Fa-f0-9', false],\n};\n// only need to escape a few things inside of brace expressions\n// escapes: [ \\ ] -\nconst braceEscape = (s) => s.replace(/[[\\]\\\\-]/g, '\\\\$&');\n// escape all regexp magic characters\nconst regexpEscape = (s) => s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n// everything has already been escaped, we just have to join\nconst rangesToString = (ranges) => ranges.join('');\n// takes a glob string at a posix brace expression, and returns\n// an equivalent regular expression source, and boolean indicating\n// whether the /u flag needs to be applied, and the number of chars\n// consumed to parse the character class.\n// This also removes out of order ranges, and returns ($.) if the\n// entire class just no good.\nexport const parseClass = (glob, position) => {\n    const pos = position;\n    /* c8 ignore start */\n    if (glob.charAt(pos) !== '[') {\n        throw new Error('not in a brace expression');\n    }\n    /* c8 ignore stop */\n    const ranges = [];\n    const negs = [];\n    let i = pos + 1;\n    let sawStart = false;\n    let uflag = false;\n    let escaping = false;\n    let negate = false;\n    let endPos = pos;\n    let rangeStart = '';\n    WHILE: while (i < glob.length) {\n        const c = glob.charAt(i);\n        if ((c === '!' || c === '^') && i === pos + 1) {\n            negate = true;\n            i++;\n            continue;\n        }\n        if (c === ']' && sawStart && !escaping) {\n            endPos = i + 1;\n            break;\n        }\n        sawStart = true;\n        if (c === '\\\\') {\n            if (!escaping) {\n                escaping = true;\n                i++;\n                continue;\n            }\n            // escaped \\ char, fall through and treat like normal char\n        }\n        if (c === '[' && !escaping) {\n            // either a posix class, a collation equivalent, or just a [\n            for (const [cls, [unip, u, neg]] of Object.entries(posixClasses)) {\n                if (glob.startsWith(cls, i)) {\n                    // invalid, [a-[] is fine, but not [a-[:alpha]]\n                    if (rangeStart) {\n                        return ['$.', false, glob.length - pos, true];\n                    }\n                    i += cls.length;\n                    if (neg)\n                        negs.push(unip);\n                    else\n                        ranges.push(unip);\n                    uflag = uflag || u;\n                    continue WHILE;\n                }\n            }\n        }\n        // now it's just a normal character, effectively\n        escaping = false;\n        if (rangeStart) {\n            // throw this range away if it's not valid, but others\n            // can still match.\n            if (c > rangeStart) {\n                ranges.push(braceEscape(rangeStart) + '-' + braceEscape(c));\n            }\n            else if (c === rangeStart) {\n                ranges.push(braceEscape(c));\n            }\n            rangeStart = '';\n            i++;\n            continue;\n        }\n        // now might be the start of a range.\n        // can be either c-d or c-] or c<more...>] or c] at this point\n        if (glob.startsWith('-]', i + 1)) {\n            ranges.push(braceEscape(c + '-'));\n            i += 2;\n            continue;\n        }\n        if (glob.startsWith('-', i + 1)) {\n            rangeStart = c;\n            i += 2;\n            continue;\n        }\n        // not the start of a range, just a single character\n        ranges.push(braceEscape(c));\n        i++;\n    }\n    if (endPos < i) {\n        // didn't see the end of the class, not a valid class,\n        // but might still be valid as a literal match.\n        return ['', false, 0, false];\n    }\n    // if we got no ranges and no negates, then we have a range that\n    // cannot possibly match anything, and that poisons the whole glob\n    if (!ranges.length && !negs.length) {\n        return ['$.', false, glob.length - pos, true];\n    }\n    // if we got one positive range, and it's a single character, then that's\n    // not actually a magic pattern, it's just that one literal character.\n    // we should not treat that as \"magic\", we should just return the literal\n    // character. [_] is a perfectly valid way to escape glob magic chars.\n    if (negs.length === 0 &&\n        ranges.length === 1 &&\n        /^\\\\?.$/.test(ranges[0]) &&\n        !negate) {\n        const r = ranges[0].length === 2 ? ranges[0].slice(-1) : ranges[0];\n        return [regexpEscape(r), false, endPos - pos, false];\n    }\n    const sranges = '[' + (negate ? '^' : '') + rangesToString(ranges) + ']';\n    const snegs = '[' + (negate ? '' : '^') + rangesToString(negs) + ']';\n    const comb = ranges.length && negs.length\n        ? '(' + sranges + '|' + snegs + ')'\n        : ranges.length\n            ? sranges\n            : snegs;\n    return [comb, uflag, endPos - pos, true];\n};\n//# sourceMappingURL=brace-expressions.js.map","/**\n * Un-escape a string that has been escaped with {@link escape}.\n *\n * If the {@link windowsPathsNoEscape} option is used, then square-brace\n * escapes are removed, but not backslash escapes.  For example, it will turn\n * the string `'[*]'` into `*`, but it will not turn `'\\\\*'` into `'*'`,\n * becuase `\\` is a path separator in `windowsPathsNoEscape` mode.\n *\n * When `windowsPathsNoEscape` is not set, then both brace escapes and\n * backslash escapes are removed.\n *\n * Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot be escaped\n * or unescaped.\n */\nexport const unescape = (s, { windowsPathsNoEscape = false, } = {}) => {\n    return windowsPathsNoEscape\n        ? s.replace(/\\[([^\\/\\\\])\\]/g, '$1')\n        : s.replace(/((?!\\\\).|^)\\[([^\\/\\\\])\\]/g, '$1$2').replace(/\\\\([^\\/])/g, '$1');\n};\n//# sourceMappingURL=unescape.js.map","// parse a single path portion\nimport { parseClass } from './brace-expressions.js';\nimport { unescape } from './unescape.js';\nconst types = new Set(['!', '?', '+', '*', '@']);\nconst isExtglobType = (c) => types.has(c);\n// Patterns that get prepended to bind to the start of either the\n// entire string, or just a single path portion, to prevent dots\n// and/or traversal patterns, when needed.\n// Exts don't need the ^ or / bit, because the root binds that already.\nconst startNoTraversal = '(?!(?:^|/)\\\\.\\\\.?(?:$|/))';\nconst startNoDot = '(?!\\\\.)';\n// characters that indicate a start of pattern needs the \"no dots\" bit,\n// because a dot *might* be matched. ( is not in the list, because in\n// the case of a child extglob, it will handle the prevention itself.\nconst addPatternStart = new Set(['[', '.']);\n// cases where traversal is A-OK, no dot prevention needed\nconst justDots = new Set(['..', '.']);\nconst reSpecials = new Set('().*{}+?[]^$\\\\!');\nconst regExpEscape = (s) => s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n// any single thing other than /\nconst qmark = '[^/]';\n// * => any number of characters\nconst star = qmark + '*?';\n// use + when we need to ensure that *something* matches, because the * is\n// the only thing in the path portion.\nconst starNoEmpty = qmark + '+?';\n// remove the \\ chars that we added if we end up doing a nonmagic compare\n// const deslash = (s: string) => s.replace(/\\\\(.)/g, '$1')\nexport class AST {\n    type;\n    #root;\n    #hasMagic;\n    #uflag = false;\n    #parts = [];\n    #parent;\n    #parentIndex;\n    #negs;\n    #filledNegs = false;\n    #options;\n    #toString;\n    // set to true if it's an extglob with no children\n    // (which really means one child of '')\n    #emptyExt = false;\n    constructor(type, parent, options = {}) {\n        this.type = type;\n        // extglobs are inherently magical\n        if (type)\n            this.#hasMagic = true;\n        this.#parent = parent;\n        this.#root = this.#parent ? this.#parent.#root : this;\n        this.#options = this.#root === this ? options : this.#root.#options;\n        this.#negs = this.#root === this ? [] : this.#root.#negs;\n        if (type === '!' && !this.#root.#filledNegs)\n            this.#negs.push(this);\n        this.#parentIndex = this.#parent ? this.#parent.#parts.length : 0;\n    }\n    get hasMagic() {\n        /* c8 ignore start */\n        if (this.#hasMagic !== undefined)\n            return this.#hasMagic;\n        /* c8 ignore stop */\n        for (const p of this.#parts) {\n            if (typeof p === 'string')\n                continue;\n            if (p.type || p.hasMagic)\n                return (this.#hasMagic = true);\n        }\n        // note: will be undefined until we generate the regexp src and find out\n        return this.#hasMagic;\n    }\n    // reconstructs the pattern\n    toString() {\n        if (this.#toString !== undefined)\n            return this.#toString;\n        if (!this.type) {\n            return (this.#toString = this.#parts.map(p => String(p)).join(''));\n        }\n        else {\n            return (this.#toString =\n                this.type + '(' + this.#parts.map(p => String(p)).join('|') + ')');\n        }\n    }\n    #fillNegs() {\n        /* c8 ignore start */\n        if (this !== this.#root)\n            throw new Error('should only call on root');\n        if (this.#filledNegs)\n            return this;\n        /* c8 ignore stop */\n        // call toString() once to fill this out\n        this.toString();\n        this.#filledNegs = true;\n        let n;\n        while ((n = this.#negs.pop())) {\n            if (n.type !== '!')\n                continue;\n            // walk up the tree, appending everthing that comes AFTER parentIndex\n            let p = n;\n            let pp = p.#parent;\n            while (pp) {\n                for (let i = p.#parentIndex + 1; !pp.type && i < pp.#parts.length; i++) {\n                    for (const part of n.#parts) {\n                        /* c8 ignore start */\n                        if (typeof part === 'string') {\n                            throw new Error('string part in extglob AST??');\n                        }\n                        /* c8 ignore stop */\n                        part.copyIn(pp.#parts[i]);\n                    }\n                }\n                p = pp;\n                pp = p.#parent;\n            }\n        }\n        return this;\n    }\n    push(...parts) {\n        for (const p of parts) {\n            if (p === '')\n                continue;\n            /* c8 ignore start */\n            if (typeof p !== 'string' && !(p instanceof AST && p.#parent === this)) {\n                throw new Error('invalid part: ' + p);\n            }\n            /* c8 ignore stop */\n            this.#parts.push(p);\n        }\n    }\n    toJSON() {\n        const ret = this.type === null\n            ? this.#parts.slice().map(p => (typeof p === 'string' ? p : p.toJSON()))\n            : [this.type, ...this.#parts.map(p => p.toJSON())];\n        if (this.isStart() && !this.type)\n            ret.unshift([]);\n        if (this.isEnd() &&\n            (this === this.#root ||\n                (this.#root.#filledNegs && this.#parent?.type === '!'))) {\n            ret.push({});\n        }\n        return ret;\n    }\n    isStart() {\n        if (this.#root === this)\n            return true;\n        // if (this.type) return !!this.#parent?.isStart()\n        if (!this.#parent?.isStart())\n            return false;\n        if (this.#parentIndex === 0)\n            return true;\n        // if everything AHEAD of this is a negation, then it's still the \"start\"\n        const p = this.#parent;\n        for (let i = 0; i < this.#parentIndex; i++) {\n            const pp = p.#parts[i];\n            if (!(pp instanceof AST && pp.type === '!')) {\n                return false;\n            }\n        }\n        return true;\n    }\n    isEnd() {\n        if (this.#root === this)\n            return true;\n        if (this.#parent?.type === '!')\n            return true;\n        if (!this.#parent?.isEnd())\n            return false;\n        if (!this.type)\n            return this.#parent?.isEnd();\n        // if not root, it'll always have a parent\n        /* c8 ignore start */\n        const pl = this.#parent ? this.#parent.#parts.length : 0;\n        /* c8 ignore stop */\n        return this.#parentIndex === pl - 1;\n    }\n    copyIn(part) {\n        if (typeof part === 'string')\n            this.push(part);\n        else\n            this.push(part.clone(this));\n    }\n    clone(parent) {\n        const c = new AST(this.type, parent);\n        for (const p of this.#parts) {\n            c.copyIn(p);\n        }\n        return c;\n    }\n    static #parseAST(str, ast, pos, opt) {\n        let escaping = false;\n        let inBrace = false;\n        let braceStart = -1;\n        let braceNeg = false;\n        if (ast.type === null) {\n            // outside of a extglob, append until we find a start\n            let i = pos;\n            let acc = '';\n            while (i < str.length) {\n                const c = str.charAt(i++);\n                // still accumulate escapes at this point, but we do ignore\n                // starts that are escaped\n                if (escaping || c === '\\\\') {\n                    escaping = !escaping;\n                    acc += c;\n                    continue;\n                }\n                if (inBrace) {\n                    if (i === braceStart + 1) {\n                        if (c === '^' || c === '!') {\n                            braceNeg = true;\n                        }\n                    }\n                    else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {\n                        inBrace = false;\n                    }\n                    acc += c;\n                    continue;\n                }\n                else if (c === '[') {\n                    inBrace = true;\n                    braceStart = i;\n                    braceNeg = false;\n                    acc += c;\n                    continue;\n                }\n                if (!opt.noext && isExtglobType(c) && str.charAt(i) === '(') {\n                    ast.push(acc);\n                    acc = '';\n                    const ext = new AST(c, ast);\n                    i = AST.#parseAST(str, ext, i, opt);\n                    ast.push(ext);\n                    continue;\n                }\n                acc += c;\n            }\n            ast.push(acc);\n            return i;\n        }\n        // some kind of extglob, pos is at the (\n        // find the next | or )\n        let i = pos + 1;\n        let part = new AST(null, ast);\n        const parts = [];\n        let acc = '';\n        while (i < str.length) {\n            const c = str.charAt(i++);\n            // still accumulate escapes at this point, but we do ignore\n            // starts that are escaped\n            if (escaping || c === '\\\\') {\n                escaping = !escaping;\n                acc += c;\n                continue;\n            }\n            if (inBrace) {\n                if (i === braceStart + 1) {\n                    if (c === '^' || c === '!') {\n                        braceNeg = true;\n                    }\n                }\n                else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {\n                    inBrace = false;\n                }\n                acc += c;\n                continue;\n            }\n            else if (c === '[') {\n                inBrace = true;\n                braceStart = i;\n                braceNeg = false;\n                acc += c;\n                continue;\n            }\n            if (isExtglobType(c) && str.charAt(i) === '(') {\n                part.push(acc);\n                acc = '';\n                const ext = new AST(c, part);\n                part.push(ext);\n                i = AST.#parseAST(str, ext, i, opt);\n                continue;\n            }\n            if (c === '|') {\n                part.push(acc);\n                acc = '';\n                parts.push(part);\n                part = new AST(null, ast);\n                continue;\n            }\n            if (c === ')') {\n                if (acc === '' && ast.#parts.length === 0) {\n                    ast.#emptyExt = true;\n                }\n                part.push(acc);\n                acc = '';\n                ast.push(...parts, part);\n                return i;\n            }\n            acc += c;\n        }\n        // unfinished extglob\n        // if we got here, it was a malformed extglob! not an extglob, but\n        // maybe something else in there.\n        ast.type = null;\n        ast.#hasMagic = undefined;\n        ast.#parts = [str.substring(pos - 1)];\n        return i;\n    }\n    static fromGlob(pattern, options = {}) {\n        const ast = new AST(null, undefined, options);\n        AST.#parseAST(pattern, ast, 0, options);\n        return ast;\n    }\n    // returns the regular expression if there's magic, or the unescaped\n    // string if not.\n    toMMPattern() {\n        // should only be called on root\n        /* c8 ignore start */\n        if (this !== this.#root)\n            return this.#root.toMMPattern();\n        /* c8 ignore stop */\n        const glob = this.toString();\n        const [re, body, hasMagic, uflag] = this.toRegExpSource();\n        // if we're in nocase mode, and not nocaseMagicOnly, then we do\n        // still need a regular expression if we have to case-insensitively\n        // match capital/lowercase characters.\n        const anyMagic = hasMagic ||\n            this.#hasMagic ||\n            (this.#options.nocase &&\n                !this.#options.nocaseMagicOnly &&\n                glob.toUpperCase() !== glob.toLowerCase());\n        if (!anyMagic) {\n            return body;\n        }\n        const flags = (this.#options.nocase ? 'i' : '') + (uflag ? 'u' : '');\n        return Object.assign(new RegExp(`^${re}$`, flags), {\n            _src: re,\n            _glob: glob,\n        });\n    }\n    get options() {\n        return this.#options;\n    }\n    // returns the string match, the regexp source, whether there's magic\n    // in the regexp (so a regular expression is required) and whether or\n    // not the uflag is needed for the regular expression (for posix classes)\n    // TODO: instead of injecting the start/end at this point, just return\n    // the BODY of the regexp, along with the start/end portions suitable\n    // for binding the start/end in either a joined full-path makeRe context\n    // (where we bind to (^|/), or a standalone matchPart context (where\n    // we bind to ^, and not /).  Otherwise slashes get duped!\n    //\n    // In part-matching mode, the start is:\n    // - if not isStart: nothing\n    // - if traversal possible, but not allowed: ^(?!\\.\\.?$)\n    // - if dots allowed or not possible: ^\n    // - if dots possible and not allowed: ^(?!\\.)\n    // end is:\n    // - if not isEnd(): nothing\n    // - else: $\n    //\n    // In full-path matching mode, we put the slash at the START of the\n    // pattern, so start is:\n    // - if first pattern: same as part-matching mode\n    // - if not isStart(): nothing\n    // - if traversal possible, but not allowed: /(?!\\.\\.?(?:$|/))\n    // - if dots allowed or not possible: /\n    // - if dots possible and not allowed: /(?!\\.)\n    // end is:\n    // - if last pattern, same as part-matching mode\n    // - else nothing\n    //\n    // Always put the (?:$|/) on negated tails, though, because that has to be\n    // there to bind the end of the negated pattern portion, and it's easier to\n    // just stick it in now rather than try to inject it later in the middle of\n    // the pattern.\n    //\n    // We can just always return the same end, and leave it up to the caller\n    // to know whether it's going to be used joined or in parts.\n    // And, if the start is adjusted slightly, can do the same there:\n    // - if not isStart: nothing\n    // - if traversal possible, but not allowed: (?:/|^)(?!\\.\\.?$)\n    // - if dots allowed or not possible: (?:/|^)\n    // - if dots possible and not allowed: (?:/|^)(?!\\.)\n    //\n    // But it's better to have a simpler binding without a conditional, for\n    // performance, so probably better to return both start options.\n    //\n    // Then the caller just ignores the end if it's not the first pattern,\n    // and the start always gets applied.\n    //\n    // But that's always going to be $ if it's the ending pattern, or nothing,\n    // so the caller can just attach $ at the end of the pattern when building.\n    //\n    // So the todo is:\n    // - better detect what kind of start is needed\n    // - return both flavors of starting pattern\n    // - attach $ at the end of the pattern when creating the actual RegExp\n    //\n    // Ah, but wait, no, that all only applies to the root when the first pattern\n    // is not an extglob. If the first pattern IS an extglob, then we need all\n    // that dot prevention biz to live in the extglob portions, because eg\n    // +(*|.x*) can match .xy but not .yx.\n    //\n    // So, return the two flavors if it's #root and the first child is not an\n    // AST, otherwise leave it to the child AST to handle it, and there,\n    // use the (?:^|/) style of start binding.\n    //\n    // Even simplified further:\n    // - Since the start for a join is eg /(?!\\.) and the start for a part\n    // is ^(?!\\.), we can just prepend (?!\\.) to the pattern (either root\n    // or start or whatever) and prepend ^ or / at the Regexp construction.\n    toRegExpSource(allowDot) {\n        const dot = allowDot ?? !!this.#options.dot;\n        if (this.#root === this)\n            this.#fillNegs();\n        if (!this.type) {\n            const noEmpty = this.isStart() && this.isEnd();\n            const src = this.#parts\n                .map(p => {\n                const [re, _, hasMagic, uflag] = typeof p === 'string'\n                    ? AST.#parseGlob(p, this.#hasMagic, noEmpty)\n                    : p.toRegExpSource(allowDot);\n                this.#hasMagic = this.#hasMagic || hasMagic;\n                this.#uflag = this.#uflag || uflag;\n                return re;\n            })\n                .join('');\n            let start = '';\n            if (this.isStart()) {\n                if (typeof this.#parts[0] === 'string') {\n                    // this is the string that will match the start of the pattern,\n                    // so we need to protect against dots and such.\n                    // '.' and '..' cannot match unless the pattern is that exactly,\n                    // even if it starts with . or dot:true is set.\n                    const dotTravAllowed = this.#parts.length === 1 && justDots.has(this.#parts[0]);\n                    if (!dotTravAllowed) {\n                        const aps = addPatternStart;\n                        // check if we have a possibility of matching . or ..,\n                        // and prevent that.\n                        const needNoTrav = \n                        // dots are allowed, and the pattern starts with [ or .\n                        (dot && aps.has(src.charAt(0))) ||\n                            // the pattern starts with \\., and then [ or .\n                            (src.startsWith('\\\\.') && aps.has(src.charAt(2))) ||\n                            // the pattern starts with \\.\\., and then [ or .\n                            (src.startsWith('\\\\.\\\\.') && aps.has(src.charAt(4)));\n                        // no need to prevent dots if it can't match a dot, or if a\n                        // sub-pattern will be preventing it anyway.\n                        const needNoDot = !dot && !allowDot && aps.has(src.charAt(0));\n                        start = needNoTrav ? startNoTraversal : needNoDot ? startNoDot : '';\n                    }\n                }\n            }\n            // append the \"end of path portion\" pattern to negation tails\n            let end = '';\n            if (this.isEnd() &&\n                this.#root.#filledNegs &&\n                this.#parent?.type === '!') {\n                end = '(?:$|\\\\/)';\n            }\n            const final = start + src + end;\n            return [\n                final,\n                unescape(src),\n                (this.#hasMagic = !!this.#hasMagic),\n                this.#uflag,\n            ];\n        }\n        // We need to calculate the body *twice* if it's a repeat pattern\n        // at the start, once in nodot mode, then again in dot mode, so a\n        // pattern like *(?) can match 'x.y'\n        const repeated = this.type === '*' || this.type === '+';\n        // some kind of extglob\n        const start = this.type === '!' ? '(?:(?!(?:' : '(?:';\n        let body = this.#partsToRegExp(dot);\n        if (this.isStart() && this.isEnd() && !body && this.type !== '!') {\n            // invalid extglob, has to at least be *something* present, if it's\n            // the entire path portion.\n            const s = this.toString();\n            this.#parts = [s];\n            this.type = null;\n            this.#hasMagic = undefined;\n            return [s, unescape(this.toString()), false, false];\n        }\n        // XXX abstract out this map method\n        let bodyDotAllowed = !repeated || allowDot || dot || !startNoDot\n            ? ''\n            : this.#partsToRegExp(true);\n        if (bodyDotAllowed === body) {\n            bodyDotAllowed = '';\n        }\n        if (bodyDotAllowed) {\n            body = `(?:${body})(?:${bodyDotAllowed})*?`;\n        }\n        // an empty !() is exactly equivalent to a starNoEmpty\n        let final = '';\n        if (this.type === '!' && this.#emptyExt) {\n            final = (this.isStart() && !dot ? startNoDot : '') + starNoEmpty;\n        }\n        else {\n            const close = this.type === '!'\n                ? // !() must match something,but !(x) can match ''\n                    '))' +\n                        (this.isStart() && !dot && !allowDot ? startNoDot : '') +\n                        star +\n                        ')'\n                : this.type === '@'\n                    ? ')'\n                    : this.type === '?'\n                        ? ')?'\n                        : this.type === '+' && bodyDotAllowed\n                            ? ')'\n                            : this.type === '*' && bodyDotAllowed\n                                ? `)?`\n                                : `)${this.type}`;\n            final = start + body + close;\n        }\n        return [\n            final,\n            unescape(body),\n            (this.#hasMagic = !!this.#hasMagic),\n            this.#uflag,\n        ];\n    }\n    #partsToRegExp(dot) {\n        return this.#parts\n            .map(p => {\n            // extglob ASTs should only contain parent ASTs\n            /* c8 ignore start */\n            if (typeof p === 'string') {\n                throw new Error('string type in extglob ast??');\n            }\n            /* c8 ignore stop */\n            // can ignore hasMagic, because extglobs are already always magic\n            const [re, _, _hasMagic, uflag] = p.toRegExpSource(dot);\n            this.#uflag = this.#uflag || uflag;\n            return re;\n        })\n            .filter(p => !(this.isStart() && this.isEnd()) || !!p)\n            .join('|');\n    }\n    static #parseGlob(glob, hasMagic, noEmpty = false) {\n        let escaping = false;\n        let re = '';\n        let uflag = false;\n        for (let i = 0; i < glob.length; i++) {\n            const c = glob.charAt(i);\n            if (escaping) {\n                escaping = false;\n                re += (reSpecials.has(c) ? '\\\\' : '') + c;\n                continue;\n            }\n            if (c === '\\\\') {\n                if (i === glob.length - 1) {\n                    re += '\\\\\\\\';\n                }\n                else {\n                    escaping = true;\n                }\n                continue;\n            }\n            if (c === '[') {\n                const [src, needUflag, consumed, magic] = parseClass(glob, i);\n                if (consumed) {\n                    re += src;\n                    uflag = uflag || needUflag;\n                    i += consumed - 1;\n                    hasMagic = hasMagic || magic;\n                    continue;\n                }\n            }\n            if (c === '*') {\n                if (noEmpty && glob === '*')\n                    re += starNoEmpty;\n                else\n                    re += star;\n                hasMagic = true;\n                continue;\n            }\n            if (c === '?') {\n                re += qmark;\n                hasMagic = true;\n                continue;\n            }\n            re += regExpEscape(c);\n        }\n        return [re, unescape(glob), !!hasMagic, uflag];\n    }\n}\n//# sourceMappingURL=ast.js.map","/**\n * Escape all magic characters in a glob pattern.\n *\n * If the {@link windowsPathsNoEscape | GlobOptions.windowsPathsNoEscape}\n * option is used, then characters are escaped by wrapping in `[]`, because\n * a magic character wrapped in a character class can only be satisfied by\n * that exact character.  In this mode, `\\` is _not_ escaped, because it is\n * not interpreted as a magic character, but instead as a path separator.\n */\nexport const escape = (s, { windowsPathsNoEscape = false, } = {}) => {\n    // don't need to escape +@! because we escape the parens\n    // that make those magic, and escaping ! as [!] isn't valid,\n    // because [!]] is a valid glob class meaning not ']'.\n    return windowsPathsNoEscape\n        ? s.replace(/[?*()[\\]]/g, '[$&]')\n        : s.replace(/[?*()[\\]\\\\]/g, '\\\\$&');\n};\n//# sourceMappingURL=escape.js.map","import expand from 'brace-expansion';\nimport { assertValidPattern } from './assert-valid-pattern.js';\nimport { AST } from './ast.js';\nimport { escape } from './escape.js';\nimport { unescape } from './unescape.js';\nexport const minimatch = (p, pattern, options = {}) => {\n    assertValidPattern(pattern);\n    // shortcut: comments match nothing.\n    if (!options.nocomment && pattern.charAt(0) === '#') {\n        return false;\n    }\n    return new Minimatch(pattern, options).match(p);\n};\n// Optimized checking for the most common glob patterns.\nconst starDotExtRE = /^\\*+([^+@!?\\*\\[\\(]*)$/;\nconst starDotExtTest = (ext) => (f) => !f.startsWith('.') && f.endsWith(ext);\nconst starDotExtTestDot = (ext) => (f) => f.endsWith(ext);\nconst starDotExtTestNocase = (ext) => {\n    ext = ext.toLowerCase();\n    return (f) => !f.startsWith('.') && f.toLowerCase().endsWith(ext);\n};\nconst starDotExtTestNocaseDot = (ext) => {\n    ext = ext.toLowerCase();\n    return (f) => f.toLowerCase().endsWith(ext);\n};\nconst starDotStarRE = /^\\*+\\.\\*+$/;\nconst starDotStarTest = (f) => !f.startsWith('.') && f.includes('.');\nconst starDotStarTestDot = (f) => f !== '.' && f !== '..' && f.includes('.');\nconst dotStarRE = /^\\.\\*+$/;\nconst dotStarTest = (f) => f !== '.' && f !== '..' && f.startsWith('.');\nconst starRE = /^\\*+$/;\nconst starTest = (f) => f.length !== 0 && !f.startsWith('.');\nconst starTestDot = (f) => f.length !== 0 && f !== '.' && f !== '..';\nconst qmarksRE = /^\\?+([^+@!?\\*\\[\\(]*)?$/;\nconst qmarksTestNocase = ([$0, ext = '']) => {\n    const noext = qmarksTestNoExt([$0]);\n    if (!ext)\n        return noext;\n    ext = ext.toLowerCase();\n    return (f) => noext(f) && f.toLowerCase().endsWith(ext);\n};\nconst qmarksTestNocaseDot = ([$0, ext = '']) => {\n    const noext = qmarksTestNoExtDot([$0]);\n    if (!ext)\n        return noext;\n    ext = ext.toLowerCase();\n    return (f) => noext(f) && f.toLowerCase().endsWith(ext);\n};\nconst qmarksTestDot = ([$0, ext = '']) => {\n    const noext = qmarksTestNoExtDot([$0]);\n    return !ext ? noext : (f) => noext(f) && f.endsWith(ext);\n};\nconst qmarksTest = ([$0, ext = '']) => {\n    const noext = qmarksTestNoExt([$0]);\n    return !ext ? noext : (f) => noext(f) && f.endsWith(ext);\n};\nconst qmarksTestNoExt = ([$0]) => {\n    const len = $0.length;\n    return (f) => f.length === len && !f.startsWith('.');\n};\nconst qmarksTestNoExtDot = ([$0]) => {\n    const len = $0.length;\n    return (f) => f.length === len && f !== '.' && f !== '..';\n};\n/* c8 ignore start */\nconst defaultPlatform = (typeof process === 'object' && process\n    ? (typeof process.env === 'object' &&\n        process.env &&\n        process.env.__MINIMATCH_TESTING_PLATFORM__) ||\n        process.platform\n    : 'posix');\nconst path = {\n    win32: { sep: '\\\\' },\n    posix: { sep: '/' },\n};\n/* c8 ignore stop */\nexport const sep = defaultPlatform === 'win32' ? path.win32.sep : path.posix.sep;\nminimatch.sep = sep;\nexport const GLOBSTAR = Symbol('globstar **');\nminimatch.GLOBSTAR = GLOBSTAR;\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nconst qmark = '[^/]';\n// * => any number of characters\nconst star = qmark + '*?';\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nconst twoStarDot = '(?:(?!(?:\\\\/|^)(?:\\\\.{1,2})($|\\\\/)).)*?';\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nconst twoStarNoDot = '(?:(?!(?:\\\\/|^)\\\\.).)*?';\nexport const filter = (pattern, options = {}) => (p) => minimatch(p, pattern, options);\nminimatch.filter = filter;\nconst ext = (a, b = {}) => Object.assign({}, a, b);\nexport const defaults = (def) => {\n    if (!def || typeof def !== 'object' || !Object.keys(def).length) {\n        return minimatch;\n    }\n    const orig = minimatch;\n    const m = (p, pattern, options = {}) => orig(p, pattern, ext(def, options));\n    return Object.assign(m, {\n        Minimatch: class Minimatch extends orig.Minimatch {\n            constructor(pattern, options = {}) {\n                super(pattern, ext(def, options));\n            }\n            static defaults(options) {\n                return orig.defaults(ext(def, options)).Minimatch;\n            }\n        },\n        AST: class AST extends orig.AST {\n            /* c8 ignore start */\n            constructor(type, parent, options = {}) {\n                super(type, parent, ext(def, options));\n            }\n            /* c8 ignore stop */\n            static fromGlob(pattern, options = {}) {\n                return orig.AST.fromGlob(pattern, ext(def, options));\n            }\n        },\n        unescape: (s, options = {}) => orig.unescape(s, ext(def, options)),\n        escape: (s, options = {}) => orig.escape(s, ext(def, options)),\n        filter: (pattern, options = {}) => orig.filter(pattern, ext(def, options)),\n        defaults: (options) => orig.defaults(ext(def, options)),\n        makeRe: (pattern, options = {}) => orig.makeRe(pattern, ext(def, options)),\n        braceExpand: (pattern, options = {}) => orig.braceExpand(pattern, ext(def, options)),\n        match: (list, pattern, options = {}) => orig.match(list, pattern, ext(def, options)),\n        sep: orig.sep,\n        GLOBSTAR: GLOBSTAR,\n    });\n};\nminimatch.defaults = defaults;\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nexport const braceExpand = (pattern, options = {}) => {\n    assertValidPattern(pattern);\n    // Thanks to Yeting Li <https://github.com/yetingli> for\n    // improving this regexp to avoid a ReDOS vulnerability.\n    if (options.nobrace || !/\\{(?:(?!\\{).)*\\}/.test(pattern)) {\n        // shortcut. no need to expand.\n        return [pattern];\n    }\n    return expand(pattern);\n};\nminimatch.braceExpand = braceExpand;\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nexport const makeRe = (pattern, options = {}) => new Minimatch(pattern, options).makeRe();\nminimatch.makeRe = makeRe;\nexport const match = (list, pattern, options = {}) => {\n    const mm = new Minimatch(pattern, options);\n    list = list.filter(f => mm.match(f));\n    if (mm.options.nonull && !list.length) {\n        list.push(pattern);\n    }\n    return list;\n};\nminimatch.match = match;\n// replace stuff like \\* with *\nconst globMagic = /[?*]|[+@!]\\(.*?\\)|\\[|\\]/;\nconst regExpEscape = (s) => s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\nexport class Minimatch {\n    options;\n    set;\n    pattern;\n    windowsPathsNoEscape;\n    nonegate;\n    negate;\n    comment;\n    empty;\n    preserveMultipleSlashes;\n    partial;\n    globSet;\n    globParts;\n    nocase;\n    isWindows;\n    platform;\n    windowsNoMagicRoot;\n    regexp;\n    constructor(pattern, options = {}) {\n        assertValidPattern(pattern);\n        options = options || {};\n        this.options = options;\n        this.pattern = pattern;\n        this.platform = options.platform || defaultPlatform;\n        this.isWindows = this.platform === 'win32';\n        this.windowsPathsNoEscape =\n            !!options.windowsPathsNoEscape || options.allowWindowsEscape === false;\n        if (this.windowsPathsNoEscape) {\n            this.pattern = this.pattern.replace(/\\\\/g, '/');\n        }\n        this.preserveMultipleSlashes = !!options.preserveMultipleSlashes;\n        this.regexp = null;\n        this.negate = false;\n        this.nonegate = !!options.nonegate;\n        this.comment = false;\n        this.empty = false;\n        this.partial = !!options.partial;\n        this.nocase = !!this.options.nocase;\n        this.windowsNoMagicRoot =\n            options.windowsNoMagicRoot !== undefined\n                ? options.windowsNoMagicRoot\n                : !!(this.isWindows && this.nocase);\n        this.globSet = [];\n        this.globParts = [];\n        this.set = [];\n        // make the set of regexps etc.\n        this.make();\n    }\n    hasMagic() {\n        if (this.options.magicalBraces && this.set.length > 1) {\n            return true;\n        }\n        for (const pattern of this.set) {\n            for (const part of pattern) {\n                if (typeof part !== 'string')\n                    return true;\n            }\n        }\n        return false;\n    }\n    debug(..._) { }\n    make() {\n        const pattern = this.pattern;\n        const options = this.options;\n        // empty patterns and comments match nothing.\n        if (!options.nocomment && pattern.charAt(0) === '#') {\n            this.comment = true;\n            return;\n        }\n        if (!pattern) {\n            this.empty = true;\n            return;\n        }\n        // step 1: figure out negation, etc.\n        this.parseNegate();\n        // step 2: expand braces\n        this.globSet = [...new Set(this.braceExpand())];\n        if (options.debug) {\n            this.debug = (...args) => console.error(...args);\n        }\n        this.debug(this.pattern, this.globSet);\n        // step 3: now we have a set, so turn each one into a series of\n        // path-portion matching patterns.\n        // These will be regexps, except in the case of \"**\", which is\n        // set to the GLOBSTAR object for globstar behavior,\n        // and will not contain any / characters\n        //\n        // First, we preprocess to make the glob pattern sets a bit simpler\n        // and deduped.  There are some perf-killing patterns that can cause\n        // problems with a glob walk, but we can simplify them down a bit.\n        const rawGlobParts = this.globSet.map(s => this.slashSplit(s));\n        this.globParts = this.preprocess(rawGlobParts);\n        this.debug(this.pattern, this.globParts);\n        // glob --> regexps\n        let set = this.globParts.map((s, _, __) => {\n            if (this.isWindows && this.windowsNoMagicRoot) {\n                // check if it's a drive or unc path.\n                const isUNC = s[0] === '' &&\n                    s[1] === '' &&\n                    (s[2] === '?' || !globMagic.test(s[2])) &&\n                    !globMagic.test(s[3]);\n                const isDrive = /^[a-z]:/i.test(s[0]);\n                if (isUNC) {\n                    return [...s.slice(0, 4), ...s.slice(4).map(ss => this.parse(ss))];\n                }\n                else if (isDrive) {\n                    return [s[0], ...s.slice(1).map(ss => this.parse(ss))];\n                }\n            }\n            return s.map(ss => this.parse(ss));\n        });\n        this.debug(this.pattern, set);\n        // filter out everything that didn't compile properly.\n        this.set = set.filter(s => s.indexOf(false) === -1);\n        // do not treat the ? in UNC paths as magic\n        if (this.isWindows) {\n            for (let i = 0; i < this.set.length; i++) {\n                const p = this.set[i];\n                if (p[0] === '' &&\n                    p[1] === '' &&\n                    this.globParts[i][2] === '?' &&\n                    typeof p[3] === 'string' &&\n                    /^[a-z]:$/i.test(p[3])) {\n                    p[2] = '?';\n                }\n            }\n        }\n        this.debug(this.pattern, this.set);\n    }\n    // various transforms to equivalent pattern sets that are\n    // faster to process in a filesystem walk.  The goal is to\n    // eliminate what we can, and push all ** patterns as far\n    // to the right as possible, even if it increases the number\n    // of patterns that we have to process.\n    preprocess(globParts) {\n        // if we're not in globstar mode, then turn all ** into *\n        if (this.options.noglobstar) {\n            for (let i = 0; i < globParts.length; i++) {\n                for (let j = 0; j < globParts[i].length; j++) {\n                    if (globParts[i][j] === '**') {\n                        globParts[i][j] = '*';\n                    }\n                }\n            }\n        }\n        const { optimizationLevel = 1 } = this.options;\n        if (optimizationLevel >= 2) {\n            // aggressive optimization for the purpose of fs walking\n            globParts = this.firstPhasePreProcess(globParts);\n            globParts = this.secondPhasePreProcess(globParts);\n        }\n        else if (optimizationLevel >= 1) {\n            // just basic optimizations to remove some .. parts\n            globParts = this.levelOneOptimize(globParts);\n        }\n        else {\n            // just collapse multiple ** portions into one\n            globParts = this.adjascentGlobstarOptimize(globParts);\n        }\n        return globParts;\n    }\n    // just get rid of adjascent ** portions\n    adjascentGlobstarOptimize(globParts) {\n        return globParts.map(parts => {\n            let gs = -1;\n            while (-1 !== (gs = parts.indexOf('**', gs + 1))) {\n                let i = gs;\n                while (parts[i + 1] === '**') {\n                    i++;\n                }\n                if (i !== gs) {\n                    parts.splice(gs, i - gs);\n                }\n            }\n            return parts;\n        });\n    }\n    // get rid of adjascent ** and resolve .. portions\n    levelOneOptimize(globParts) {\n        return globParts.map(parts => {\n            parts = parts.reduce((set, part) => {\n                const prev = set[set.length - 1];\n                if (part === '**' && prev === '**') {\n                    return set;\n                }\n                if (part === '..') {\n                    if (prev && prev !== '..' && prev !== '.' && prev !== '**') {\n                        set.pop();\n                        return set;\n                    }\n                }\n                set.push(part);\n                return set;\n            }, []);\n            return parts.length === 0 ? [''] : parts;\n        });\n    }\n    levelTwoFileOptimize(parts) {\n        if (!Array.isArray(parts)) {\n            parts = this.slashSplit(parts);\n        }\n        let didSomething = false;\n        do {\n            didSomething = false;\n            // <pre>/<e>/<rest> -> <pre>/<rest>\n            if (!this.preserveMultipleSlashes) {\n                for (let i = 1; i < parts.length - 1; i++) {\n                    const p = parts[i];\n                    // don't squeeze out UNC patterns\n                    if (i === 1 && p === '' && parts[0] === '')\n                        continue;\n                    if (p === '.' || p === '') {\n                        didSomething = true;\n                        parts.splice(i, 1);\n                        i--;\n                    }\n                }\n                if (parts[0] === '.' &&\n                    parts.length === 2 &&\n                    (parts[1] === '.' || parts[1] === '')) {\n                    didSomething = true;\n                    parts.pop();\n                }\n            }\n            // <pre>/<p>/../<rest> -> <pre>/<rest>\n            let dd = 0;\n            while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                const p = parts[dd - 1];\n                if (p && p !== '.' && p !== '..' && p !== '**') {\n                    didSomething = true;\n                    parts.splice(dd - 1, 2);\n                    dd -= 2;\n                }\n            }\n        } while (didSomething);\n        return parts.length === 0 ? [''] : parts;\n    }\n    // First phase: single-pattern processing\n    // <pre> is 1 or more portions\n    // <rest> is 1 or more portions\n    // <p> is any portion other than ., .., '', or **\n    // <e> is . or ''\n    //\n    // **/.. is *brutal* for filesystem walking performance, because\n    // it effectively resets the recursive walk each time it occurs,\n    // and ** cannot be reduced out by a .. pattern part like a regexp\n    // or most strings (other than .., ., and '') can be.\n    //\n    // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}\n    // <pre>/<e>/<rest> -> <pre>/<rest>\n    // <pre>/<p>/../<rest> -> <pre>/<rest>\n    // **/**/<rest> -> **/<rest>\n    //\n    // **/*/<rest> -> */**/<rest> <== not valid because ** doesn't follow\n    // this WOULD be allowed if ** did follow symlinks, or * didn't\n    firstPhasePreProcess(globParts) {\n        let didSomething = false;\n        do {\n            didSomething = false;\n            // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}\n            for (let parts of globParts) {\n                let gs = -1;\n                while (-1 !== (gs = parts.indexOf('**', gs + 1))) {\n                    let gss = gs;\n                    while (parts[gss + 1] === '**') {\n                        // <pre>/**/**/<rest> -> <pre>/**/<rest>\n                        gss++;\n                    }\n                    // eg, if gs is 2 and gss is 4, that means we have 3 **\n                    // parts, and can remove 2 of them.\n                    if (gss > gs) {\n                        parts.splice(gs + 1, gss - gs);\n                    }\n                    let next = parts[gs + 1];\n                    const p = parts[gs + 2];\n                    const p2 = parts[gs + 3];\n                    if (next !== '..')\n                        continue;\n                    if (!p ||\n                        p === '.' ||\n                        p === '..' ||\n                        !p2 ||\n                        p2 === '.' ||\n                        p2 === '..') {\n                        continue;\n                    }\n                    didSomething = true;\n                    // edit parts in place, and push the new one\n                    parts.splice(gs, 1);\n                    const other = parts.slice(0);\n                    other[gs] = '**';\n                    globParts.push(other);\n                    gs--;\n                }\n                // <pre>/<e>/<rest> -> <pre>/<rest>\n                if (!this.preserveMultipleSlashes) {\n                    for (let i = 1; i < parts.length - 1; i++) {\n                        const p = parts[i];\n                        // don't squeeze out UNC patterns\n                        if (i === 1 && p === '' && parts[0] === '')\n                            continue;\n                        if (p === '.' || p === '') {\n                            didSomething = true;\n                            parts.splice(i, 1);\n                            i--;\n                        }\n                    }\n                    if (parts[0] === '.' &&\n                        parts.length === 2 &&\n                        (parts[1] === '.' || parts[1] === '')) {\n                        didSomething = true;\n                        parts.pop();\n                    }\n                }\n                // <pre>/<p>/../<rest> -> <pre>/<rest>\n                let dd = 0;\n                while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                    const p = parts[dd - 1];\n                    if (p && p !== '.' && p !== '..' && p !== '**') {\n                        didSomething = true;\n                        const needDot = dd === 1 && parts[dd + 1] === '**';\n                        const splin = needDot ? ['.'] : [];\n                        parts.splice(dd - 1, 2, ...splin);\n                        if (parts.length === 0)\n                            parts.push('');\n                        dd -= 2;\n                    }\n                }\n            }\n        } while (didSomething);\n        return globParts;\n    }\n    // second phase: multi-pattern dedupes\n    // {<pre>/*/<rest>,<pre>/<p>/<rest>} -> <pre>/*/<rest>\n    // {<pre>/<rest>,<pre>/<rest>} -> <pre>/<rest>\n    // {<pre>/**/<rest>,<pre>/<rest>} -> <pre>/**/<rest>\n    //\n    // {<pre>/**/<rest>,<pre>/**/<p>/<rest>} -> <pre>/**/<rest>\n    // ^-- not valid because ** doens't follow symlinks\n    secondPhasePreProcess(globParts) {\n        for (let i = 0; i < globParts.length - 1; i++) {\n            for (let j = i + 1; j < globParts.length; j++) {\n                const matched = this.partsMatch(globParts[i], globParts[j], !this.preserveMultipleSlashes);\n                if (matched) {\n                    globParts[i] = [];\n                    globParts[j] = matched;\n                    break;\n                }\n            }\n        }\n        return globParts.filter(gs => gs.length);\n    }\n    partsMatch(a, b, emptyGSMatch = false) {\n        let ai = 0;\n        let bi = 0;\n        let result = [];\n        let which = '';\n        while (ai < a.length && bi < b.length) {\n            if (a[ai] === b[bi]) {\n                result.push(which === 'b' ? b[bi] : a[ai]);\n                ai++;\n                bi++;\n            }\n            else if (emptyGSMatch && a[ai] === '**' && b[bi] === a[ai + 1]) {\n                result.push(a[ai]);\n                ai++;\n            }\n            else if (emptyGSMatch && b[bi] === '**' && a[ai] === b[bi + 1]) {\n                result.push(b[bi]);\n                bi++;\n            }\n            else if (a[ai] === '*' &&\n                b[bi] &&\n                (this.options.dot || !b[bi].startsWith('.')) &&\n                b[bi] !== '**') {\n                if (which === 'b')\n                    return false;\n                which = 'a';\n                result.push(a[ai]);\n                ai++;\n                bi++;\n            }\n            else if (b[bi] === '*' &&\n                a[ai] &&\n                (this.options.dot || !a[ai].startsWith('.')) &&\n                a[ai] !== '**') {\n                if (which === 'a')\n                    return false;\n                which = 'b';\n                result.push(b[bi]);\n                ai++;\n                bi++;\n            }\n            else {\n                return false;\n            }\n        }\n        // if we fall out of the loop, it means they two are identical\n        // as long as their lengths match\n        return a.length === b.length && result;\n    }\n    parseNegate() {\n        if (this.nonegate)\n            return;\n        const pattern = this.pattern;\n        let negate = false;\n        let negateOffset = 0;\n        for (let i = 0; i < pattern.length && pattern.charAt(i) === '!'; i++) {\n            negate = !negate;\n            negateOffset++;\n        }\n        if (negateOffset)\n            this.pattern = pattern.slice(negateOffset);\n        this.negate = negate;\n    }\n    // set partial to true to test if, for example,\n    // \"/a/b\" matches the start of \"/*/b/*/d\"\n    // Partial means, if you run out of file before you run\n    // out of pattern, then that's fine, as long as all\n    // the parts match.\n    matchOne(file, pattern, partial = false) {\n        const options = this.options;\n        // UNC paths like //?/X:/... can match X:/... and vice versa\n        // Drive letters in absolute drive or unc paths are always compared\n        // case-insensitively.\n        if (this.isWindows) {\n            const fileDrive = typeof file[0] === 'string' && /^[a-z]:$/i.test(file[0]);\n            const fileUNC = !fileDrive &&\n                file[0] === '' &&\n                file[1] === '' &&\n                file[2] === '?' &&\n                /^[a-z]:$/i.test(file[3]);\n            const patternDrive = typeof pattern[0] === 'string' && /^[a-z]:$/i.test(pattern[0]);\n            const patternUNC = !patternDrive &&\n                pattern[0] === '' &&\n                pattern[1] === '' &&\n                pattern[2] === '?' &&\n                typeof pattern[3] === 'string' &&\n                /^[a-z]:$/i.test(pattern[3]);\n            const fdi = fileUNC ? 3 : fileDrive ? 0 : undefined;\n            const pdi = patternUNC ? 3 : patternDrive ? 0 : undefined;\n            if (typeof fdi === 'number' && typeof pdi === 'number') {\n                const [fd, pd] = [file[fdi], pattern[pdi]];\n                if (fd.toLowerCase() === pd.toLowerCase()) {\n                    pattern[pdi] = fd;\n                    if (pdi > fdi) {\n                        pattern = pattern.slice(pdi);\n                    }\n                    else if (fdi > pdi) {\n                        file = file.slice(fdi);\n                    }\n                }\n            }\n        }\n        // resolve and reduce . and .. portions in the file as well.\n        // dont' need to do the second phase, because it's only one string[]\n        const { optimizationLevel = 1 } = this.options;\n        if (optimizationLevel >= 2) {\n            file = this.levelTwoFileOptimize(file);\n        }\n        this.debug('matchOne', this, { file, pattern });\n        this.debug('matchOne', file.length, pattern.length);\n        for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {\n            this.debug('matchOne loop');\n            var p = pattern[pi];\n            var f = file[fi];\n            this.debug(pattern, p, f);\n            // should be impossible.\n            // some invalid regexp stuff in the set.\n            /* c8 ignore start */\n            if (p === false) {\n                return false;\n            }\n            /* c8 ignore stop */\n            if (p === GLOBSTAR) {\n                this.debug('GLOBSTAR', [pattern, p, f]);\n                // \"**\"\n                // a/**/b/**/c would match the following:\n                // a/b/x/y/z/c\n                // a/x/y/z/b/c\n                // a/b/x/b/x/c\n                // a/b/c\n                // To do this, take the rest of the pattern after\n                // the **, and see if it would match the file remainder.\n                // If so, return success.\n                // If not, the ** \"swallows\" a segment, and try again.\n                // This is recursively awful.\n                //\n                // a/**/b/**/c matching a/b/x/y/z/c\n                // - a matches a\n                // - doublestar\n                //   - matchOne(b/x/y/z/c, b/**/c)\n                //     - b matches b\n                //     - doublestar\n                //       - matchOne(x/y/z/c, c) -> no\n                //       - matchOne(y/z/c, c) -> no\n                //       - matchOne(z/c, c) -> no\n                //       - matchOne(c, c) yes, hit\n                var fr = fi;\n                var pr = pi + 1;\n                if (pr === pl) {\n                    this.debug('** at the end');\n                    // a ** at the end will just swallow the rest.\n                    // We have found a match.\n                    // however, it will not swallow /.x, unless\n                    // options.dot is set.\n                    // . and .. are *never* matched by **, for explosively\n                    // exponential reasons.\n                    for (; fi < fl; fi++) {\n                        if (file[fi] === '.' ||\n                            file[fi] === '..' ||\n                            (!options.dot && file[fi].charAt(0) === '.'))\n                            return false;\n                    }\n                    return true;\n                }\n                // ok, let's see if we can swallow whatever we can.\n                while (fr < fl) {\n                    var swallowee = file[fr];\n                    this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee);\n                    // XXX remove this slice.  Just pass the start index.\n                    if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n                        this.debug('globstar found match!', fr, fl, swallowee);\n                        // found a match.\n                        return true;\n                    }\n                    else {\n                        // can't swallow \".\" or \"..\" ever.\n                        // can only swallow \".foo\" when explicitly asked.\n                        if (swallowee === '.' ||\n                            swallowee === '..' ||\n                            (!options.dot && swallowee.charAt(0) === '.')) {\n                            this.debug('dot detected!', file, fr, pattern, pr);\n                            break;\n                        }\n                        // ** swallows a segment, and continue.\n                        this.debug('globstar swallow a segment, and continue');\n                        fr++;\n                    }\n                }\n                // no match was found.\n                // However, in partial mode, we can't say this is necessarily over.\n                /* c8 ignore start */\n                if (partial) {\n                    // ran out of file\n                    this.debug('\\n>>> no match, partial?', file, fr, pattern, pr);\n                    if (fr === fl) {\n                        return true;\n                    }\n                }\n                /* c8 ignore stop */\n                return false;\n            }\n            // something other than **\n            // non-magic patterns just have to match exactly\n            // patterns with magic have been turned into regexps.\n            let hit;\n            if (typeof p === 'string') {\n                hit = f === p;\n                this.debug('string match', p, f, hit);\n            }\n            else {\n                hit = p.test(f);\n                this.debug('pattern match', p, f, hit);\n            }\n            if (!hit)\n                return false;\n        }\n        // Note: ending in / means that we'll get a final \"\"\n        // at the end of the pattern.  This can only match a\n        // corresponding \"\" at the end of the file.\n        // If the file ends in /, then it can only match a\n        // a pattern that ends in /, unless the pattern just\n        // doesn't have any more for it. But, a/b/ should *not*\n        // match \"a/b/*\", even though \"\" matches against the\n        // [^/]*? pattern, except in partial mode, where it might\n        // simply not be reached yet.\n        // However, a/b/ should still satisfy a/*\n        // now either we fell off the end of the pattern, or we're done.\n        if (fi === fl && pi === pl) {\n            // ran out of pattern and filename at the same time.\n            // an exact hit!\n            return true;\n        }\n        else if (fi === fl) {\n            // ran out of file, but still had pattern left.\n            // this is ok if we're doing the match as part of\n            // a glob fs traversal.\n            return partial;\n        }\n        else if (pi === pl) {\n            // ran out of pattern, still have file left.\n            // this is only acceptable if we're on the very last\n            // empty segment of a file with a trailing slash.\n            // a/* should match a/b/\n            return fi === fl - 1 && file[fi] === '';\n            /* c8 ignore start */\n        }\n        else {\n            // should be unreachable.\n            throw new Error('wtf?');\n        }\n        /* c8 ignore stop */\n    }\n    braceExpand() {\n        return braceExpand(this.pattern, this.options);\n    }\n    parse(pattern) {\n        assertValidPattern(pattern);\n        const options = this.options;\n        // shortcuts\n        if (pattern === '**')\n            return GLOBSTAR;\n        if (pattern === '')\n            return '';\n        // far and away, the most common glob pattern parts are\n        // *, *.*, and *.<ext>  Add a fast check method for those.\n        let m;\n        let fastTest = null;\n        if ((m = pattern.match(starRE))) {\n            fastTest = options.dot ? starTestDot : starTest;\n        }\n        else if ((m = pattern.match(starDotExtRE))) {\n            fastTest = (options.nocase\n                ? options.dot\n                    ? starDotExtTestNocaseDot\n                    : starDotExtTestNocase\n                : options.dot\n                    ? starDotExtTestDot\n                    : starDotExtTest)(m[1]);\n        }\n        else if ((m = pattern.match(qmarksRE))) {\n            fastTest = (options.nocase\n                ? options.dot\n                    ? qmarksTestNocaseDot\n                    : qmarksTestNocase\n                : options.dot\n                    ? qmarksTestDot\n                    : qmarksTest)(m);\n        }\n        else if ((m = pattern.match(starDotStarRE))) {\n            fastTest = options.dot ? starDotStarTestDot : starDotStarTest;\n        }\n        else if ((m = pattern.match(dotStarRE))) {\n            fastTest = dotStarTest;\n        }\n        const re = AST.fromGlob(pattern, this.options).toMMPattern();\n        if (fastTest && typeof re === 'object') {\n            // Avoids overriding in frozen environments\n            Reflect.defineProperty(re, 'test', { value: fastTest });\n        }\n        return re;\n    }\n    makeRe() {\n        if (this.regexp || this.regexp === false)\n            return this.regexp;\n        // at this point, this.set is a 2d array of partial\n        // pattern strings, or \"**\".\n        //\n        // It's better to use .match().  This function shouldn't\n        // be used, really, but it's pretty convenient sometimes,\n        // when you just want to work with a regex.\n        const set = this.set;\n        if (!set.length) {\n            this.regexp = false;\n            return this.regexp;\n        }\n        const options = this.options;\n        const twoStar = options.noglobstar\n            ? star\n            : options.dot\n                ? twoStarDot\n                : twoStarNoDot;\n        const flags = new Set(options.nocase ? ['i'] : []);\n        // regexpify non-globstar patterns\n        // if ** is only item, then we just do one twoStar\n        // if ** is first, and there are more, prepend (\\/|twoStar\\/)? to next\n        // if ** is last, append (\\/twoStar|) to previous\n        // if ** is in the middle, append (\\/|\\/twoStar\\/) to previous\n        // then filter out GLOBSTAR symbols\n        let re = set\n            .map(pattern => {\n            const pp = pattern.map(p => {\n                if (p instanceof RegExp) {\n                    for (const f of p.flags.split(''))\n                        flags.add(f);\n                }\n                return typeof p === 'string'\n                    ? regExpEscape(p)\n                    : p === GLOBSTAR\n                        ? GLOBSTAR\n                        : p._src;\n            });\n            pp.forEach((p, i) => {\n                const next = pp[i + 1];\n                const prev = pp[i - 1];\n                if (p !== GLOBSTAR || prev === GLOBSTAR) {\n                    return;\n                }\n                if (prev === undefined) {\n                    if (next !== undefined && next !== GLOBSTAR) {\n                        pp[i + 1] = '(?:\\\\/|' + twoStar + '\\\\/)?' + next;\n                    }\n                    else {\n                        pp[i] = twoStar;\n                    }\n                }\n                else if (next === undefined) {\n                    pp[i - 1] = prev + '(?:\\\\/|' + twoStar + ')?';\n                }\n                else if (next !== GLOBSTAR) {\n                    pp[i - 1] = prev + '(?:\\\\/|\\\\/' + twoStar + '\\\\/)' + next;\n                    pp[i + 1] = GLOBSTAR;\n                }\n            });\n            return pp.filter(p => p !== GLOBSTAR).join('/');\n        })\n            .join('|');\n        // need to wrap in parens if we had more than one thing with |,\n        // otherwise only the first will be anchored to ^ and the last to $\n        const [open, close] = set.length > 1 ? ['(?:', ')'] : ['', ''];\n        // must match entire pattern\n        // ending in a * or ** will make it less strict.\n        re = '^' + open + re + close + '$';\n        // can match anything, as long as it's not this.\n        if (this.negate)\n            re = '^(?!' + re + ').+$';\n        try {\n            this.regexp = new RegExp(re, [...flags].join(''));\n            /* c8 ignore start */\n        }\n        catch (ex) {\n            // should be impossible\n            this.regexp = false;\n        }\n        /* c8 ignore stop */\n        return this.regexp;\n    }\n    slashSplit(p) {\n        // if p starts with // on windows, we preserve that\n        // so that UNC paths aren't broken.  Otherwise, any number of\n        // / characters are coalesced into one, unless\n        // preserveMultipleSlashes is set to true.\n        if (this.preserveMultipleSlashes) {\n            return p.split('/');\n        }\n        else if (this.isWindows && /^\\/\\/[^\\/]+/.test(p)) {\n            // add an extra '' for the one we lose\n            return ['', ...p.split(/\\/+/)];\n        }\n        else {\n            return p.split(/\\/+/);\n        }\n    }\n    match(f, partial = this.partial) {\n        this.debug('match', f, this.pattern);\n        // short-circuit in the case of busted things.\n        // comments, etc.\n        if (this.comment) {\n            return false;\n        }\n        if (this.empty) {\n            return f === '';\n        }\n        if (f === '/' && partial) {\n            return true;\n        }\n        const options = this.options;\n        // windows: need to use /, not \\\n        if (this.isWindows) {\n            f = f.split('\\\\').join('/');\n        }\n        // treat the test path as a set of pathparts.\n        const ff = this.slashSplit(f);\n        this.debug(this.pattern, 'split', ff);\n        // just ONE of the pattern sets in this.set needs to match\n        // in order for it to be valid.  If negating, then just one\n        // match means that we have failed.\n        // Either way, return on the first hit.\n        const set = this.set;\n        this.debug(this.pattern, 'set', set);\n        // Find the basename of the path by looking for the last non-empty segment\n        let filename = ff[ff.length - 1];\n        if (!filename) {\n            for (let i = ff.length - 2; !filename && i >= 0; i--) {\n                filename = ff[i];\n            }\n        }\n        for (let i = 0; i < set.length; i++) {\n            const pattern = set[i];\n            let file = ff;\n            if (options.matchBase && pattern.length === 1) {\n                file = [filename];\n            }\n            const hit = this.matchOne(file, pattern, partial);\n            if (hit) {\n                if (options.flipNegate) {\n                    return true;\n                }\n                return !this.negate;\n            }\n        }\n        // didn't get any hits.  this is success if it's a negative\n        // pattern, failure otherwise.\n        if (options.flipNegate) {\n            return false;\n        }\n        return this.negate;\n    }\n    static defaults(def) {\n        return minimatch.defaults(def).Minimatch;\n    }\n}\n/* c8 ignore start */\nexport { AST } from './ast.js';\nexport { escape } from './escape.js';\nexport { unescape } from './unescape.js';\n/* c8 ignore stop */\nminimatch.AST = AST;\nminimatch.Minimatch = Minimatch;\nminimatch.escape = escape;\nminimatch.unescape = unescape;\n//# sourceMappingURL=index.js.map","import { minimatch } from 'minimatch'\nexport default class CoreEvent {\n  #settings\n  #enable = false\n  #_boundListener\n  #target = []\n  constructor($settings) { \n    this.#settings = $settings\n    this.enable = this.#settings.enable\n  }\n  get type() { return this.#settings.type }\n  get path() { return this.#settings.path }\n  get target() {\n    const pretargets = this.#target\n    const propertyDirectory = this.#context.propertyDirectory\n    const targetPaths = []\n    const targets = []\n    iteratePropertyPaths: \n    for(const $propertyPath of propertyDirectory) {\n      const propertyPathMatch = minimatch($propertyPath, this.path)\n      if(propertyPathMatch === true) { targetPaths.push($propertyPath) }\n    }\n    iterateTargetPaths: \n    for(const $targetPath of targetPaths) {\n      const pretargetElement = pretargets.find(\n        ($pretarget) => $pretarget.path === $targetPath\n      )\n      let target\n      let targetElement\n      if(pretargetElement !== undefined) { targetElement = pretargetElement }\n      else {\n        target = this.#context\n        const pathKeys = $targetPath.split('.')\n        let pathKeysIndex = 0\n        iterateTargetPathKeys: \n        while(pathKeysIndex < pathKeys.length) {\n          let pathKey = pathKeys[pathKeysIndex]\n          if(pathKeysIndex === 0 && pathKey === ':scope') {\n            break iterateTargetPathKeys\n          }\n          iterateTargetAccessors: \n          for(const $TargetAccessor of this.#propertyClassEvents.TargetAccessors) {\n            if($TargetAccessor === '[]') {\n              target = target[pathKey]\n            }\n            else if($TargetAccessor === 'get') {\n              target = target?.get(pathKey)\n            }\n            if(target !== undefined) { break iterateTargetAccessors }\n          }\n          pathKeysIndex++\n        }\n      }\n      if(target !== undefined) {\n        targetElement = {\n          path: $targetPath,\n          target: target,\n          enable: false,\n        }\n      }\n      targets.push(targetElement)\n    }\n    this.#target = targets\n    return this.#target\n  }\n  get listener() { return this.#settings.listener }\n  get options() { return this.#settings.options }\n  get enable() { return this.#enable }\n  set enable($enable) {\n    if(\n      $enable === this.#enable ||\n      this.target.length === 0\n    ) { return }\n    const eventAbility = (\n      $enable === true\n    ) ? this.#propertyClassEvents.Assign\n      : this.#propertyClassEvents.Deassign\n\n    iterateTargets: \n    for(const { path, target, enable } of this.target) {\n      if(enable === eventAbility) { continue iterateTargets }\n      try {\n        target[eventAbility](this.type, this.#boundListener, this.options)\n        target.enable = eventAbility\n      } catch($err) {}\n    }\n    this.#enable = $enable\n  }\n  get #propertyClassEvents() { return this.#settings.propertyClassEvents }\n  get #context() { return this.#settings.context }\n  get #boundListener() {\n    if(this.#_boundListener !== undefined) { return this.#_boundListener }\n    this.#_boundListener = this.#settings.listener.bind(this.#context)\n    return this.#_boundListener\n  }\n}","export default {\n  events: [/* {\n    type: \"click\",\n    target \"views.\",\n  } */],\n  propertyClasses: [/* {\n    ID: \"VIEW\",\n    Name: \"views\",\n    Class: View,\n    Names: {\n      Monople: { Formal: \"View\", Nonformal: \"view\" },\n      Multiple: { Formal: \"Views\", Nonformal: \"views\" },\n      Minister: {\n        Ad: { Formal: \"Add\", Nonformal: \"add\" },\n        Dead: { Formal: \"Remove\", Nonformal: \"remove\" },\n      },\n    },\n    Events: {\n      Assign: \"addEventListener\", // \"on\",\n      Deassign: \"removeEventListener\", // \"off\",\n      TargetAccessors: [\"[]\", \"get\"],\n    },\n    States: {\n      Instate: function Instate($propertyClass, $property, $value) {},\n      Deinstate: function Deinstate($propertyClass, $property) {},\n    },\n    Definition: {\n      Object: Array, // Object, // undefined,\n    }\n  } */],\n}","export default {\n  assign: [],\n  defineProperties: {},\n  enableEvents: false,\n}","import { expandEvents, recursiveAssign, typedObjectLiteral, typeOf, pathkeyTree } from '../coutil/index.js'\nimport PropertyClass from './propertyClass/index.js'\nimport Events from './propertyClass/events/index.js'\nimport { Instate, Deinstate } from './propertyClass/states/index.js'\nimport CoreEvent from './event/index.js'\nimport Settings from './settings/index.js' \nimport Options from './options/index.js' \nexport default class Core extends EventTarget {\n  #settings\n  #options\n  #_events\n  #_propertyClassEvents\n  #_propertyClasses = []\n  static propertyClasses = []\n  constructor($settings = {}, $options = {}) {\n    super()\n    this.settings = $settings\n    this.options = $options\n    this.addPropertyClasses(this.settings.propertyClasses)\n    this.#addProperties(this.settings)\n    this.addEvents(this.settings.events)\n    this.#defineProperties(this.options.defineProperties)\n    this.#assign(...this.options.assign)\n    if(this.options.enableEvents) this.enableEvents(this.options.enableEvents) \n  }\n  get propertyDirectory() { return pathkeyTree(this) }\n  get #propertyClassEvents() {\n    if(this.#_propertyClassEvents !== undefined) return this.#_propertyClassEvents\n    this.#_propertyClassEvents = {}\n    for(const $propertyClass of this.#propertyClasses) {\n      this.#_propertyClassEvents[$propertyClass.Name] = $propertyClass.Events\n    }\n    return this.#_propertyClassEvents\n  }\n  get settings() { return this.#settings }\n  set settings($settings) {\n    if(this.#settings !== undefined) returnd\n    this.#settings = Object.assign({}, Settings, $settings)\n  }\n  get options() { return this.#options }\n  set options($options) {\n    if(this.#options !== undefined) return\n    this.#options = recursiveAssign(structuredClone(Options), $options)\n  }\n  get #events() {\n    if(this.#_events !== undefined) return this.#_events\n    this.#_events = []\n    return this.#_events\n  }\n  get #propertyClasses() { return this.#_propertyClasses }\n  #getPropertyClass() {\n    const { ID, Name } = arguments[0]\n    let propertyClass\n    iteratePropertyClasses: \n    for(const $propertyClass of this.#propertyClasses) {\n      if(\n        ID && $propertyClass.ID === ID ||\n        Name && $propertyClass.Name === Name\n      ) { propertyClass = $propertyClass }\n    }\n    return propertyClass\n  }\n  #addProperties() {\n    iteratePropertyClasses: \n    for(const $propertyClass of this.#propertyClasses) {\n      const { Name, Names, Definition } = $propertyClass\n      if(Definition.Object !== undefined) {\n        this[`${Names.Minister.Ad.Nonformal}${Names.Multiple.Formal}`](this.settings[Name])\n      }\n      else if(this.settings[Name] !== undefined) {\n        this[Name] = this.settings[Name]\n      }\n    }\n    return this\n  }\n  addPropertyClasses() {\n    const $this = this\n    let $propertyClasses = (arguments.length === 0)\n      ? this.settings.propertyClasses\n      : arguments[0]\n    if(\n      !Array.isArray($propertyClasses) &&\n      typeof $propertyClasses === 'object'\n    ) {\n      $propertyClasses = Object.values(arguments[0])\n    }\n    const propertyClasses = this.#propertyClasses\n    iteratePropertyClasses: \n    for(const $propertyClass of $propertyClasses) {\n      // Class States\n      $propertyClass.States = $propertyClass.States || {}\n      $propertyClass.Definition = $propertyClass.Definition || {}\n      // Class Instate\n      if($propertyClass.States.Instate === undefined) {\n        $propertyClass.States.Instate = Instate \n      }\n      // Class Deinstate\n      if($propertyClass.States.Deinstate === undefined) {\n        $propertyClass.States.Deinstate = Deinstate \n      }\n      const {\n        ID,\n        Name,\n        Names,\n        Events,\n        States,\n        Definition,\n      } = $propertyClass\n      let propertyValue\n      if(\n        Definition.Object === \"Array\" || \n        Definition.Object === \"Object\"\n      ) {\n        Object.defineProperties(this, {\n          // Property Class Instances\n          [Name]: {\n            configurable: true, enumerable: true,  \n            get() {\n              if(propertyValue !== undefined) {\n                return propertyValue\n              }\n              propertyValue = new PropertyClass($propertyClass, $this)\n              return propertyValue\n            },\n            set($propertyClassInstances) {\n              const propertyClassInstances = $this[Name]\n              let propertyClassInstancesEntries\n              if($propertyClassInstances) {\n                if(Array.isArray($propertyClassInstances)) {\n                  propertyClassInstancesEntries = $propertyClassInstances\n                }\n                else {\n                  propertyClassInstancesEntries = Object.entries($propertyClassInstances)\n                }\n              } else { propertyClassInstancesEntries = [] }\n              iteratePropertyClassInstances: \n              for(const [\n                $propertyClassInstanceName, $propertyClassInstance\n              ] of propertyClassInstancesEntries) {\n                propertyClassInstances[$propertyClassInstanceName] = $propertyClassInstance\n              }\n            }\n          },\n          // Add Property Class Instances\n          [`${Names.Minister.Ad.Nonformal}${Names.Multiple.Formal}`]: {\n            configurable: true, enumerable: false, writable: false, \n            value: function() {\n              const $arguments = [...arguments]\n              if($arguments.length === 1) {\n                const [$values] = $arguments\n                if(Definition.Object === \"Array\") {\n                  $this[Name] = Object.entries($values)\n                }\n                else {\n                  if(Array.isArray($values)) {\n                    $this[Name] = Object.fromEntries($values)\n                  }\n                  else {\n                    $this[Name] = $values\n                  }\n                }\n              }\n              else if($arguments.length === 2) {\n                const [$key, $value] = $arguments\n                $this[Name] = { [$key]: $value }\n              }\n              return $this\n            }\n          },\n          // Remove Property Class Instances\n          [`${Names.Minister.Dead.Nonformal}${Names.Multiple.Formal}`]: {\n            configurable: true, enumerable: false, writable: false, \n            value: function() {\n              const [$removeKeys] = [...arguments]\n              const removeKeys = []\n              const typeofRemoveKeys = typeof $arguments[0]\n              if(typeofRemoveKeys === 'string') { removeKeys.push($arguments[0]) }\n              else if(typeofRemoveKeys === 'object') {\n                if(Array.isArray($removeKeys)) { removeKeys.push(...$removeKeys) }\n                else { removeKeys.push(...Object.keys($removeKeys)) }\n              }\n              else if(typeofRemoveKeys === 'undefined') {\n                removeKeys.push(...Object.keys($this[Name]))\n              }\n              for(const $removeKey of $removeKeys) {\n                delete $this[Name][$removeKey]\n              }\n              return $this\n            }\n          },\n        })\n      }\n      else {\n        Object.defineProperties(this, {\n          [Names.Monople.Nonformal]: {\n            get() {\n              return propertyValue\n            },\n            set($propertyClassInstance) {\n              propertyValue = States.Instate(Object.assign({\n                core: this\n              }, $propertyClass), Name, $propertyClassInstance)\n            }\n          },\n        })\n      }\n      propertyClasses.push($propertyClass)\n    }\n    return this\n  }\n  removePropertyClasses() {\n    let removePropertyClasses = []\n    if(arguments.length === 0) { removePropertyClasses = removePropertyClasses.concat(\n      Object.keys(this.#propertyClasses)\n    ) }\n    else if(arguments.length === 1) {\n      const $removePropertyClasses = arguments[0]\n      const typeofRemovePropertyClasses = typeOf($removePropertyClasses)\n      if(\n        typeofRemovePropertyClasses === 'string'\n      ) {\n        removePropertyClasses = removePropertyClasses.concat($removePropertyClasses)\n      }\n      else if(typeofRemovePropertyClasses === 'array') {\n        removePropertyClasses = removePropertyClasses.concat($removePropertyClasses)\n      }\n      else if(typeofRemovePropertyClasses === 'object') {\n        removePropertyClasses = removePropertyClasses.concat(Object.keys($removePropertyClasses))\n      }\n    }\n    iterateRemovePropertyClasses: \n    for(const $removePropertyClassName of removePropertyClasses) {\n      const { Names, Definition } = this.#getPropertyClass({ Name: $removePropertyClassName })\n      const propertyClassInstances = this[Names.Multiple.Nonformal]\n      iteratePropertyClassInstances: \n      for(const [\n        $propertyClassInstanceName, $propertyClassInstance\n      ] of Object.entries(this[Names.Multiple.Nonformal])) {\n        delete propertyClassInstances[$propertyClassInstanceName]\n      }\n      delete this[`_${Names.Multiple.Nonformal}`]\n      Object.defineProperty(this, Names.Multiple.Nonformal, {\n        configurable: true, enumerable: false, writable: true, \n        value: undefined\n      })\n      delete this[Names.Multiple.Nonformal]\n      delete this[`${Names.Minister.Ad.Nonformal}${Names.Multiple.Formal}`]\n      delete this[`${Names.Minister.Dead.Nonformal}${Names.Multiple.Formal}`]\n    }\n    return this\n  }\n  getEvents() {\n    const getEvents = []\n    const events = this.#events\n    const $events = [].concat(arguments[0])\n    iterateEvents: \n    for(const $event of $events) {\n      const { type, path, listener, enable } = $event\n      const eventFilterProperties = []\n      if(type !== undefined) { eventFilterProperties.push(['type', type]) }\n      if(path !== undefined) { eventFilterProperties.push(['path', path]) }\n      if(listener !== undefined) { eventFilterProperties.push(['listener', listener]) }\n      if(enable !== undefined) { eventFilterProperties.push(['enable', enable]) }\n      getEvents.push(\n        ...events.filter(($existingEvent) => {\n          return eventFilterProperties.reduce(($match, [\n            $eventFilterPropertyKey, $eventFilterPropertyValue\n          ]) => {\n            const match = (\n              $existingEvent[$eventFilterPropertyKey] === $eventFilterPropertyValue\n            ) ? true : false\n            if($match !== false) { $match = match }\n            return $match\n          }, undefined)\n        })\n      )\n    }\n    return getEvents\n  }\n  addEvents() {\n    if(arguments[0] === undefined) { return this }\n    const $events = expandEvents(arguments[0])\n    const events = this.#events\n    iterateEvents: \n    for(let $event of $events) {\n      const propertyClassName = $event.path.split('.').shift()\n      const propertyClassEvents = Object.assign(\n        {}, \n        this.#propertyClassEvents[propertyClassName],\n        $event?.sign, \n      )\n      $event = Object.assign(\n        {}, \n        $event,\n        {\n          context: this,\n          propertyClassEvents,\n        }\n      )\n      const coreEvent = new CoreEvent($event)\n      events.push(coreEvent)\n    }\n    return this\n  }\n  removeEvents() {\n    let $events\n    if(arguments.length === 0) { $events = this.getEvents() }\n    else if(arguments.length === 1) {\n      $events = this.getEvents(arguments[0])\n    }\n    if($events.length === 0) return this\n    let eventsIndex = $events.length - 1\n    iterateEvents: \n    while(eventsIndex > -1) {\n      const event = $events[eventsIndex]\n      const removeEventIndex = this.#events.findIndex(\n        ($event) => $event === event\n      )\n      if(removeEventIndex !== -1) {\n        event.enable = false\n        this.#events.splice(eventsIndex, 1)\n      }\n      eventsIndex--\n    }\n    return this\n  }\n  enableEvents() {\n    let $events\n    if(\n      arguments.length === 0 ||\n      arguments[0] === true\n    ) { $events = this.#events }\n    else { $events = this.getEvents(arguments[0]) }\n    return this.#toggleEventAbility('Assign', $events)\n  }\n  disableEvents() {\n    let $events\n    if(arguments.length === 0) { $events = this.#events }\n    else { $events = this.getEvents(arguments[0]) }\n    return this.#toggleEventAbility('Deassign', $events)\n  }\n  #assign() {\n    Object.assign(this, ...arguments)\n    return this\n  }\n  #defineProperties() {\n    Object.defineProperties(this, arguments[0])\n    return this\n  }\n  #toggleEventAbility($eventListenerMethod, $events) {\n    let enability\n    if($eventListenerMethod === 'Assign') { enability = true }\n    else if($eventListenerMethod === 'Deassign') { enability = false }\n    else { return this }\n    iterateEvents:\n    for(const $event of $events) { $event.enable = enability }\n    return this\n  }\n}"],"names":["path.parse","Tree.get","Tree.set","Instate","States.Instate","Deinstate","States.Deinstate","require$$0","regExpEscape","qmark","star"],"mappings":"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","x_google_ignoreList":[15,16,17,18,19,20,21,22]}